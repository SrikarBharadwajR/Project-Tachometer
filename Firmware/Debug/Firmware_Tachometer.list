
Firmware_Tachometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002494  080081f0  080081f0  000181f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a684  0800a684  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800a684  0800a684  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a684  0800a684  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a684  0800a684  0001a684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a688  0800a688  0001a688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800a68c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001848  20000354  0800a9e0  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b9c  0800a9e0  00021b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020657  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ba5  00000000  00000000  00040a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d736  00000000  00000000  000455bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001220  00000000  00000000  00052cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001528  00000000  00000000  00053f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bea3  00000000  00000000  00055440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227f7  00000000  00000000  000712e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00093c3b  00000000  00000000  00093ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004944  00000000  00000000  00127718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0012c05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	080081d4 	.word	0x080081d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	080081d4 	.word	0x080081d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	if (state == IDLE) {
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001032:	7813      	ldrb	r3, [r2, #0]
 8001034:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001038:	b943      	cbnz	r3, 800104c <HAL_TIM_IC_CaptureCallback+0x1c>
		T1 = TIM4->CCR4;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x48>)
 800103c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001040:	6018      	str	r0, [r3, #0]
		TIM4_OVC = 0;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001044:	6019      	str	r1, [r3, #0]
		state = DONE;
 8001046:	2301      	movs	r3, #1
	} else if (state == DONE) {
		T2 = TIM4->CCR4;
		ticks = (T2 + (TIM4_OVC * 65536)) - T1;
		state = IDLE;
 8001048:	7013      	strb	r3, [r2, #0]
		//TIM4->CCR4 =0;
	}
}
 800104a:	4770      	bx	lr
	} else if (state == DONE) {
 800104c:	7813      	ldrb	r3, [r2, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1fb      	bne.n	800104a <HAL_TIM_IC_CaptureCallback+0x1a>
		T2 = TIM4->CCR4;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001054:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001058:	6019      	str	r1, [r3, #0]
		ticks = (T2 + (TIM4_OVC * 65536)) - T1;
 800105a:	4909      	ldr	r1, [pc, #36]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x50>)
 800105c:	6808      	ldr	r0, [r1, #0]
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	ebc3 4300 	rsb	r3, r3, r0, lsl #16
 8001068:	440b      	add	r3, r1
 800106a:	4907      	ldr	r1, [pc, #28]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x58>)
 800106c:	600b      	str	r3, [r1, #0]
		state = IDLE;
 800106e:	2300      	movs	r3, #0
 8001070:	e7ea      	b.n	8001048 <HAL_TIM_IC_CaptureCallback+0x18>
 8001072:	bf00      	nop
 8001074:	20000460 	.word	0x20000460
 8001078:	40000800 	.word	0x40000800
 800107c:	20000370 	.word	0x20000370
 8001080:	20000378 	.word	0x20000378
 8001084:	20000374 	.word	0x20000374
 8001088:	20000464 	.word	0x20000464

0800108c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	TIM4_OVC++;
 800108c:	4a02      	ldr	r2, [pc, #8]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0xc>)
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000378 	.word	0x20000378

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b530      	push	{r4, r5, lr}
 800109e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a0:	2214      	movs	r2, #20
 80010a2:	2100      	movs	r1, #0
 80010a4:	a80c      	add	r0, sp, #48	; 0x30
 80010a6:	f004 ffaa 	bl	8005ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010aa:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ae:	2100      	movs	r1, #0
 80010b0:	eb0d 0002 	add.w	r0, sp, r2
 80010b4:	f004 ffa3 	bl	8005ffe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	462a      	mov	r2, r5
 80010ba:	2100      	movs	r1, #0
 80010bc:	a801      	add	r0, sp, #4
 80010be:	f004 ff9e 	bl	8005ffe <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010da:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f001 ff5a 	bl	8002f94 <HAL_RCC_OscConfig>
 80010e0:	b108      	cbz	r0, 80010e6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010e4:	e7fe      	b.n	80010e4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f6:	4621      	mov	r1, r4
 80010f8:	a805      	add	r0, sp, #20
 80010fa:	f002 f90d 	bl	8003318 <HAL_RCC_ClockConfig>
 80010fe:	b108      	cbz	r0, 8001104 <SystemClock_Config+0x68>
 8001100:	b672      	cpsid	i
	while (1) {
 8001102:	e7fe      	b.n	8001102 <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001104:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001108:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	f002 f9c1 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	b108      	cbz	r0, 8001114 <SystemClock_Config+0x78>
 8001110:	b672      	cpsid	i
	while (1) {
 8001112:	e7fe      	b.n	8001112 <SystemClock_Config+0x76>
}
 8001114:	b015      	add	sp, #84	; 0x54
 8001116:	bd30      	pop	{r4, r5, pc}

08001118 <main>:
{
 8001118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	2500      	movs	r5, #0
{
 800111e:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001120:	f000 fc12 	bl	8001948 <HAL_Init>
  SystemClock_Config();
 8001124:	f7ff ffba 	bl	800109c <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <main+0x1b4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	2100      	movs	r1, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	699a      	ldr	r2, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	a806      	add	r0, sp, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	f042 0220 	orr.w	r2, r2, #32
 8001134:	619a      	str	r2, [r3, #24]
 8001136:	699a      	ldr	r2, [r3, #24]
  htim4.Instance = TIM4;
 8001138:	4c65      	ldr	r4, [pc, #404]	; (80012d0 <main+0x1b8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	f002 0220 	and.w	r2, r2, #32
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	f042 0204 	orr.w	r2, r2, #4
 8001148:	619a      	str	r2, [r3, #24]
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	f002 0204 	and.w	r2, r2, #4
 8001150:	9202      	str	r2, [sp, #8]
 8001152:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	f042 0208 	orr.w	r2, r2, #8
 800115a:	619a      	str	r2, [r3, #24]
 800115c:	699b      	ldr	r3, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	2210      	movs	r2, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	9303      	str	r3, [sp, #12]
 8001166:	9b03      	ldr	r3, [sp, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001168:	f004 ff49 	bl	8005ffe <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800116c:	2210      	movs	r2, #16
 800116e:	4629      	mov	r1, r5
 8001170:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	e9cd 5504 	strd	r5, r5, [sp, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001176:	f004 ff42 	bl	8005ffe <memset>
  htim4.Instance = TIM4;
 800117a:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <main+0x1bc>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800117c:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 0;
 800117e:	e9c4 3500 	strd	r3, r5, [r4]
  htim4.Init.Period = 65535;
 8001182:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118a:	2380      	movs	r3, #128	; 0x80
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001190:	f002 fb00 	bl	8003794 <HAL_TIM_Base_Init>
 8001194:	b108      	cbz	r0, 800119a <main+0x82>
 8001196:	b672      	cpsid	i
	while (1) {
 8001198:	e7fe      	b.n	8001198 <main+0x80>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800119e:	4620      	mov	r0, r4
 80011a0:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a4:	f002 fc14 	bl	80039d0 <HAL_TIM_ConfigClockSource>
 80011a8:	b108      	cbz	r0, 80011ae <main+0x96>
 80011aa:	b672      	cpsid	i
	while (1) {
 80011ac:	e7fe      	b.n	80011ac <main+0x94>
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80011ae:	4620      	mov	r0, r4
 80011b0:	f002 fb1c 	bl	80037ec <HAL_TIM_IC_Init>
 80011b4:	b108      	cbz	r0, 80011ba <main+0xa2>
 80011b6:	b672      	cpsid	i
	while (1) {
 80011b8:	e7fe      	b.n	80011b8 <main+0xa0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011be:	a904      	add	r1, sp, #16
 80011c0:	4620      	mov	r0, r4
 80011c2:	f002 fd1f 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	b108      	cbz	r0, 80011cc <main+0xb4>
 80011c8:	b672      	cpsid	i
	while (1) {
 80011ca:	e7fe      	b.n	80011ca <main+0xb2>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ce:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d0:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 80011d4:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80011d6:	220c      	movs	r2, #12
 80011d8:	4620      	mov	r0, r4
 80011da:	a90a      	add	r1, sp, #40	; 0x28
 80011dc:	f002 fb5c 	bl	8003898 <HAL_TIM_IC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b108      	cbz	r0, 80011e8 <main+0xd0>
 80011e4:	b672      	cpsid	i
	while (1) {
 80011e6:	e7fe      	b.n	80011e6 <main+0xce>
  hi2c1.Instance = I2C1;
 80011e8:	483b      	ldr	r0, [pc, #236]	; (80012d8 <main+0x1c0>)
  hi2c1.Init.ClockSpeed = 400000;
 80011ea:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <main+0x1c4>)
 80011ec:	4d3c      	ldr	r5, [pc, #240]	; (80012e0 <main+0x1c8>)
  hi2c1.Init.OwnAddress1 = 0;
 80011ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 80011f2:	e9c0 5200 	strd	r5, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001204:	f000 fe04 	bl	8001e10 <HAL_I2C_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	b108      	cbz	r0, 8001210 <main+0xf8>
 800120c:	b672      	cpsid	i
	while (1) {
 800120e:	e7fe      	b.n	800120e <main+0xf6>
  huart2.Init.BaudRate = 115200;
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	250c      	movs	r5, #12
  huart2.Instance = USART2;
 8001216:	4833      	ldr	r0, [pc, #204]	; (80012e4 <main+0x1cc>)
  huart2.Init.BaudRate = 115200;
 8001218:	4933      	ldr	r1, [pc, #204]	; (80012e8 <main+0x1d0>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800121e:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	e9c0 5305 	strd	r5, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	f002 fd55 	bl	8003cd8 <HAL_UART_Init>
 800122e:	b108      	cbz	r0, 8001234 <main+0x11c>
 8001230:	b672      	cpsid	i
	while (1) {
 8001232:	e7fe      	b.n	8001232 <main+0x11a>
  MX_USB_DEVICE_Init();
 8001234:	f003 ff98 	bl	8005168 <MX_USB_DEVICE_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 8001238:	4620      	mov	r0, r4
 800123a:	f002 f9a3 	bl	8003584 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 800123e:	4629      	mov	r1, r5
 8001240:	4620      	mov	r0, r4
 8001242:	f002 fc6d 	bl	8003b20 <HAL_TIM_IC_Start_IT>
	SSD1306_Init();
 8001246:	f000 f953 	bl	80014f0 <SSD1306_Init>
		float RPM = ((F_CLK / (float) ticks)) * 60.0;
 800124a:	4e28      	ldr	r6, [pc, #160]	; (80012ec <main+0x1d4>)
 800124c:	4f28      	ldr	r7, [pc, #160]	; (80012f0 <main+0x1d8>)
		if (RPM <= 100000) {
 800124e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80012f4 <main+0x1dc>
		float RPM = ((F_CLK / (float) ticks)) * 60.0;
 8001252:	4d29      	ldr	r5, [pc, #164]	; (80012f8 <main+0x1e0>)
 8001254:	6828      	ldr	r0, [r5, #0]
 8001256:	f7ff fccd 	bl	8000bf4 <__aeabi_ui2f>
 800125a:	4601      	mov	r1, r0
 800125c:	4630      	mov	r0, r6
 800125e:	f7ff fdd5 	bl	8000e0c <__aeabi_fdiv>
 8001262:	4639      	mov	r1, r7
 8001264:	f7ff fd1e 	bl	8000ca4 <__aeabi_fmul>
		if (RPM <= 100000) {
 8001268:	4641      	mov	r1, r8
 800126a:	4604      	mov	r4, r0
 800126c:	f7ff fec2 	bl	8000ff4 <__aeabi_fcmple>
 8001270:	4601      	mov	r1, r0
 8001272:	b328      	cbz	r0, 80012c0 <main+0x1a8>
			sprintf(message, "%.1f", RPM);
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff f8d7 	bl	8000428 <__aeabi_f2d>
 800127a:	460b      	mov	r3, r1
 800127c:	4602      	mov	r2, r0
 800127e:	491f      	ldr	r1, [pc, #124]	; (80012fc <main+0x1e4>)
 8001280:	a80a      	add	r0, sp, #40	; 0x28
 8001282:	f004 fe59 	bl	8005f38 <siprintf>
			SSD1306_GotoXY(0, 0);
 8001286:	2100      	movs	r1, #0
 8001288:	4608      	mov	r0, r1
 800128a:	f000 f873 	bl	8001374 <SSD1306_GotoXY>
			SSD1306_Puts(message, &Font_16x26, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	491b      	ldr	r1, [pc, #108]	; (8001300 <main+0x1e8>)
 8001292:	a80a      	add	r0, sp, #40	; 0x28
 8001294:	f000 f8c2 	bl	800141c <SSD1306_Puts>
			SSD1306_GotoXY(90, 40);
 8001298:	2128      	movs	r1, #40	; 0x28
 800129a:	205a      	movs	r0, #90	; 0x5a
 800129c:	f000 f86a 	bl	8001374 <SSD1306_GotoXY>
			SSD1306_Puts("RPM", &Font_11x18, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	4918      	ldr	r1, [pc, #96]	; (8001304 <main+0x1ec>)
 80012a4:	4818      	ldr	r0, [pc, #96]	; (8001308 <main+0x1f0>)
			SSD1306_Puts("No RPM", &Font_16x26, 1);
 80012a6:	f000 f8b9 	bl	800141c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80012aa:	f000 f8f7 	bl	800149c <SSD1306_UpdateScreen>
		ticks = 1.0;
 80012ae:	2301      	movs	r3, #1
		HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		ticks = 1.0;
 80012b4:	602b      	str	r3, [r5, #0]
		HAL_Delay(1000);
 80012b6:	f000 fb6b 	bl	8001990 <HAL_Delay>
		SSD1306_Clear();
 80012ba:	f000 f911 	bl	80014e0 <SSD1306_Clear>
	while (1) {
 80012be:	e7c8      	b.n	8001252 <main+0x13a>
			SSD1306_GotoXY(0, 0);
 80012c0:	f000 f858 	bl	8001374 <SSD1306_GotoXY>
			SSD1306_Puts("No RPM", &Font_16x26, 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <main+0x1e8>)
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <main+0x1f4>)
 80012ca:	e7ec      	b.n	80012a6 <main+0x18e>
 80012cc:	40021000 	.word	0x40021000
 80012d0:	200003d0 	.word	0x200003d0
 80012d4:	40000800 	.word	0x40000800
 80012d8:	2000037c 	.word	0x2000037c
 80012dc:	00061a80 	.word	0x00061a80
 80012e0:	40005400 	.word	0x40005400
 80012e4:	20000418 	.word	0x20000418
 80012e8:	40004400 	.word	0x40004400
 80012ec:	4c895440 	.word	0x4c895440
 80012f0:	42700000 	.word	0x42700000
 80012f4:	47c35000 	.word	0x47c35000
 80012f8:	20000464 	.word	0x20000464
 80012fc:	0800a298 	.word	0x0800a298
 8001300:	20000008 	.word	0x20000008
 8001304:	20000000 	.word	0x20000000
 8001308:	0800a2a0 	.word	0x0800a2a0
 800130c:	0800a29d 	.word	0x0800a29d

08001310 <Error_Handler>:
 8001310:	b672      	cpsid	i
	while (1) {
 8001312:	e7fe      	b.n	8001312 <Error_Handler+0x2>

08001314 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001314:	2800      	cmp	r0, #0
 8001316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131a:	bf14      	ite	ne
 800131c:	21ff      	movne	r1, #255	; 0xff
 800131e:	2100      	moveq	r1, #0
 8001320:	4801      	ldr	r0, [pc, #4]	; (8001328 <SSD1306_Fill+0x14>)
 8001322:	f004 be6c 	b.w	8005ffe <memset>
 8001326:	bf00      	nop
 8001328:	2000046e 	.word	0x2000046e

0800132c <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 800132c:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800132e:	b530      	push	{r4, r5, lr}
	if (
 8001330:	d810      	bhi.n	8001354 <SSD1306_DrawPixel+0x28>
		x >= SSD1306_WIDTH ||
 8001332:	293f      	cmp	r1, #63	; 0x3f
 8001334:	d80e      	bhi.n	8001354 <SSD1306_DrawPixel+0x28>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <SSD1306_DrawPixel+0x40>)
 8001338:	4c0d      	ldr	r4, [pc, #52]	; (8001370 <SSD1306_DrawPixel+0x44>)
 800133a:	791d      	ldrb	r5, [r3, #4]
 800133c:	08cb      	lsrs	r3, r1, #3
 800133e:	f001 0107 	and.w	r1, r1, #7
 8001342:	b145      	cbz	r5, 8001356 <SSD1306_DrawPixel+0x2a>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001344:	b94a      	cbnz	r2, 800135a <SSD1306_DrawPixel+0x2e>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001346:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800134a:	2301      	movs	r3, #1
 800134c:	5c22      	ldrb	r2, [r4, r0]
 800134e:	408b      	lsls	r3, r1
 8001350:	4313      	orrs	r3, r2
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001352:	5423      	strb	r3, [r4, r0]
	}
}
 8001354:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8001356:	2a01      	cmp	r2, #1
 8001358:	d0f5      	beq.n	8001346 <SSD1306_DrawPixel+0x1a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800135a:	2201      	movs	r2, #1
 800135c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001360:	5c23      	ldrb	r3, [r4, r0]
 8001362:	408a      	lsls	r2, r1
 8001364:	ea23 0302 	bic.w	r3, r3, r2
 8001368:	e7f3      	b.n	8001352 <SSD1306_DrawPixel+0x26>
 800136a:	bf00      	nop
 800136c:	20000468 	.word	0x20000468
 8001370:	2000046e 	.word	0x2000046e

08001374 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <SSD1306_GotoXY+0x8>)
 8001376:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001378:	8059      	strh	r1, [r3, #2]
}
 800137a:	4770      	bx	lr
 800137c:	20000468 	.word	0x20000468

08001380 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001384:	f8df b090 	ldr.w	fp, [pc, #144]	; 8001418 <SSD1306_Putc+0x98>
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001388:	4691      	mov	r9, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800138a:	f8bb 6000 	ldrh.w	r6, [fp]
 800138e:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001390:	4605      	mov	r5, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001392:	4432      	add	r2, r6
	if (
 8001394:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001396:	460c      	mov	r4, r1
 8001398:	b085      	sub	sp, #20
	if (
 800139a:	dc3a      	bgt.n	8001412 <SSD1306_Putc+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800139c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80013a0:	784a      	ldrb	r2, [r1, #1]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013a6:	2a3f      	cmp	r2, #63	; 0x3f
 80013a8:	dc33      	bgt.n	8001412 <SSD1306_Putc+0x92>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013aa:	2700      	movs	r7, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013ac:	f1a0 0320 	sub.w	r3, r0, #32
 80013b0:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 80013b2:	7862      	ldrb	r2, [r4, #1]
 80013b4:	4297      	cmp	r7, r2
 80013b6:	d307      	bcc.n	80013c8 <SSD1306_Putc+0x48>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013b8:	7822      	ldrb	r2, [r4, #0]
 80013ba:	4416      	add	r6, r2
 80013bc:	f8ab 6000 	strh.w	r6, [fp]
	
	/* Return character written */
	return ch;
}
 80013c0:	4628      	mov	r0, r5
 80013c2:	b005      	add	sp, #20
 80013c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 80013c8:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013cc:	9b03      	ldr	r3, [sp, #12]
 80013ce:	6861      	ldr	r1, [r4, #4]
 80013d0:	fb02 7203 	mla	r2, r2, r3, r7
 80013d4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80013d8:	9302      	str	r3, [sp, #8]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	19d9      	adds	r1, r3, r7
 80013de:	fa1f fa81 	uxth.w	sl, r1
		for (j = 0; j < Font->FontWidth; j++) {
 80013e2:	7822      	ldrb	r2, [r4, #0]
 80013e4:	4590      	cmp	r8, r2
 80013e6:	d301      	bcc.n	80013ec <SSD1306_Putc+0x6c>
	for (i = 0; i < Font->FontHeight; i++) {
 80013e8:	3701      	adds	r7, #1
 80013ea:	e7e2      	b.n	80013b2 <SSD1306_Putc+0x32>
			if ((b << j) & 0x8000) {
 80013ec:	9b02      	ldr	r3, [sp, #8]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013ee:	eb06 0008 	add.w	r0, r6, r8
			if ((b << j) & 0x8000) {
 80013f2:	fa03 f208 	lsl.w	r2, r3, r8
 80013f6:	0413      	lsls	r3, r2, #16
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013f8:	bf54      	ite	pl
 80013fa:	fab9 f289 	clzpl	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013fe:	464a      	movmi	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001400:	4651      	mov	r1, sl
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001402:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001404:	bf58      	it	pl
 8001406:	0952      	lsrpl	r2, r2, #5
 8001408:	f7ff ff90 	bl	800132c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800140c:	f108 0801 	add.w	r8, r8, #1
 8001410:	e7e7      	b.n	80013e2 <SSD1306_Putc+0x62>
		return 0;
 8001412:	2500      	movs	r5, #0
 8001414:	e7d4      	b.n	80013c0 <SSD1306_Putc+0x40>
 8001416:	bf00      	nop
 8001418:	20000468 	.word	0x20000468

0800141c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	460d      	mov	r5, r1
 8001420:	4616      	mov	r6, r2
 8001422:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8001424:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001428:	b138      	cbz	r0, 800143a <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800142a:	4632      	mov	r2, r6
 800142c:	4629      	mov	r1, r5
 800142e:	f7ff ffa7 	bl	8001380 <SSD1306_Putc>
 8001432:	4603      	mov	r3, r0
 8001434:	7820      	ldrb	r0, [r4, #0]
 8001436:	4283      	cmp	r3, r0
 8001438:	d0f4      	beq.n	8001424 <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800143c:	b530      	push	{r4, r5, lr}
uint8_t dt[256];
dt[0] = reg;
uint8_t i;
for(i = 0; i < count; i++)
 800143e:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001440:	b0c3      	sub	sp, #268	; 0x10c
dt[0] = reg;
 8001442:	f88d 1008 	strb.w	r1, [sp, #8]
for(i = 0; i < count; i++)
 8001446:	b2e1      	uxtb	r1, r4
 8001448:	4299      	cmp	r1, r3
 800144a:	f104 0501 	add.w	r5, r4, #1
 800144e:	d30a      	bcc.n	8001466 <ssd1306_I2C_WriteMulti+0x2a>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001450:	220a      	movs	r2, #10
 8001452:	3301      	adds	r3, #1
 8001454:	4601      	mov	r1, r0
 8001456:	9200      	str	r2, [sp, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	aa02      	add	r2, sp, #8
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <ssd1306_I2C_WriteMulti+0x38>)
 800145e:	f000 fd7f 	bl	8001f60 <HAL_I2C_Master_Transmit>
}
 8001462:	b043      	add	sp, #268	; 0x10c
 8001464:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8001466:	ac02      	add	r4, sp, #8
 8001468:	440c      	add	r4, r1
 800146a:	5c51      	ldrb	r1, [r2, r1]
 800146c:	7061      	strb	r1, [r4, #1]
 800146e:	462c      	mov	r4, r5
 8001470:	e7e9      	b.n	8001446 <ssd1306_I2C_WriteMulti+0xa>
 8001472:	bf00      	nop
 8001474:	2000037c 	.word	0x2000037c

08001478 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800147a:	230a      	movs	r3, #10
	dt[0] = reg;
 800147c:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8001480:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001484:	4601      	mov	r1, r0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	aa03      	add	r2, sp, #12
 800148a:	2302      	movs	r3, #2
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <ssd1306_I2C_Write+0x20>)
 800148e:	f000 fd67 	bl	8001f60 <HAL_I2C_Master_Transmit>
}
 8001492:	b005      	add	sp, #20
 8001494:	f85d fb04 	ldr.w	pc, [sp], #4
 8001498:	2000037c 	.word	0x2000037c

0800149c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800149c:	b538      	push	{r3, r4, r5, lr}
 800149e:	24b0      	movs	r4, #176	; 0xb0
 80014a0:	4d0e      	ldr	r5, [pc, #56]	; (80014dc <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014a2:	4622      	mov	r2, r4
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f7ff ffe6 	bl	8001478 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	4611      	mov	r1, r2
 80014b2:	f7ff ffe1 	bl	8001478 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80014b6:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 80014b8:	2210      	movs	r2, #16
 80014ba:	2100      	movs	r1, #0
 80014bc:	2078      	movs	r0, #120	; 0x78
 80014be:	f7ff ffdb 	bl	8001478 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80014c2:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014c4:	462a      	mov	r2, r5
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f7ff ffb6 	bl	800143c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014d0:	2cb8      	cmp	r4, #184	; 0xb8
 80014d2:	f105 0580 	add.w	r5, r5, #128	; 0x80
 80014d6:	d1e4      	bne.n	80014a2 <SSD1306_UpdateScreen+0x6>
}
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
 80014da:	bf00      	nop
 80014dc:	2000046e 	.word	0x2000046e

080014e0 <SSD1306_Clear>:
{
 80014e0:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff ff16 	bl	8001314 <SSD1306_Fill>
}
 80014e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 80014ec:	f7ff bfd6 	b.w	800149c <SSD1306_UpdateScreen>

080014f0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80014f0:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014f6:	2201      	movs	r2, #1
 80014f8:	2178      	movs	r1, #120	; 0x78
 80014fa:	4852      	ldr	r0, [pc, #328]	; (8001644 <SSD1306_Init+0x154>)
 80014fc:	f000 fe08 	bl	8002110 <HAL_I2C_IsDeviceReady>
 8001500:	4604      	mov	r4, r0
 8001502:	2800      	cmp	r0, #0
 8001504:	f040 809c 	bne.w	8001640 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001508:	4601      	mov	r1, r0
 800150a:	22ae      	movs	r2, #174	; 0xae
 800150c:	2078      	movs	r0, #120	; 0x78
 800150e:	f7ff ffb3 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001512:	2220      	movs	r2, #32
 8001514:	4621      	mov	r1, r4
 8001516:	2078      	movs	r0, #120	; 0x78
 8001518:	f7ff ffae 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800151c:	2210      	movs	r2, #16
 800151e:	4621      	mov	r1, r4
 8001520:	2078      	movs	r0, #120	; 0x78
 8001522:	f7ff ffa9 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001526:	22b0      	movs	r2, #176	; 0xb0
 8001528:	4621      	mov	r1, r4
 800152a:	2078      	movs	r0, #120	; 0x78
 800152c:	f7ff ffa4 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001530:	22c8      	movs	r2, #200	; 0xc8
 8001532:	4621      	mov	r1, r4
 8001534:	2078      	movs	r0, #120	; 0x78
 8001536:	f7ff ff9f 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800153a:	4622      	mov	r2, r4
 800153c:	4621      	mov	r1, r4
 800153e:	2078      	movs	r0, #120	; 0x78
 8001540:	f7ff ff9a 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001544:	2210      	movs	r2, #16
 8001546:	4621      	mov	r1, r4
 8001548:	2078      	movs	r0, #120	; 0x78
 800154a:	f7ff ff95 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	4621      	mov	r1, r4
 8001552:	2078      	movs	r0, #120	; 0x78
 8001554:	f7ff ff90 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001558:	2281      	movs	r2, #129	; 0x81
 800155a:	4621      	mov	r1, r4
 800155c:	2078      	movs	r0, #120	; 0x78
 800155e:	f7ff ff8b 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	4621      	mov	r1, r4
 8001566:	2078      	movs	r0, #120	; 0x78
 8001568:	f7ff ff86 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800156c:	22a1      	movs	r2, #161	; 0xa1
 800156e:	4621      	mov	r1, r4
 8001570:	2078      	movs	r0, #120	; 0x78
 8001572:	f7ff ff81 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001576:	22a6      	movs	r2, #166	; 0xa6
 8001578:	4621      	mov	r1, r4
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f7ff ff7c 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001580:	22a8      	movs	r2, #168	; 0xa8
 8001582:	4621      	mov	r1, r4
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f7ff ff77 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800158a:	223f      	movs	r2, #63	; 0x3f
 800158c:	4621      	mov	r1, r4
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f7ff ff72 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001594:	22a4      	movs	r2, #164	; 0xa4
 8001596:	4621      	mov	r1, r4
 8001598:	2078      	movs	r0, #120	; 0x78
 800159a:	f7ff ff6d 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800159e:	22d3      	movs	r2, #211	; 0xd3
 80015a0:	4621      	mov	r1, r4
 80015a2:	2078      	movs	r0, #120	; 0x78
 80015a4:	f7ff ff68 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015a8:	4622      	mov	r2, r4
 80015aa:	4621      	mov	r1, r4
 80015ac:	2078      	movs	r0, #120	; 0x78
 80015ae:	f7ff ff63 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015b2:	22d5      	movs	r2, #213	; 0xd5
 80015b4:	4621      	mov	r1, r4
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f7ff ff5e 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015bc:	22f0      	movs	r2, #240	; 0xf0
 80015be:	4621      	mov	r1, r4
 80015c0:	2078      	movs	r0, #120	; 0x78
 80015c2:	f7ff ff59 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015c6:	22d9      	movs	r2, #217	; 0xd9
 80015c8:	4621      	mov	r1, r4
 80015ca:	2078      	movs	r0, #120	; 0x78
 80015cc:	f7ff ff54 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015d0:	2222      	movs	r2, #34	; 0x22
 80015d2:	4621      	mov	r1, r4
 80015d4:	2078      	movs	r0, #120	; 0x78
 80015d6:	f7ff ff4f 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015da:	22da      	movs	r2, #218	; 0xda
 80015dc:	4621      	mov	r1, r4
 80015de:	2078      	movs	r0, #120	; 0x78
 80015e0:	f7ff ff4a 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015e4:	2212      	movs	r2, #18
 80015e6:	4621      	mov	r1, r4
 80015e8:	2078      	movs	r0, #120	; 0x78
 80015ea:	f7ff ff45 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015ee:	22db      	movs	r2, #219	; 0xdb
 80015f0:	4621      	mov	r1, r4
 80015f2:	2078      	movs	r0, #120	; 0x78
 80015f4:	f7ff ff40 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015f8:	2220      	movs	r2, #32
 80015fa:	4621      	mov	r1, r4
 80015fc:	2078      	movs	r0, #120	; 0x78
 80015fe:	f7ff ff3b 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001602:	228d      	movs	r2, #141	; 0x8d
 8001604:	4621      	mov	r1, r4
 8001606:	2078      	movs	r0, #120	; 0x78
 8001608:	f7ff ff36 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800160c:	2214      	movs	r2, #20
 800160e:	4621      	mov	r1, r4
 8001610:	2078      	movs	r0, #120	; 0x78
 8001612:	f7ff ff31 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001616:	22af      	movs	r2, #175	; 0xaf
 8001618:	4621      	mov	r1, r4
 800161a:	2078      	movs	r0, #120	; 0x78
 800161c:	f7ff ff2c 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001620:	222e      	movs	r2, #46	; 0x2e
 8001622:	4621      	mov	r1, r4
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f7ff ff27 	bl	8001478 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff fe72 	bl	8001314 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001630:	f7ff ff34 	bl	800149c <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001634:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SSD1306_Init+0x158>)
 8001638:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 800163a:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 800163c:	7158      	strb	r0, [r3, #5]
}
 800163e:	bd10      	pop	{r4, pc}
		return 0;
 8001640:	2000      	movs	r0, #0
 8001642:	e7fc      	b.n	800163e <SSD1306_Init+0x14e>
 8001644:	2000037c 	.word	0x2000037c
 8001648:	20000468 	.word	0x20000468

0800164c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_MspInit+0x3c>)
{
 800164e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	f002 0201 	and.w	r2, r2, #1
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001668:	61da      	str	r2, [r3, #28]
 800166a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001676:	6853      	ldr	r3, [r2, #4]
 8001678:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	b002      	add	sp, #8
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b510      	push	{r4, lr}
 8001692:	4604      	mov	r4, r0
 8001694:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	2210      	movs	r2, #16
 8001698:	2100      	movs	r1, #0
 800169a:	a802      	add	r0, sp, #8
 800169c:	f004 fcaf 	bl	8005ffe <memset>
  if(hi2c->Instance==I2C1)
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_I2C_MspInit+0x58>)
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d11c      	bne.n	80016e2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4c10      	ldr	r4, [pc, #64]	; (80016ec <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016aa:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	61a3      	str	r3, [r4, #24]
 80016b6:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f000 f9d6 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d0:	69e3      	ldr	r3, [r4, #28]
 80016d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d6:	61e3      	str	r3, [r4, #28]
 80016d8:	69e3      	ldr	r3, [r4, #28]
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e2:	b006      	add	sp, #24
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010c00 	.word	0x40010c00

080016f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f4:	b510      	push	{r4, lr}
 80016f6:	4604      	mov	r4, r0
 80016f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	2210      	movs	r2, #16
 80016fc:	2100      	movs	r1, #0
 80016fe:	a802      	add	r0, sp, #8
 8001700:	f004 fc7d 	bl	8005ffe <memset>
  if(htim_base->Instance==TIM4)
 8001704:	6822      	ldr	r2, [r4, #0]
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_Base_MspInit+0x64>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d122      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800170c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001710:	69da      	ldr	r2, [r3, #28]
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001714:	f042 0204 	orr.w	r2, r2, #4
 8001718:	61da      	str	r2, [r3, #28]
 800171a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800171e:	f002 0204 	and.w	r2, r2, #4
 8001722:	9200      	str	r2, [sp, #0]
 8001724:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	f042 0208 	orr.w	r2, r2, #8
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f000 f99d 	bl	8001a7c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	201e      	movs	r0, #30
 8001746:	4611      	mov	r1, r2
 8001748:	f000 f946 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800174c:	201e      	movs	r0, #30
 800174e:	f000 f973 	bl	8001a38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001752:	b006      	add	sp, #24
 8001754:	bd10      	pop	{r4, pc}
 8001756:	bf00      	nop
 8001758:	40000800 	.word	0x40000800
 800175c:	40010c00 	.word	0x40010c00

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b510      	push	{r4, lr}
 8001762:	4604      	mov	r4, r0
 8001764:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	2210      	movs	r2, #16
 8001768:	2100      	movs	r1, #0
 800176a:	a802      	add	r0, sp, #8
 800176c:	f004 fc47 	bl	8005ffe <memset>
  if(huart->Instance==USART2)
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_UART_MspInit+0x6c>)
 8001774:	429a      	cmp	r2, r3
 8001776:	d126      	bne.n	80017c6 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001778:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800177c:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	4814      	ldr	r0, [pc, #80]	; (80017d0 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001780:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001784:	61da      	str	r2, [r3, #28]
 8001786:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800178a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800178e:	9200      	str	r2, [sp, #0]
 8001790:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	f042 0204 	orr.w	r2, r2, #4
 8001798:	619a      	str	r2, [r3, #24]
 800179a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f000 f964 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2108      	movs	r1, #8
 80017b6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f000 f95b 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c6:	b006      	add	sp, #24
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	bf00      	nop
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40010800 	.word	0x40010800

080017d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler>

080017d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler>

080017d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler>

080017da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler>

080017dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler>

080017de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 b8c2 	b.w	800196c <HAL_IncTick>

080017e8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017e8:	4801      	ldr	r0, [pc, #4]	; (80017f0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80017ea:	f000 bde7 	b.w	80023bc <HAL_PCD_IRQHandler>
 80017ee:	bf00      	nop
 80017f0:	20001540 	.word	0x20001540

080017f4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017f4:	4801      	ldr	r0, [pc, #4]	; (80017fc <TIM4_IRQHandler+0x8>)
 80017f6:	f001 bef3 	b.w	80035e0 <HAL_TIM_IRQHandler>
 80017fa:	bf00      	nop
 80017fc:	200003d0 	.word	0x200003d0

08001800 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001800:	2001      	movs	r0, #1
 8001802:	4770      	bx	lr

08001804 <_kill>:

int _kill(int pid, int sig)
{
 8001804:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001806:	f004 fc4d 	bl	80060a4 <__errno>
 800180a:	2316      	movs	r3, #22
 800180c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800180e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001812:	bd08      	pop	{r3, pc}

08001814 <_exit>:

void _exit (int status)
{
 8001814:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001816:	f004 fc45 	bl	80060a4 <__errno>
 800181a:	2316      	movs	r3, #22
 800181c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800181e:	e7fe      	b.n	800181e <_exit+0xa>

08001820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	460d      	mov	r5, r1
 8001824:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	460e      	mov	r6, r1
 8001828:	1b73      	subs	r3, r6, r5
 800182a:	429c      	cmp	r4, r3
 800182c:	dc01      	bgt.n	8001832 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800182e:	4620      	mov	r0, r4
 8001830:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001832:	f3af 8000 	nop.w
 8001836:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	e7f5      	b.n	8001828 <_read+0x8>

0800183c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	460d      	mov	r5, r1
 8001840:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	460e      	mov	r6, r1
 8001844:	1b73      	subs	r3, r6, r5
 8001846:	429c      	cmp	r4, r3
 8001848:	dc01      	bgt.n	800184e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800184a:	4620      	mov	r0, r4
 800184c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800184e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001852:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	e7f5      	b.n	8001844 <_write+0x8>

08001858 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800185e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001862:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001864:	604b      	str	r3, [r1, #4]
}
 8001866:	4770      	bx	lr

08001868 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001868:	2001      	movs	r0, #1
 800186a:	4770      	bx	lr

0800186c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800186c:	2000      	movs	r0, #0
 800186e:	4770      	bx	lr

08001870 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <_sbrk+0x30>)
{
 8001872:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001874:	6811      	ldr	r1, [r2, #0]
{
 8001876:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001878:	b909      	cbnz	r1, 800187e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800187a:	490a      	ldr	r1, [pc, #40]	; (80018a4 <_sbrk+0x34>)
 800187c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	6810      	ldr	r0, [r2, #0]
 8001880:	4909      	ldr	r1, [pc, #36]	; (80018a8 <_sbrk+0x38>)
 8001882:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <_sbrk+0x3c>)
 8001884:	4403      	add	r3, r0
 8001886:	1b09      	subs	r1, r1, r4
 8001888:	428b      	cmp	r3, r1
 800188a:	d906      	bls.n	800189a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800188c:	f004 fc0a 	bl	80060a4 <__errno>
 8001890:	230c      	movs	r3, #12
 8001892:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001898:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800189a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800189c:	e7fc      	b.n	8001898 <_sbrk+0x28>
 800189e:	bf00      	nop
 80018a0:	20000870 	.word	0x20000870
 80018a4:	20001ba0 	.word	0x20001ba0
 80018a8:	20005000 	.word	0x20005000
 80018ac:	00000400 	.word	0x00000400

080018b0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	4770      	bx	lr
	...

080018b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b4:	f7ff fffc 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018d0:	4c09      	ldr	r4, [pc, #36]	; (80018f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f004 fbe7 	bl	80060b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e2:	f7ff fc19 	bl	8001118 <main>
  bx lr
 80018e6:	4770      	bx	lr
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80018f0:	0800a68c 	.word	0x0800a68c
  ldr r2, =_sbss
 80018f4:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80018f8:	20001b9c 	.word	0x20001b9c

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_InitTick+0x3c>)
{
 8001904:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_InitTick+0x40>)
 8001912:	6810      	ldr	r0, [r2, #0]
 8001914:	fbb0 f0f3 	udiv	r0, r0, r3
 8001918:	f000 f89c 	bl	8001a54 <HAL_SYSTICK_Config>
 800191c:	4604      	mov	r4, r0
 800191e:	b958      	cbnz	r0, 8001938 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001920:	2d0f      	cmp	r5, #15
 8001922:	d809      	bhi.n	8001938 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	4602      	mov	r2, r0
 8001926:	4629      	mov	r1, r5
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192c:	f000 f854 	bl	80019d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4620      	mov	r0, r4
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_InitTick+0x44>)
 8001934:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001936:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
 800193a:	e7fc      	b.n	8001936 <HAL_InitTick+0x36>
 800193c:	20000014 	.word	0x20000014
 8001940:	20000010 	.word	0x20000010
 8001944:	20000018 	.word	0x20000018

08001948 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x20>)
{
 800194a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	f000 f82d 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	200f      	movs	r0, #15
 800195c:	f7ff ffd0 	bl	8001900 <HAL_InitTick>
  HAL_MspInit();
 8001960:	f7ff fe74 	bl	800164c <HAL_MspInit>
}
 8001964:	2000      	movs	r0, #0
 8001966:	bd08      	pop	{r3, pc}
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_IncTick+0x10>)
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_IncTick+0x14>)
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	440b      	add	r3, r1
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000874 	.word	0x20000874
 8001980:	20000014 	.word	0x20000014

08001984 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <HAL_GetTick+0x8>)
 8001986:	6818      	ldr	r0, [r3, #0]
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000874 	.word	0x20000874

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b538      	push	{r3, r4, r5, lr}
 8001992:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fff6 	bl	8001984 <HAL_GetTick>
 8001998:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800199c:	bf1e      	ittt	ne
 800199e:	4b04      	ldrne	r3, [pc, #16]	; (80019b0 <HAL_Delay+0x20>)
 80019a0:	781b      	ldrbne	r3, [r3, #0]
 80019a2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	1b43      	subs	r3, r0, r5
 80019aa:	42a3      	cmp	r3, r4
 80019ac:	d3fa      	bcc.n	80019a4 <HAL_Delay+0x14>
  {
  }
}
 80019ae:	bd38      	pop	{r3, r4, r5, pc}
 80019b0:	20000014 	.word	0x20000014

080019b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80019d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b530      	push	{r4, r5, lr}
 80019dc:	68dc      	ldr	r4, [r3, #12]
 80019de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	bf28      	it	cs
 80019ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f4:	bf94      	ite	ls
 80019f6:	2400      	movls	r4, #0
 80019f8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fa:	fa05 f303 	lsl.w	r3, r5, r3
 80019fe:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a02:	40a5      	lsls	r5, r4
 8001a04:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	bfac      	ite	ge
 8001a12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	4a07      	ldrlt	r2, [pc, #28]	; (8001a34 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	bfab      	itete	ge
 8001a20:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a2e:	bd30      	pop	{r4, r5, pc}
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	e000ed14 	.word	0xe000ed14

08001a38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	db07      	blt.n	8001a4c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	0941      	lsrs	r1, r0, #5
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_NVIC_EnableIRQ+0x18>)
 8001a42:	f000 001f 	and.w	r0, r0, #31
 8001a46:	4083      	lsls	r3, r0
 8001a48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	3801      	subs	r0, #1
 8001a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a5a:	d20b      	bcs.n	8001a74 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	21f0      	movs	r1, #240	; 0xf0
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a70:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a72:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a74:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a80:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001a82:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a84:	4f64      	ldr	r7, [pc, #400]	; (8001c18 <HAL_GPIO_Init+0x19c>)
 8001a86:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8001a88:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001c20 <HAL_GPIO_Init+0x1a4>
 8001a8c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001c24 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	680d      	ldr	r5, [r1, #0]
 8001a92:	fa35 f406 	lsrs.w	r4, r5, r6
 8001a96:	d102      	bne.n	8001a9e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001a9e:	f04f 0801 	mov.w	r8, #1
 8001aa2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001aaa:	ea38 0505 	bics.w	r5, r8, r5
 8001aae:	d17a      	bne.n	8001ba6 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8001ab0:	684d      	ldr	r5, [r1, #4]
 8001ab2:	2d03      	cmp	r5, #3
 8001ab4:	d807      	bhi.n	8001ac6 <HAL_GPIO_Init+0x4a>
 8001ab6:	3d01      	subs	r5, #1
 8001ab8:	2d02      	cmp	r5, #2
 8001aba:	f200 8087 	bhi.w	8001bcc <HAL_GPIO_Init+0x150>
 8001abe:	e8df f005 	tbb	[pc, r5]
 8001ac2:	9a95      	.short	0x9a95
 8001ac4:	a0          	.byte	0xa0
 8001ac5:	00          	.byte	0x00
 8001ac6:	2d12      	cmp	r5, #18
 8001ac8:	f000 8098 	beq.w	8001bfc <HAL_GPIO_Init+0x180>
 8001acc:	d86d      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ace:	2d11      	cmp	r5, #17
 8001ad0:	f000 808e 	beq.w	8001bf0 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad4:	2cff      	cmp	r4, #255	; 0xff
 8001ad6:	bf98      	it	ls
 8001ad8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ada:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ade:	bf88      	it	hi
 8001ae0:	f100 0a04 	addhi.w	sl, r0, #4
 8001ae4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aec:	bf88      	it	hi
 8001aee:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af0:	fa09 fb05 	lsl.w	fp, r9, r5
 8001af4:	ea28 080b 	bic.w	r8, r8, fp
 8001af8:	fa02 f505 	lsl.w	r5, r2, r5
 8001afc:	ea48 0505 	orr.w	r5, r8, r5
 8001b00:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001b08:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001b0c:	d04b      	beq.n	8001ba6 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0e:	69bd      	ldr	r5, [r7, #24]
 8001b10:	f026 0803 	bic.w	r8, r6, #3
 8001b14:	f045 0501 	orr.w	r5, r5, #1
 8001b18:	61bd      	str	r5, [r7, #24]
 8001b1a:	69bd      	ldr	r5, [r7, #24]
 8001b1c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001b20:	f005 0501 	and.w	r5, r5, #1
 8001b24:	9501      	str	r5, [sp, #4]
 8001b26:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001b34:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b38:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b3c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b40:	4d39      	ldr	r5, [pc, #228]	; (8001c28 <HAL_GPIO_Init+0x1ac>)
 8001b42:	42a8      	cmp	r0, r5
 8001b44:	d061      	beq.n	8001c0a <HAL_GPIO_Init+0x18e>
 8001b46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4a:	42a8      	cmp	r0, r5
 8001b4c:	d05f      	beq.n	8001c0e <HAL_GPIO_Init+0x192>
 8001b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b52:	42a8      	cmp	r0, r5
 8001b54:	d05d      	beq.n	8001c12 <HAL_GPIO_Init+0x196>
 8001b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5a:	42a8      	cmp	r0, r5
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2503      	moveq	r5, #3
 8001b60:	2504      	movne	r5, #4
 8001b62:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b66:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b74:	bf14      	ite	ne
 8001b76:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b78:	43a5      	biceq	r5, r4
 8001b7a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b82:	bf14      	ite	ne
 8001b84:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b86:	43a5      	biceq	r5, r4
 8001b88:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b8a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b90:	bf14      	ite	ne
 8001b92:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b94:	43a5      	biceq	r5, r4
 8001b96:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b9e:	bf14      	ite	ne
 8001ba0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba2:	43a5      	biceq	r5, r4
 8001ba4:	601d      	str	r5, [r3, #0]
	position++;
 8001ba6:	3601      	adds	r6, #1
 8001ba8:	e772      	b.n	8001a90 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001baa:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001c2c <HAL_GPIO_Init+0x1b0>
 8001bae:	454d      	cmp	r5, r9
 8001bb0:	d00c      	beq.n	8001bcc <HAL_GPIO_Init+0x150>
 8001bb2:	d817      	bhi.n	8001be4 <HAL_GPIO_Init+0x168>
 8001bb4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001bb8:	454d      	cmp	r5, r9
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x150>
 8001bbc:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001bc0:	454d      	cmp	r5, r9
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x150>
 8001bc4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001bc8:	454d      	cmp	r5, r9
 8001bca:	d183      	bne.n	8001ad4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bcc:	688a      	ldr	r2, [r1, #8]
 8001bce:	b1d2      	cbz	r2, 8001c06 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd0:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001bd2:	bf08      	it	eq
 8001bd4:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd8:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001bdc:	bf18      	it	ne
 8001bde:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001be2:	e777      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001be4:	4565      	cmp	r5, ip
 8001be6:	d0f1      	beq.n	8001bcc <HAL_GPIO_Init+0x150>
 8001be8:	4575      	cmp	r5, lr
 8001bea:	e7ee      	b.n	8001bca <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bec:	68ca      	ldr	r2, [r1, #12]
          break;
 8001bee:	e771      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf0:	68ca      	ldr	r2, [r1, #12]
 8001bf2:	3204      	adds	r2, #4
          break;
 8001bf4:	e76e      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bf6:	68ca      	ldr	r2, [r1, #12]
 8001bf8:	3208      	adds	r2, #8
          break;
 8001bfa:	e76b      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bfc:	68ca      	ldr	r2, [r1, #12]
 8001bfe:	320c      	adds	r2, #12
          break;
 8001c00:	e768      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001c02:	2200      	movs	r2, #0
 8001c04:	e766      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c06:	2204      	movs	r2, #4
 8001c08:	e764      	b.n	8001ad4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e7a9      	b.n	8001b62 <HAL_GPIO_Init+0xe6>
 8001c0e:	2501      	movs	r5, #1
 8001c10:	e7a7      	b.n	8001b62 <HAL_GPIO_Init+0xe6>
 8001c12:	2502      	movs	r5, #2
 8001c14:	e7a5      	b.n	8001b62 <HAL_GPIO_Init+0xe6>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010400 	.word	0x40010400
 8001c20:	10310000 	.word	0x10310000
 8001c24:	10320000 	.word	0x10320000
 8001c28:	40010800 	.word	0x40010800
 8001c2c:	10220000 	.word	0x10220000

08001c30 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c30:	6801      	ldr	r1, [r0, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	694b      	ldr	r3, [r1, #20]
 8001c36:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001c3a:	d010      	beq.n	8001c5e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001c40:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c42:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c44:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c4e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	4770      	bx	lr
  }
  return HAL_OK;
 8001c5e:	4618      	mov	r0, r3
}
 8001c60:	4770      	bx	lr

08001c62 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c62:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001c66:	4606      	mov	r6, r0
 8001c68:	460f      	mov	r7, r1
 8001c6a:	4691      	mov	r9, r2
 8001c6c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001c72:	6833      	ldr	r3, [r6, #0]
 8001c74:	f1ba 0f01 	cmp.w	sl, #1
 8001c78:	bf0c      	ite	eq
 8001c7a:	695c      	ldreq	r4, [r3, #20]
 8001c7c:	699c      	ldrne	r4, [r3, #24]
 8001c7e:	ea27 0404 	bic.w	r4, r7, r4
 8001c82:	b2a4      	uxth	r4, r4
 8001c84:	fab4 f484 	clz	r4, r4
 8001c88:	0964      	lsrs	r4, r4, #5
 8001c8a:	45a1      	cmp	r9, r4
 8001c8c:	d001      	beq.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e025      	b.n	8001cde <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001c92:	1c6a      	adds	r2, r5, #1
 8001c94:	d0ee      	beq.n	8001c74 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c96:	f7ff fe75 	bl	8001984 <HAL_GetTick>
 8001c9a:	9b08      	ldr	r3, [sp, #32]
 8001c9c:	1ac0      	subs	r0, r0, r3
 8001c9e:	42a8      	cmp	r0, r5
 8001ca0:	d801      	bhi.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	d1e5      	bne.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ca6:	6833      	ldr	r3, [r6, #0]
 8001ca8:	f1ba 0f01 	cmp.w	sl, #1
 8001cac:	bf0c      	ite	eq
 8001cae:	695b      	ldreq	r3, [r3, #20]
 8001cb0:	699b      	ldrne	r3, [r3, #24]
 8001cb2:	ea27 0303 	bic.w	r3, r7, r3
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	4599      	cmp	r9, r3
 8001cc0:	d1d7      	bne.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cc2:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cc4:	2220      	movs	r2, #32
          return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cc8:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cca:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cce:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8001cd4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	f042 0220 	orr.w	r2, r2, #32
 8001cdc:	6432      	str	r2, [r6, #64]	; 0x40
}
 8001cde:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460f      	mov	r7, r1
 8001cea:	4616      	mov	r6, r2
 8001cec:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cee:	6825      	ldr	r5, [r4, #0]
 8001cf0:	6968      	ldr	r0, [r5, #20]
 8001cf2:	ea27 0000 	bic.w	r0, r7, r0
 8001cf6:	b280      	uxth	r0, r0
 8001cf8:	b1b8      	cbz	r0, 8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cfa:	696b      	ldr	r3, [r5, #20]
 8001cfc:	055a      	lsls	r2, r3, #21
 8001cfe:	d516      	bpl.n	8001d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d02:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d08:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d0a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001d0e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d1e:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8001d22:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8001d26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001d2e:	1c73      	adds	r3, r6, #1
 8001d30:	d0de      	beq.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d32:	f7ff fe27 	bl	8001984 <HAL_GetTick>
 8001d36:	eba0 0008 	sub.w	r0, r0, r8
 8001d3a:	42b0      	cmp	r0, r6
 8001d3c:	d801      	bhi.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	d1d5      	bne.n	8001cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	ea27 0202 	bic.w	r2, r7, r2
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	2a00      	cmp	r2, #0
 8001d4e:	d0ce      	beq.n	8001cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d50:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d52:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d56:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	e7dd      	b.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001d66 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001d66:	b570      	push	{r4, r5, r6, lr}
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	061b      	lsls	r3, r3, #24
 8001d74:	d501      	bpl.n	8001d7a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d76:	2000      	movs	r0, #0
}
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff ff58 	bl	8001c30 <I2C_IsAcknowledgeFailed>
 8001d80:	b9c8      	cbnz	r0, 8001db6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	1c6a      	adds	r2, r5, #1
 8001d84:	d0f3      	beq.n	8001d6e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d86:	f7ff fdfd 	bl	8001984 <HAL_GetTick>
 8001d8a:	1b80      	subs	r0, r0, r6
 8001d8c:	42a8      	cmp	r0, r5
 8001d8e:	d801      	bhi.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d1ec      	bne.n	8001d6e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8001d9c:	d1e7      	bne.n	8001d6e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d9e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001da0:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001da2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001daa:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8001dac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	e7de      	b.n	8001d78 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08001dba <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001dba:	b570      	push	{r4, r5, r6, lr}
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	075b      	lsls	r3, r3, #29
 8001dc8:	d501      	bpl.n	8001dce <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001dca:	2000      	movs	r0, #0
}
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff ff2e 	bl	8001c30 <I2C_IsAcknowledgeFailed>
 8001dd4:	b9c8      	cbnz	r0, 8001e0a <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001dd6:	1c6a      	adds	r2, r5, #1
 8001dd8:	d0f3      	beq.n	8001dc2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dda:	f7ff fdd3 	bl	8001984 <HAL_GetTick>
 8001dde:	1b80      	subs	r0, r0, r6
 8001de0:	42a8      	cmp	r0, r5
 8001de2:	d801      	bhi.n	8001de8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001de4:	2d00      	cmp	r5, #0
 8001de6:	d1ec      	bne.n	8001dc2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	f013 0304 	ands.w	r3, r3, #4
 8001df0:	d1e7      	bne.n	8001dc2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001df2:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001df4:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001df6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8001e00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e7de      	b.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x12>
	...

08001e10 <HAL_I2C_Init>:
{
 8001e10:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001e12:	4604      	mov	r4, r0
 8001e14:	b908      	cbnz	r0, 8001e1a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
}
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e22:	b91b      	cbnz	r3, 8001e2c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001e24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001e28:	f7ff fc32 	bl	8001690 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2c:	2324      	movs	r3, #36	; 0x24
 8001e2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e4c:	f001 fb00 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_I2C_Init+0x140>)
 8001e52:	6865      	ldr	r5, [r4, #4]
 8001e54:	429d      	cmp	r5, r3
 8001e56:	bf94      	ite	ls
 8001e58:	4b3e      	ldrls	r3, [pc, #248]	; (8001f54 <HAL_I2C_Init+0x144>)
 8001e5a:	4b3f      	ldrhi	r3, [pc, #252]	; (8001f58 <HAL_I2C_Init+0x148>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	bf8c      	ite	hi
 8001e60:	2300      	movhi	r3, #0
 8001e62:	2301      	movls	r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1d6      	bne.n	8001e16 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e68:	4e39      	ldr	r6, [pc, #228]	; (8001f50 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6c:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e72:	bf88      	it	hi
 8001e74:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	6851      	ldr	r1, [r2, #4]
 8001e7c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001e80:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e84:	bf82      	ittt	hi
 8001e86:	4373      	mulhi	r3, r6
 8001e88:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8001e8c:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e90:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e92:	6a11      	ldr	r1, [r2, #32]
 8001e94:	3301      	adds	r3, #1
 8001e96:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e9e:	69d1      	ldr	r1, [r2, #28]
 8001ea0:	1e43      	subs	r3, r0, #1
 8001ea2:	482b      	ldr	r0, [pc, #172]	; (8001f50 <HAL_I2C_Init+0x140>)
 8001ea4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001ea8:	4285      	cmp	r5, r0
 8001eaa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001eae:	d832      	bhi.n	8001f16 <HAL_I2C_Init+0x106>
 8001eb0:	006d      	lsls	r5, r5, #1
 8001eb2:	fbb3 f3f5 	udiv	r3, r3, r5
 8001eb6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4203      	tst	r3, r0
 8001ebe:	d042      	beq.n	8001f46 <HAL_I2C_Init+0x136>
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001ece:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001ed2:	4303      	orrs	r3, r0
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed8:	6891      	ldr	r1, [r2, #8]
 8001eda:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001ede:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001ee2:	4303      	orrs	r3, r0
 8001ee4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eec:	68d1      	ldr	r1, [r2, #12]
 8001eee:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001ef2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001ef6:	4303      	orrs	r3, r0
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001efc:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efe:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f08:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001f14:	e780      	b.n	8001e18 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f16:	68a0      	ldr	r0, [r4, #8]
 8001f18:	b950      	cbnz	r0, 8001f30 <HAL_I2C_Init+0x120>
 8001f1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f1e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	b17b      	cbz	r3, 8001f4a <HAL_I2C_Init+0x13a>
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e7c9      	b.n	8001ec4 <HAL_I2C_Init+0xb4>
 8001f30:	2019      	movs	r0, #25
 8001f32:	4368      	muls	r0, r5
 8001f34:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	b123      	cbz	r3, 8001f4a <HAL_I2C_Init+0x13a>
 8001f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f44:	e7be      	b.n	8001ec4 <HAL_I2C_Init+0xb4>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e7bc      	b.n	8001ec4 <HAL_I2C_Init+0xb4>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e7ba      	b.n	8001ec4 <HAL_I2C_Init+0xb4>
 8001f4e:	bf00      	nop
 8001f50:	000186a0 	.word	0x000186a0
 8001f54:	001e847f 	.word	0x001e847f
 8001f58:	003d08ff 	.word	0x003d08ff
 8001f5c:	000f4240 	.word	0x000f4240

08001f60 <HAL_I2C_Master_Transmit>:
{
 8001f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f64:	4604      	mov	r4, r0
 8001f66:	b085      	sub	sp, #20
 8001f68:	4698      	mov	r8, r3
 8001f6a:	460d      	mov	r5, r1
 8001f6c:	4691      	mov	r9, r2
 8001f6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fd08 	bl	8001984 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001f78:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d004      	beq.n	8001f88 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8001f7e:	2502      	movs	r5, #2
}
 8001f80:	4628      	mov	r0, r5
 8001f82:	b005      	add	sp, #20
 8001f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f88:	9000      	str	r0, [sp, #0]
 8001f8a:	2319      	movs	r3, #25
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	495b      	ldr	r1, [pc, #364]	; (8002100 <HAL_I2C_Master_Transmit+0x1a0>)
 8001f92:	f7ff fe66 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d1f1      	bne.n	8001f7e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001f9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d0ed      	beq.n	8001f7e <HAL_I2C_Master_Transmit+0x1e>
 8001fa2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa4:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001fa6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001faa:	680b      	ldr	r3, [r1, #0]
 8001fac:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001fae:	bf5e      	ittt	pl
 8001fb0:	680b      	ldrpl	r3, [r1, #0]
 8001fb2:	f043 0301 	orrpl.w	r3, r3, #1
 8001fb6:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fb8:	680b      	ldr	r3, [r1, #0]
 8001fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fbe:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fc0:	2321      	movs	r3, #33	; 0x21
 8001fc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001fd0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001fd6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001fda:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fdc:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_I2C_Master_Transmit+0x1a4>)
 8001fde:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d004      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0x90>
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d002      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0x90>
 8001fea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fee:	d104      	bne.n	8001ffa <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	680b      	ldr	r3, [r1, #0]
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e002      	b.n	8002000 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ffc:	2b12      	cmp	r3, #18
 8001ffe:	d0f7      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	2200      	movs	r2, #0
 8002002:	463b      	mov	r3, r7
 8002004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002008:	4620      	mov	r0, r4
 800200a:	9600      	str	r6, [sp, #0]
 800200c:	f7ff fe29 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	b138      	cbz	r0, 8002024 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002018:	bf44      	itt	mi
 800201a:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800201e:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002020:	2501      	movs	r5, #1
 8002022:	e7ad      	b.n	8001f80 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002024:	6923      	ldr	r3, [r4, #16]
 8002026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800202a:	d121      	bne.n	8002070 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800202c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002030:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002032:	4633      	mov	r3, r6
 8002034:	463a      	mov	r2, r7
 8002036:	4620      	mov	r0, r4
 8002038:	4933      	ldr	r1, [pc, #204]	; (8002108 <HAL_I2C_Master_Transmit+0x1a8>)
 800203a:	f7ff fe52 	bl	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800203e:	4605      	mov	r5, r0
 8002040:	2800      	cmp	r0, #0
 8002042:	d1ed      	bne.n	8002020 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	9003      	str	r0, [sp, #12]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	9203      	str	r2, [sp, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	9303      	str	r3, [sp, #12]
 8002050:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002052:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002054:	b9f3      	cbnz	r3, 8002094 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002056:	6821      	ldr	r1, [r4, #0]
 8002058:	680a      	ldr	r2, [r1, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002062:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002066:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800206e:	e787      	b.n	8001f80 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002070:	11eb      	asrs	r3, r5, #7
 8002072:	f003 0306 	and.w	r3, r3, #6
 8002076:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800207a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800207c:	4620      	mov	r0, r4
 800207e:	4633      	mov	r3, r6
 8002080:	463a      	mov	r2, r7
 8002082:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_I2C_Master_Transmit+0x1ac>)
 8002084:	f7ff fe2d 	bl	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002088:	2800      	cmp	r0, #0
 800208a:	d1c9      	bne.n	8002020 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	b2ed      	uxtb	r5, r5
 8002090:	611d      	str	r5, [r3, #16]
 8002092:	e7ce      	b.n	8002032 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002094:	4632      	mov	r2, r6
 8002096:	4639      	mov	r1, r7
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff fe64 	bl	8001d66 <I2C_WaitOnTXEFlagUntilTimeout>
 800209e:	b140      	cbz	r0, 80020b2 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d1bc      	bne.n	8002020 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	6822      	ldr	r2, [r4, #0]
 80020a8:	6813      	ldr	r3, [r2, #0]
 80020aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e7b6      	b.n	8002020 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80020bc:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80020be:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80020c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020c2:	3a01      	subs	r2, #1
 80020c4:	b292      	uxth	r2, r2
 80020c6:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80020c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ca:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80020ce:	1e51      	subs	r1, r2, #1
 80020d0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020d2:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80020d6:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020d8:	d00a      	beq.n	80020f0 <HAL_I2C_Master_Transmit+0x190>
 80020da:	b149      	cbz	r1, 80020f0 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020dc:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80020de:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e0:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80020e2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80020e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80020e6:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80020ee:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	4632      	mov	r2, r6
 80020f2:	4639      	mov	r1, r7
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7ff fe60 	bl	8001dba <I2C_WaitOnBTFFlagUntilTimeout>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d0a9      	beq.n	8002052 <HAL_I2C_Master_Transmit+0xf2>
 80020fe:	e7cf      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x140>
 8002100:	00100002 	.word	0x00100002
 8002104:	ffff0000 	.word	0xffff0000
 8002108:	00010002 	.word	0x00010002
 800210c:	00010008 	.word	0x00010008

08002110 <HAL_I2C_IsDeviceReady>:
{
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	4604      	mov	r4, r0
 8002116:	b085      	sub	sp, #20
 8002118:	461f      	mov	r7, r3
 800211a:	4688      	mov	r8, r1
 800211c:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800211e:	f7ff fc31 	bl	8001984 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002126:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002128:	2b20      	cmp	r3, #32
 800212a:	d003      	beq.n	8002134 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800212c:	2002      	movs	r0, #2
}
 800212e:	b005      	add	sp, #20
 8002130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002134:	9000      	str	r0, [sp, #0]
 8002136:	2319      	movs	r3, #25
 8002138:	2201      	movs	r2, #1
 800213a:	4620      	mov	r0, r4
 800213c:	494a      	ldr	r1, [pc, #296]	; (8002268 <HAL_I2C_IsDeviceReady+0x158>)
 800213e:	f7ff fd90 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8002142:	2800      	cmp	r0, #0
 8002144:	d1f2      	bne.n	800212c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8002146:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d0ee      	beq.n	800212c <HAL_I2C_IsDeviceReady+0x1c>
 800214e:	2301      	movs	r3, #1
 8002150:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002154:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002156:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002158:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800215a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002268 <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800215e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002160:	bf58      	it	pl
 8002162:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002164:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8002168:	bf5c      	itt	pl
 800216a:	f042 0201 	orrpl.w	r2, r2, #1
 800216e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002176:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002178:	2324      	movs	r3, #36	; 0x24
 800217a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002182:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002184:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800218a:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800218c:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	9500      	str	r5, [sp, #0]
 800219a:	f7ff fd62 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	b138      	cbz	r0, 80021b2 <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	05db      	lsls	r3, r3, #23
 80021a6:	d502      	bpl.n	80021ae <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ac:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80021ae:	2003      	movs	r0, #3
 80021b0:	e7bd      	b.n	800212e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b2:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 80021b6:	f7ff fbe5 	bl	8001984 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021ba:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 80021be:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021c4:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c6:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021ca:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80021d2:	29a0      	cmp	r1, #160	; 0xa0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_IsDeviceReady+0xca>
 80021d6:	4313      	orrs	r3, r2
 80021d8:	d01d      	beq.n	8002216 <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 80021da:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021de:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021f2:	d025      	beq.n	8002240 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f4:	2200      	movs	r2, #0
 80021f6:	9203      	str	r2, [sp, #12]
 80021f8:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021fa:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fc:	9203      	str	r2, [sp, #12]
 80021fe:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002200:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	9303      	str	r3, [sp, #12]
 8002204:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002206:	4918      	ldr	r1, [pc, #96]	; (8002268 <HAL_I2C_IsDeviceReady+0x158>)
 8002208:	2319      	movs	r3, #25
 800220a:	9500      	str	r5, [sp, #0]
 800220c:	f7ff fd29 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8002210:	b188      	cbz	r0, 8002236 <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 8002212:	2001      	movs	r0, #1
 8002214:	e78b      	b.n	800212e <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002216:	f7ff fbb5 	bl	8001984 <HAL_GetTick>
 800221a:	1b40      	subs	r0, r0, r5
 800221c:	42b8      	cmp	r0, r7
 800221e:	d800      	bhi.n	8002222 <HAL_I2C_IsDeviceReady+0x112>
 8002220:	b90f      	cbnz	r7, 8002226 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002222:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800222a:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800222c:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8002234:	e7cb      	b.n	80021ce <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 8002236:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800223a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800223e:	e776      	b.n	800212e <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002240:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002244:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002246:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002248:	4620      	mov	r0, r4
 800224a:	2319      	movs	r3, #25
 800224c:	2201      	movs	r2, #1
 800224e:	9500      	str	r5, [sp, #0]
 8002250:	f7ff fd07 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8002254:	2800      	cmp	r0, #0
 8002256:	d1dc      	bne.n	8002212 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 8002258:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 800225a:	4556      	cmp	r6, sl
 800225c:	d392      	bcc.n	8002184 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 800225e:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002262:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8002266:	e7d4      	b.n	8002212 <HAL_I2C_IsDeviceReady+0x102>
 8002268:	00100002 	.word	0x00100002
 800226c:	ffff0000 	.word	0xffff0000

08002270 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002272:	4604      	mov	r4, r0
{
 8002274:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8002276:	b310      	cbz	r0, 80022be <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002278:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800227c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002280:	b91b      	cbnz	r3, 800228a <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002282:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002286:	f003 f83d 	bl	8005304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800228a:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800228c:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228e:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002290:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002294:	f855 0b10 	ldr.w	r0, [r5], #16
 8002298:	f001 fd5d 	bl	8003d56 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	1d27      	adds	r7, r4, #4
 80022a4:	6033      	str	r3, [r6, #0]
 80022a6:	4626      	mov	r6, r4
 80022a8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80022ac:	f856 0b10 	ldr.w	r0, [r6], #16
 80022b0:	f001 fd41 	bl	8003d36 <USB_CoreInit>
 80022b4:	4605      	mov	r5, r0
 80022b6:	b120      	cbz	r0, 80022c2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80022be:	2501      	movs	r5, #1
 80022c0:	e04b      	b.n	800235a <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c2:	4601      	mov	r1, r0
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	f001 fd50 	bl	8003d6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022cc:	f04f 0e01 	mov.w	lr, #1
 80022d0:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d2:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022d8:	b2c8      	uxtb	r0, r1
 80022da:	4584      	cmp	ip, r0
 80022dc:	f101 0101 	add.w	r1, r1, #1
 80022e0:	d81b      	bhi.n	800231a <HAL_PCD_Init+0xaa>
 80022e2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022e4:	2528      	movs	r5, #40	; 0x28
 80022e6:	4619      	mov	r1, r3
 80022e8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ea:	4584      	cmp	ip, r0
 80022ec:	f103 0301 	add.w	r3, r3, #1
 80022f0:	d81f      	bhi.n	8002332 <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f2:	46ec      	mov	ip, sp
 80022f4:	4635      	mov	r5, r6
 80022f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	f8cc 3000 	str.w	r3, [ip]
 8002302:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	f001 fd31 	bl	8003d6e <USB_DevInit>
 800230c:	2301      	movs	r3, #1
 800230e:	4605      	mov	r5, r0
 8002310:	b1e0      	cbz	r0, 800234c <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002312:	2202      	movs	r2, #2
 8002314:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002318:	e7d1      	b.n	80022be <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800231a:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231e:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8002322:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8002326:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800232a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	e7d2      	b.n	80022d8 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8002332:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002336:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800233a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800233e:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002342:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002346:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234a:	e7cd      	b.n	80022e8 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 800234c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8002350:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002352:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002356:	f001 ffc3 	bl	80042e0 <USB_DevDisconnect>

  return HAL_OK;
}
 800235a:	4628      	mov	r0, r5
 800235c:	b007      	add	sp, #28
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002360 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002360:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002362:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8002366:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002368:	2b01      	cmp	r3, #1
 800236a:	d010      	beq.n	800238e <HAL_PCD_Start+0x2e>
 800236c:	2501      	movs	r5, #1
 800236e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002372:	6800      	ldr	r0, [r0, #0]
 8002374:	f001 fce6 	bl	8003d44 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002378:	4629      	mov	r1, r5
 800237a:	4620      	mov	r0, r4
 800237c:	f003 f8cd 	bl	800551a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002380:	6820      	ldr	r0, [r4, #0]
 8002382:	f001 ffab 	bl	80042dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002386:	2000      	movs	r0, #0
 8002388:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800238c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800238e:	2002      	movs	r0, #2
 8002390:	e7fc      	b.n	800238c <HAL_PCD_Start+0x2c>

08002392 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002392:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002394:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8002398:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800239a:	2a01      	cmp	r2, #1
 800239c:	d00b      	beq.n	80023b6 <HAL_PCD_SetAddress+0x24>
 800239e:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80023a0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80023a4:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023a8:	6800      	ldr	r0, [r0, #0]
 80023aa:	f001 ff91 	bl	80042d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80023b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80023b6:	2002      	movs	r0, #2
 80023b8:	e7fc      	b.n	80023b4 <HAL_PCD_SetAddress+0x22>
	...

080023bc <HAL_PCD_IRQHandler>:
{
 80023bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c0:	4604      	mov	r4, r0
 80023c2:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023c4:	6800      	ldr	r0, [r0, #0]
 80023c6:	f001 ff8d 	bl	80042e4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023ca:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 80023ce:	f000 8424 	beq.w	8002c1a <HAL_PCD_IRQHandler+0x85e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023d2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80026f0 <HAL_PCD_IRQHandler+0x334>
 80023d6:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80026f4 <HAL_PCD_IRQHandler+0x338>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023da:	6820      	ldr	r0, [r4, #0]
 80023dc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80023e0:	041f      	lsls	r7, r3, #16
 80023e2:	d402      	bmi.n	80023ea <HAL_PCD_IRQHandler+0x2e>
}
 80023e4:	b005      	add	sp, #20
 80023e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80023ea:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80023ee:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80023f0:	f016 060f 	ands.w	r6, r6, #15
 80023f4:	f040 80c6 	bne.w	8002584 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023f8:	f011 0110 	ands.w	r1, r1, #16
 80023fc:	d12b      	bne.n	8002456 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023fe:	8803      	ldrh	r3, [r0, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	ea03 0309 	and.w	r3, r3, r9
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800240c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002410:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002414:	b29b      	uxth	r3, r3
 8002416:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800241a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800241e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002422:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002424:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002428:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800242a:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800242c:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 800242e:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002430:	f002 ff97 	bl	8005362 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002434:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ce      	beq.n	80023da <HAL_PCD_IRQHandler+0x1e>
 800243c:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800243e:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002440:	2a00      	cmp	r2, #0
 8002442:	d1ca      	bne.n	80023da <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002444:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002450:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002454:	e7c1      	b.n	80023da <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002456:	8805      	ldrh	r5, [r0, #0]
 8002458:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800245a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800245e:	d021      	beq.n	80024a4 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002460:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002464:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002468:	b29b      	uxth	r3, r3
 800246a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800246e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002472:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002476:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800247a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800247e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002482:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002486:	f002 f95b 	bl	8004740 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800248a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800248c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800248e:	8813      	ldrh	r3, [r2, #0]
 8002490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002494:	051b      	lsls	r3, r3, #20
 8002496:	0d1b      	lsrs	r3, r3, #20
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800249e:	f002 ff51 	bl	8005344 <HAL_PCD_SetupStageCallback>
 80024a2:	e79a      	b.n	80023da <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024a4:	0419      	lsls	r1, r3, #16
 80024a6:	d598      	bpl.n	80023da <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024a8:	8803      	ldrh	r3, [r0, #0]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	051b      	lsls	r3, r3, #20
 80024b0:	0d1b      	lsrs	r3, r3, #20
 80024b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80024bc:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80024c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80024ca:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80024ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024d6:	b18b      	cbz	r3, 80024fc <HAL_PCD_IRQHandler+0x140>
 80024d8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80024dc:	b171      	cbz	r1, 80024fc <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024de:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80024e2:	f002 f92d 	bl	8004740 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80024e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80024ea:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024ee:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80024f0:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024f2:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80024f4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024f8:	f002 ff2a 	bl	8005350 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024fc:	6821      	ldr	r1, [r4, #0]
 80024fe:	880a      	ldrh	r2, [r1, #0]
 8002500:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002502:	0512      	lsls	r2, r2, #20
 8002504:	f53f af69 	bmi.w	80023da <HAL_PCD_IRQHandler+0x1e>
 8002508:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800250c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002510:	f43f af63 	beq.w	80023da <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002514:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002518:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800251c:	b29b      	uxth	r3, r3
 800251e:	5ac2      	ldrh	r2, [r0, r3]
 8002520:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002524:	52c2      	strh	r2, [r0, r3]
 8002526:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 800252a:	2a3e      	cmp	r2, #62	; 0x3e
 800252c:	d90c      	bls.n	8002548 <HAL_PCD_IRQHandler+0x18c>
 800252e:	0955      	lsrs	r5, r2, #5
 8002530:	06d7      	lsls	r7, r2, #27
 8002532:	5ac2      	ldrh	r2, [r0, r3]
 8002534:	bf08      	it	eq
 8002536:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 800253a:	b292      	uxth	r2, r2
 800253c:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002540:	ea42 0208 	orr.w	r2, r2, r8
 8002544:	b292      	uxth	r2, r2
 8002546:	e004      	b.n	8002552 <HAL_PCD_IRQHandler+0x196>
 8002548:	b99a      	cbnz	r2, 8002572 <HAL_PCD_IRQHandler+0x1b6>
 800254a:	5ac2      	ldrh	r2, [r0, r3]
 800254c:	b292      	uxth	r2, r2
 800254e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002552:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002554:	880b      	ldrh	r3, [r1, #0]
 8002556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	800b      	strh	r3, [r1, #0]
 8002570:	e733      	b.n	80023da <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002572:	0855      	lsrs	r5, r2, #1
 8002574:	07d6      	lsls	r6, r2, #31
 8002576:	5ac2      	ldrh	r2, [r0, r3]
 8002578:	bf48      	it	mi
 800257a:	3501      	addmi	r5, #1
 800257c:	b292      	uxth	r2, r2
 800257e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002582:	e7df      	b.n	8002544 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002584:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002588:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800258a:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800258c:	f140 80f1 	bpl.w	8002772 <HAL_PCD_IRQHandler+0x3b6>
        if (ep->doublebuffer == 0U)
 8002590:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002592:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002596:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	0d1b      	lsrs	r3, r3, #20
 80025a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a6:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80025aa:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80025ae:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80025b2:	b9b3      	cbnz	r3, 80025e2 <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80025b8:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3306      	adds	r3, #6
 80025c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025c4:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80025c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80025cc:	2d00      	cmp	r5, #0
 80025ce:	f000 80b4 	beq.w	800273a <HAL_PCD_IRQHandler+0x37e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025d2:	462b      	mov	r3, r5
 80025d4:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025d8:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80025dc:	f002 f8b0 	bl	8004740 <USB_ReadPMA>
 80025e0:	e0ab      	b.n	800273a <HAL_PCD_IRQHandler+0x37e>
          if (ep->type == EP_TYPE_BULK)
 80025e2:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e6:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 80025ea:	2a02      	cmp	r2, #2
 80025ec:	f040 8084 	bne.w	80026f8 <HAL_PCD_IRQHandler+0x33c>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025f0:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025f4:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025f8:	b2ad      	uxth	r5, r5
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025fa:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 80025fe:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002602:	445d      	add	r5, fp
 8002604:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002608:	d039      	beq.n	800267e <HAL_PCD_IRQHandler+0x2c2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800260a:	3502      	adds	r5, #2
 800260c:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002610:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8002614:	4295      	cmp	r5, r2
 8002616:	d913      	bls.n	8002640 <HAL_PCD_IRQHandler+0x284>
 8002618:	2200      	movs	r2, #0
 800261a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800261e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002626:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800262a:	0412      	lsls	r2, r2, #16
 800262c:	0c12      	lsrs	r2, r2, #16
 800262e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800263a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800263e:	e004      	b.n	800264a <HAL_PCD_IRQHandler+0x28e>
      ep->xfer_len -= count;
 8002640:	1b52      	subs	r2, r2, r5
 8002642:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002646:	2a00      	cmp	r2, #0
 8002648:	d0e9      	beq.n	800261e <HAL_PCD_IRQHandler+0x262>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800264a:	f1be 0f00 	cmp.w	lr, #0
 800264e:	d00d      	beq.n	800266c <HAL_PCD_IRQHandler+0x2b0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002650:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002654:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800265c:	0412      	lsls	r2, r2, #16
 800265e:	0c12      	lsrs	r2, r2, #16
 8002660:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002664:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002668:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 800266c:	2d00      	cmp	r5, #0
 800266e:	d064      	beq.n	800273a <HAL_PCD_IRQHandler+0x37e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002670:	2128      	movs	r1, #40	; 0x28
 8002672:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002676:	462b      	mov	r3, r5
 8002678:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800267c:	e7ac      	b.n	80025d8 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800267e:	3506      	adds	r5, #6
 8002680:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002684:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002688:	4295      	cmp	r5, r2
 800268a:	d912      	bls.n	80026b2 <HAL_PCD_IRQHandler+0x2f6>
 800268c:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002690:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002698:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800269c:	0412      	lsls	r2, r2, #16
 800269e:	0c12      	lsrs	r2, r2, #16
 80026a0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80026a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80026b0:	e004      	b.n	80026bc <HAL_PCD_IRQHandler+0x300>
      ep->xfer_len -= count;
 80026b2:	1b52      	subs	r2, r2, r5
 80026b4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d0e9      	beq.n	8002690 <HAL_PCD_IRQHandler+0x2d4>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026bc:	f1be 0f00 	cmp.w	lr, #0
 80026c0:	d10d      	bne.n	80026de <HAL_PCD_IRQHandler+0x322>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80026c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80026ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026ce:	0412      	lsls	r2, r2, #16
 80026d0:	0c12      	lsrs	r2, r2, #16
 80026d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80026da:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80026de:	b365      	cbz	r5, 800273a <HAL_PCD_IRQHandler+0x37e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026e0:	2128      	movs	r1, #40	; 0x28
 80026e2:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026e6:	462b      	mov	r3, r5
 80026e8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80026ec:	e774      	b.n	80025d8 <HAL_PCD_IRQHandler+0x21c>
 80026ee:	bf00      	nop
 80026f0:	ffff8f0f 	.word	0xffff8f0f
 80026f4:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80026fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002700:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002704:	0412      	lsls	r2, r2, #16
 8002706:	0c12      	lsrs	r2, r2, #16
 8002708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002710:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002714:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002718:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800271c:	00d2      	lsls	r2, r2, #3
 800271e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002722:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002728:	d055      	beq.n	80027d6 <HAL_PCD_IRQHandler+0x41a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800272a:	3302      	adds	r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002732:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002736:	2d00      	cmp	r5, #0
 8002738:	d19d      	bne.n	8002676 <HAL_PCD_IRQHandler+0x2ba>
        ep->xfer_count += count;
 800273a:	2128      	movs	r1, #40	; 0x28
 800273c:	4371      	muls	r1, r6
 800273e:	1863      	adds	r3, r4, r1
 8002740:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002744:	442a      	add	r2, r5
 8002746:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800274a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800274e:	442a      	add	r2, r5
 8002750:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002754:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002758:	b11a      	cbz	r2, 8002762 <HAL_PCD_IRQHandler+0x3a6>
 800275a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800275e:	429d      	cmp	r5, r3
 8002760:	d242      	bcs.n	80027e8 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002762:	2328      	movs	r3, #40	; 0x28
 8002764:	fb03 4306 	mla	r3, r3, r6, r4
 8002768:	4620      	mov	r0, r4
 800276a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800276e:	f002 fdef 	bl	8005350 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002772:	063b      	lsls	r3, r7, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002774:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002776:	f57f ae30 	bpl.w	80023da <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800277a:	2228      	movs	r2, #40	; 0x28
 800277c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002780:	fb02 4506 	mla	r5, r2, r6, r4
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea03 0309 	and.w	r3, r3, r9
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002792:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8002796:	2b01      	cmp	r3, #1
 8002798:	d150      	bne.n	800283c <HAL_PCD_IRQHandler+0x480>
          ep->xfer_len = 0U;
 800279a:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 800279c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 80027a0:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 80027a2:	b393      	cbz	r3, 800280a <HAL_PCD_IRQHandler+0x44e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027a4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80027a8:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80027ac:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80027b0:	d031      	beq.n	8002816 <HAL_PCD_IRQHandler+0x45a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b2:	bb02      	cbnz	r2, 80027f6 <HAL_PCD_IRQHandler+0x43a>
 80027b4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	b292      	uxth	r2, r2
 80027bc:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c0:	4410      	add	r0, r2
 80027c2:	5a1a      	ldrh	r2, [r3, r0]
 80027c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80027c8:	521a      	strh	r2, [r3, r0]
 80027ca:	5a1a      	ldrh	r2, [r3, r0]
 80027cc:	b292      	uxth	r2, r2
 80027ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d2:	521a      	strh	r2, [r3, r0]
 80027d4:	e019      	b.n	800280a <HAL_PCD_IRQHandler+0x44e>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027d6:	3306      	adds	r3, #6
 80027d8:	441a      	add	r2, r3
 80027da:	f83c 5012 	ldrh.w	r5, [ip, r2, lsl #1]
 80027de:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d0a9      	beq.n	800273a <HAL_PCD_IRQHandler+0x37e>
 80027e6:	e77e      	b.n	80026e6 <HAL_PCD_IRQHandler+0x32a>
        ep = &hpcd->OUT_ep[epindex];
 80027e8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	4421      	add	r1, r4
 80027f0:	f001 fd8e 	bl	8004310 <USB_EPStartXfer>
 80027f4:	e7bd      	b.n	8002772 <HAL_PCD_IRQHandler+0x3b6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f6:	2a01      	cmp	r2, #1
 80027f8:	d107      	bne.n	800280a <HAL_PCD_IRQHandler+0x44e>
 80027fa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80027fe:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8002802:	b292      	uxth	r2, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	4410      	add	r0, r2
 8002808:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800280a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800280e:	4620      	mov	r0, r4
 8002810:	f002 fda7 	bl	8005362 <HAL_PCD_DataInStageCallback>
 8002814:	e5e1      	b.n	80023da <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002816:	b932      	cbnz	r2, 8002826 <HAL_PCD_IRQHandler+0x46a>
 8002818:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	b292      	uxth	r2, r2
 8002820:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002824:	e7cc      	b.n	80027c0 <HAL_PCD_IRQHandler+0x404>
 8002826:	2a01      	cmp	r2, #1
 8002828:	d1ef      	bne.n	800280a <HAL_PCD_IRQHandler+0x44e>
 800282a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800282e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002832:	b292      	uxth	r2, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4410      	add	r0, r2
 8002838:	521f      	strh	r7, [r3, r0]
 800283a:	e7e6      	b.n	800280a <HAL_PCD_IRQHandler+0x44e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800283c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002840:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8002844:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002846:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800284a:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 800284e:	d11b      	bne.n	8002888 <HAL_PCD_IRQHandler+0x4cc>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002850:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002854:	b2bf      	uxth	r7, r7
 8002856:	4457      	add	r7, sl
 8002858:	3702      	adds	r7, #2
 800285a:	f83e 7017 	ldrh.w	r7, [lr, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 800285e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002862:	429f      	cmp	r7, r3
 8002864:	d302      	bcc.n	800286c <HAL_PCD_IRQHandler+0x4b0>
 8002866:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
 800286a:	e7d0      	b.n	800280e <HAL_PCD_IRQHandler+0x452>
              ep->xfer_len -= TxPctSize;
 800286c:	1bdb      	subs	r3, r3, r7
 800286e:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8002870:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002872:	fb06 2202 	mla	r2, r6, r2, r2
              ep->xfer_buff += TxPctSize;
 8002876:	443b      	add	r3, r7
 8002878:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 800287a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800287c:	18a1      	adds	r1, r4, r2
              ep->xfer_count += TxPctSize;
 800287e:	443b      	add	r3, r7
 8002880:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002882:	f001 fd45 	bl	8004310 <USB_EPStartXfer>
 8002886:	e5a8      	b.n	80023da <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002888:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800288c:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002890:	b292      	uxth	r2, r2
 8002892:	4452      	add	r2, sl
 8002894:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002898:	f000 80dc 	beq.w	8002a54 <HAL_PCD_IRQHandler+0x698>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800289c:	3202      	adds	r2, #2
 800289e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 80028a2:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 80028a6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028aa:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80028ac:	bf28      	it	cs
 80028ae:	2300      	movcs	r3, #0
 80028b0:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 80028b4:	bf38      	it	cc
 80028b6:	1a9b      	subcc	r3, r3, r2
 80028b8:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028bc:	b2bf      	uxth	r7, r7
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d14d      	bne.n	800295e <HAL_PCD_IRQHandler+0x5a2>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c2:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	d136      	bne.n	8002938 <HAL_PCD_IRQHandler+0x57c>
 80028ca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80028ce:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80028d2:	b292      	uxth	r2, r2
 80028d4:	010b      	lsls	r3, r1, #4
 80028d6:	4416      	add	r6, r2
 80028d8:	5af2      	ldrh	r2, [r6, r3]
 80028da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028de:	52f2      	strh	r2, [r6, r3]
 80028e0:	5af2      	ldrh	r2, [r6, r3]
 80028e2:	b292      	uxth	r2, r2
 80028e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e8:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80028ee:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80028f2:	b292      	uxth	r2, r2
 80028f4:	4410      	add	r0, r2
 80028f6:	5ac2      	ldrh	r2, [r0, r3]
 80028f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028fc:	52c2      	strh	r2, [r0, r3]
 80028fe:	5ac2      	ldrh	r2, [r0, r3]
 8002900:	b292      	uxth	r2, r2
 8002902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002906:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002908:	4620      	mov	r0, r4
 800290a:	f002 fd2a 	bl	8005362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800290e:	2f00      	cmp	r7, #0
 8002910:	f000 80dc 	beq.w	8002acc <HAL_PCD_IRQHandler+0x710>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002914:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800291e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800292e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002932:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002936:	e0c9      	b.n	8002acc <HAL_PCD_IRQHandler+0x710>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002938:	2a01      	cmp	r2, #1
 800293a:	d1e5      	bne.n	8002908 <HAL_PCD_IRQHandler+0x54c>
 800293c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002940:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002944:	fa1f fc8c 	uxth.w	ip, ip
 8002948:	010a      	lsls	r2, r1, #4
 800294a:	4466      	add	r6, ip
 800294c:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800294e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002952:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002956:	b2b6      	uxth	r6, r6
 8002958:	4430      	add	r0, r6
 800295a:	5283      	strh	r3, [r0, r2]
 800295c:	e7d4      	b.n	8002908 <HAL_PCD_IRQHandler+0x54c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800295e:	b16f      	cbz	r7, 800297c <HAL_PCD_IRQHandler+0x5c0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002960:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800297c:	2728      	movs	r7, #40	; 0x28
 800297e:	fb07 4706 	mla	r7, r7, r6, r4
 8002982:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002986:	2b01      	cmp	r3, #1
 8002988:	f040 80a0 	bne.w	8002acc <HAL_PCD_IRQHandler+0x710>
        ep->xfer_buff += TxPctSize;
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800298e:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002992:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8002996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002998:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800299c:	4413      	add	r3, r2
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	459e      	cmp	lr, r3
 80029a4:	d32c      	bcc.n	8002a00 <HAL_PCD_IRQHandler+0x644>
          ep->xfer_len_db -= len;
 80029a6:	ebae 0203 	sub.w	r2, lr, r3
 80029aa:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ac:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80029b0:	fa1f fe83 	uxth.w	lr, r3
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	d141      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x680>
 80029b8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80029bc:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80029c0:	b2bf      	uxth	r7, r7
 80029c2:	443a      	add	r2, r7
 80029c4:	0109      	lsls	r1, r1, #4
 80029c6:	5a57      	ldrh	r7, [r2, r1]
 80029c8:	2b3e      	cmp	r3, #62	; 0x3e
 80029ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80029ce:	5257      	strh	r7, [r2, r1]
 80029d0:	d923      	bls.n	8002a1a <HAL_PCD_IRQHandler+0x65e>
 80029d2:	06df      	lsls	r7, r3, #27
 80029d4:	5a57      	ldrh	r7, [r2, r1]
 80029d6:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 80029da:	bf08      	it	eq
 80029dc:	f10a 3aff 	addeq.w	sl, sl, #4294967295	; 0xffffffff
 80029e0:	b2bf      	uxth	r7, r7
 80029e2:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 80029e6:	ea47 0708 	orr.w	r7, r7, r8
 80029ea:	b2bf      	uxth	r7, r7
 80029ec:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029ee:	2228      	movs	r2, #40	; 0x28
 80029f0:	4673      	mov	r3, lr
 80029f2:	4661      	mov	r1, ip
 80029f4:	fb02 4206 	mla	r2, r2, r6, r4
 80029f8:	8e12      	ldrh	r2, [r2, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029fa:	f001 fc79 	bl	80042f0 <USB_WritePMA>
 80029fe:	e065      	b.n	8002acc <HAL_PCD_IRQHandler+0x710>
        else if (ep->xfer_len_db == 0U)
 8002a00:	f1be 0f00 	cmp.w	lr, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x652>
    if (ep->xfer_len > TxPctSize)
 8002a06:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8002a08:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8002a0c:	e7ce      	b.n	80029ac <HAL_PCD_IRQHandler+0x5f0>
          ep->xfer_fill_db = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a16:	4673      	mov	r3, lr
 8002a18:	e7c8      	b.n	80029ac <HAL_PCD_IRQHandler+0x5f0>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a1a:	b92b      	cbnz	r3, 8002a28 <HAL_PCD_IRQHandler+0x66c>
 8002a1c:	5a53      	ldrh	r3, [r2, r1]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a24:	5253      	strh	r3, [r2, r1]
 8002a26:	e7e2      	b.n	80029ee <HAL_PCD_IRQHandler+0x632>
 8002a28:	085f      	lsrs	r7, r3, #1
 8002a2a:	07db      	lsls	r3, r3, #31
 8002a2c:	5a53      	ldrh	r3, [r2, r1]
 8002a2e:	bf48      	it	mi
 8002a30:	3701      	addmi	r7, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	e7f3      	b.n	8002a24 <HAL_PCD_IRQHandler+0x668>
 8002a3c:	2a01      	cmp	r2, #1
 8002a3e:	d1d6      	bne.n	80029ee <HAL_PCD_IRQHandler+0x632>
 8002a40:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a44:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	0109      	lsls	r1, r1, #4
 8002a4e:	f823 e001 	strh.w	lr, [r3, r1]
 8002a52:	e7cc      	b.n	80029ee <HAL_PCD_IRQHandler+0x632>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a54:	3206      	adds	r2, #6
 8002a56:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8002a5a:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8002a5c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a60:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002a62:	bf88      	it	hi
 8002a64:	4663      	movhi	r3, ip
 8002a66:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8002a6a:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8002a6e:	bf98      	it	ls
 8002a70:	1a9b      	subls	r3, r3, r2
 8002a72:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d14e      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x75c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a7a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	d137      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x736>
 8002a82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a86:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	010b      	lsls	r3, r1, #4
 8002a8e:	4416      	add	r6, r2
 8002a90:	5af2      	ldrh	r2, [r6, r3]
 8002a92:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a96:	52f2      	strh	r2, [r6, r3]
 8002a98:	5af2      	ldrh	r2, [r6, r3]
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa0:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aa2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002aa6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	4410      	add	r0, r2
 8002aae:	5ac2      	ldrh	r2, [r0, r3]
 8002ab0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ab4:	52c2      	strh	r2, [r0, r3]
 8002ab6:	5ac2      	ldrh	r2, [r0, r3]
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002abe:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f002 fc4e 	bl	8005362 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ac6:	2f00      	cmp	r7, #0
 8002ac8:	f43f af24 	beq.w	8002914 <HAL_PCD_IRQHandler+0x558>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002acc:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002ad0:	6822      	ldr	r2, [r4, #0]
 8002ad2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002af0:	e473      	b.n	80023da <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002af2:	2a01      	cmp	r2, #1
 8002af4:	d1e4      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x704>
 8002af6:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002afa:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002afe:	fa1f fc8c 	uxth.w	ip, ip
 8002b02:	010a      	lsls	r2, r1, #4
 8002b04:	4466      	add	r6, ip
 8002b06:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b08:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002b0c:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002b10:	b2b6      	uxth	r6, r6
 8002b12:	4430      	add	r0, r6
 8002b14:	5283      	strh	r3, [r0, r2]
 8002b16:	e7d3      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x704>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b18:	b96f      	cbnz	r7, 8002b36 <HAL_PCD_IRQHandler+0x77a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b1a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002b36:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8002b3a:	fb0c 4c06 	mla	ip, ip, r6, r4
 8002b3e:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d1c2      	bne.n	8002acc <HAL_PCD_IRQHandler+0x710>
        ep->xfer_count += TxPctSize;
 8002b46:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002b4a:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8002b4e:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b50:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8002b54:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b58:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8002b5c:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b5e:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8002b60:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b64:	d327      	bcc.n	8002bb6 <HAL_PCD_IRQHandler+0x7fa>
          ep->xfer_len_db -= len;
 8002b66:	ebae 0203 	sub.w	r2, lr, r3
 8002b6a:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b6e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002b72:	fa1f fc83 	uxth.w	ip, r3
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d143      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x846>
 8002b7a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8002b7e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002b82:	fa1f fe8e 	uxth.w	lr, lr
 8002b86:	4472      	add	r2, lr
 8002b88:	0109      	lsls	r1, r1, #4
 8002b8a:	f832 e001 	ldrh.w	lr, [r2, r1]
 8002b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b90:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8002b94:	f822 e001 	strh.w	lr, [r2, r1]
 8002b98:	d91b      	bls.n	8002bd2 <HAL_PCD_IRQHandler+0x816>
 8002b9a:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8002b9e:	06db      	lsls	r3, r3, #27
 8002ba0:	5a53      	ldrh	r3, [r2, r1]
 8002ba2:	bf08      	it	eq
 8002ba4:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8002bae:	ea43 0308 	orr.w	r3, r3, r8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	e012      	b.n	8002bdc <HAL_PCD_IRQHandler+0x820>
        else if (ep->xfer_len_db == 0U)
 8002bb6:	f1be 0f00 	cmp.w	lr, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x808>
    if (ep->xfer_len >= TxPctSize)
 8002bbc:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8002bbe:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 8002bc2:	e7d4      	b.n	8002b6e <HAL_PCD_IRQHandler+0x7b2>
          ep->xfer_len_db = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002bca:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 8002bce:	4673      	mov	r3, lr
 8002bd0:	e7cd      	b.n	8002b6e <HAL_PCD_IRQHandler+0x7b2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bd2:	b95b      	cbnz	r3, 8002bec <HAL_PCD_IRQHandler+0x830>
 8002bd4:	5a53      	ldrh	r3, [r2, r1]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bdc:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bde:	2328      	movs	r3, #40	; 0x28
 8002be0:	fb03 4606 	mla	r6, r3, r6, r4
 8002be4:	4639      	mov	r1, r7
 8002be6:	4663      	mov	r3, ip
 8002be8:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8002bea:	e706      	b.n	80029fa <HAL_PCD_IRQHandler+0x63e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bec:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8002bf0:	07db      	lsls	r3, r3, #31
 8002bf2:	5a53      	ldrh	r3, [r2, r1]
 8002bf4:	bf48      	it	mi
 8002bf6:	f10e 0e01 	addmi.w	lr, lr, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8002c00:	e7d7      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x7f6>
 8002c02:	2a01      	cmp	r2, #1
 8002c04:	d1eb      	bne.n	8002bde <HAL_PCD_IRQHandler+0x822>
 8002c06:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c0a:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	4413      	add	r3, r2
 8002c12:	010a      	lsls	r2, r1, #4
 8002c14:	f823 c002 	strh.w	ip, [r3, r2]
 8002c18:	e7e1      	b.n	8002bde <HAL_PCD_IRQHandler+0x822>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c1a:	0546      	lsls	r6, r0, #21
 8002c1c:	d512      	bpl.n	8002c44 <HAL_PCD_IRQHandler+0x888>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c1e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002c20:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c22:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002c32:	f002 fba2 	bl	800537a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c36:	4629      	mov	r1, r5
 8002c38:	4620      	mov	r0, r4
}
 8002c3a:	b005      	add	sp, #20
 8002c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c40:	f7ff bba7 	b.w	8002392 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c44:	0441      	lsls	r1, r0, #17
 8002c46:	d50a      	bpl.n	8002c5e <HAL_PCD_IRQHandler+0x8a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c48:	6822      	ldr	r2, [r4, #0]
 8002c4a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002c5a:	f7ff bbc3 	b.w	80023e4 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c5e:	0482      	lsls	r2, r0, #18
 8002c60:	d505      	bpl.n	8002c6e <HAL_PCD_IRQHandler+0x8b2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6c:	e7f1      	b.n	8002c52 <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c6e:	04c3      	lsls	r3, r0, #19
 8002c70:	d519      	bpl.n	8002ca6 <HAL_PCD_IRQHandler+0x8ea>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c72:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002c74:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c76:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c86:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002c8a:	f023 0308 	bic.w	r3, r3, #8
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002c96:	f002 fb93 	bl	80053c0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ca4:	e7d5      	b.n	8002c52 <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ca6:	0507      	lsls	r7, r0, #20
 8002ca8:	d548      	bpl.n	8002d3c <HAL_PCD_IRQHandler+0x980>
 8002caa:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002cac:	6822      	ldr	r2, [r4, #0]
 8002cae:	4606      	mov	r6, r0
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	f102 0520 	add.w	r5, r2, #32
 8002cb8:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 8002cbc:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002cbe:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8002cc2:	d1f9      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x8fc>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002cc4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cd2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ce2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002ce6:	055e      	lsls	r6, r3, #21
 8002ce8:	d5fb      	bpl.n	8002ce2 <HAL_PCD_IRQHandler+0x926>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002cfa:	f830 3b02 	ldrh.w	r3, [r0], #2
 8002cfe:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 8002d02:	428d      	cmp	r5, r1
 8002d04:	d1f9      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x93e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d06:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002d0a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d16:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d26:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002d34:	f002 fb34 	bl	80053a0 <HAL_PCD_SuspendCallback>
    return;
 8002d38:	f7ff bb54 	b.w	80023e4 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002d3c:	0582      	lsls	r2, r0, #22
 8002d3e:	d50d      	bpl.n	8002d5c <HAL_PCD_IRQHandler+0x9a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d40:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002d42:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002d54:	f002 fb0d 	bl	8005372 <HAL_PCD_SOFCallback>
    return;
 8002d58:	f7ff bb44 	b.w	80023e4 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002d5c:	05c3      	lsls	r3, r0, #23
 8002d5e:	f57f ab41 	bpl.w	80023e4 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6c:	e771      	b.n	8002c52 <HAL_PCD_IRQHandler+0x896>
 8002d6e:	bf00      	nop

08002d70 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002d70:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	4605      	mov	r5, r0
 8002d78:	f001 0007 	and.w	r0, r1, #7
 8002d7c:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002d80:	d01a      	beq.n	8002db8 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8002d82:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d84:	fb00 1101 	mla	r1, r0, r1, r1
 8002d88:	4429      	add	r1, r5
    ep->is_in = 1U;
 8002d8a:	704c      	strb	r4, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8002d8c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002d8e:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8002d90:	bf08      	it	eq
 8002d92:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d94:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8002d96:	bf08      	it	eq
 8002d98:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8002d9a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8002d9c:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d013      	beq.n	8002dcc <HAL_PCD_EP_Open+0x5c>
 8002da4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002da6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8002da8:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dac:	f000 fff4 	bl	8003d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002db8:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	fb01 f400 	mul.w	r4, r1, r0
 8002dbe:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8002dc2:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc4:	4429      	add	r1, r5
    ep->is_in = 0U;
 8002dc6:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8002dca:	e7df      	b.n	8002d8c <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8002dcc:	2002      	movs	r0, #2
 8002dce:	e7f2      	b.n	8002db6 <HAL_PCD_EP_Open+0x46>

08002dd0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002dd0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	f001 0207 	and.w	r2, r1, #7
 8002dda:	4604      	mov	r4, r0
 8002ddc:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002de0:	d013      	beq.n	8002e0a <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8002de2:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	fb02 1101 	mla	r1, r2, r1, r1
 8002de8:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002dea:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dec:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002dee:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d013      	beq.n	8002e1e <HAL_PCD_EP_Close+0x4e>
 8002df6:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002df8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002dfa:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dfe:	f001 f92b 	bl	8004058 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002e08:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	fb01 f302 	mul.w	r3, r1, r2
 8002e0e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002e12:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002e14:	4403      	add	r3, r0
 8002e16:	2000      	movs	r0, #0
 8002e18:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002e1c:	e7e6      	b.n	8002dec <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8002e1e:	2002      	movs	r0, #2
 8002e20:	e7f2      	b.n	8002e08 <HAL_PCD_EP_Close+0x38>

08002e22 <HAL_PCD_EP_Receive>:
{
 8002e22:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002e24:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8002e26:	2600      	movs	r6, #0
 8002e28:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002e2c:	434c      	muls	r4, r1
 8002e2e:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e34:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e38:	4401      	add	r1, r0
  ep->xfer_len = len;
 8002e3a:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8002e3e:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002e42:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e46:	6800      	ldr	r0, [r0, #0]
 8002e48:	f001 fa62 	bl	8004310 <USB_EPStartXfer>
}
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}

08002e50 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e50:	2328      	movs	r3, #40	; 0x28
 8002e52:	f001 0107 	and.w	r1, r1, #7
 8002e56:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002e5a:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8002e5e:	4770      	bx	lr

08002e60 <HAL_PCD_EP_Transmit>:
{
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8002e66:	2128      	movs	r1, #40	; 0x28
 8002e68:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8002e6c:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8002e6e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8002e72:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8002e78:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e7c:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8002e7e:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002e80:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002e82:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e86:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e8a:	6800      	ldr	r0, [r0, #0]
 8002e8c:	f001 fa40 	bl	8004310 <USB_EPStartXfer>
}
 8002e90:	4630      	mov	r0, r6
 8002e92:	bd70      	pop	{r4, r5, r6, pc}

08002e94 <HAL_PCD_EP_SetStall>:
{
 8002e94:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e96:	6843      	ldr	r3, [r0, #4]
 8002e98:	f001 0507 	and.w	r5, r1, #7
 8002e9c:	429d      	cmp	r5, r3
{
 8002e9e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ea0:	d828      	bhi.n	8002ef4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8002ea2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ea6:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002eaa:	d01a      	beq.n	8002ee2 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eac:	fb05 3303 	mla	r3, r5, r3, r3
 8002eb0:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8002eb6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002eba:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002ebc:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d019      	beq.n	8002ef8 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ec4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002ec6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eca:	f001 f998 	bl	80041fe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ece:	b925      	cbnz	r5, 8002eda <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002ed6:	f001 fa09 	bl	80042ec <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002ee2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002ee4:	434b      	muls	r3, r1
 8002ee6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8002eea:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002eec:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002eee:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8002ef2:	e7e0      	b.n	8002eb6 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	e7f3      	b.n	8002ee0 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8002ef8:	2002      	movs	r0, #2
 8002efa:	e7f1      	b.n	8002ee0 <HAL_PCD_EP_SetStall+0x4c>

08002efc <HAL_PCD_EP_ClrStall>:
{
 8002efc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002efe:	6843      	ldr	r3, [r0, #4]
 8002f00:	f001 020f 	and.w	r2, r1, #15
 8002f04:	429a      	cmp	r2, r3
{
 8002f06:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f08:	d826      	bhi.n	8002f58 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8002f0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f0e:	f001 0207 	and.w	r2, r1, #7
 8002f12:	f04f 0128 	mov.w	r1, #40	; 0x28
 8002f16:	d015      	beq.n	8002f44 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8002f18:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	fb02 1101 	mla	r1, r2, r1, r1
 8002f1e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002f20:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8002f22:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f24:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002f26:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002f28:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d015      	beq.n	8002f5c <HAL_PCD_EP_ClrStall+0x60>
 8002f30:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f32:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002f34:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f38:	f001 f981 	bl	800423e <USB_EPClearStall>
  return HAL_OK;
 8002f3c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002f3e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	fb01 f302 	mul.w	r3, r1, r2
 8002f48:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002f4c:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002f4e:	4403      	add	r3, r0
 8002f50:	2000      	movs	r0, #0
 8002f52:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002f56:	e7e4      	b.n	8002f22 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e7f2      	b.n	8002f42 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	e7f0      	b.n	8002f42 <HAL_PCD_EP_ClrStall+0x46>

08002f60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f60:	b510      	push	{r4, lr}
 8002f62:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f64:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	bf1b      	ittet	ne
 8002f6a:	f001 0107 	andne.w	r1, r1, #7
 8002f6e:	fb01 4404 	mlane	r4, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f72:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	1900      	addne	r0, r0, r4
    ep = &hpcd->OUT_ep[ep_addr];
 8002f78:	bf08      	it	eq
 8002f7a:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f7e:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8002f80:	b91a      	cbnz	r2, 8002f8a <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8002f82:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002f84:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002f86:	2000      	movs	r0, #0
 8002f88:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002f8a:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f8c:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8002f8e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f90:	e7f9      	b.n	8002f86 <HAL_PCDEx_PMAConfig+0x26>
	...

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b338      	cbz	r0, 8002fec <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9c:	6803      	ldr	r3, [r0, #0]
 8002f9e:	07db      	lsls	r3, r3, #31
 8002fa0:	d410      	bmi.n	8002fc4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	682b      	ldr	r3, [r5, #0]
 8002fa4:	079f      	lsls	r7, r3, #30
 8002fa6:	d45e      	bmi.n	8003066 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	0719      	lsls	r1, r3, #28
 8002fac:	f100 8095 	bmi.w	80030da <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	075a      	lsls	r2, r3, #29
 8002fb4:	f100 80c1 	bmi.w	800313a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb8:	69e8      	ldr	r0, [r5, #28]
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	f040 812c 	bne.w	8003218 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e029      	b.n	8003018 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc4:	4c90      	ldr	r4, [pc, #576]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d007      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
 8002fda:	6863      	ldr	r3, [r4, #4]
 8002fdc:	03de      	lsls	r6, r3, #15
 8002fde:	d507      	bpl.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	039c      	lsls	r4, r3, #14
 8002fe4:	d5dd      	bpl.n	8002fa2 <HAL_RCC_OscConfig+0xe>
 8002fe6:	686b      	ldr	r3, [r5, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1da      	bne.n	8002fa2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	e013      	b.n	8003018 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff0:	686b      	ldr	r3, [r5, #4]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d112      	bne.n	800301e <HAL_RCC_OscConfig+0x8a>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003000:	f7fe fcc0 	bl	8001984 <HAL_GetTick>
 8003004:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	0398      	lsls	r0, r3, #14
 800300a:	d4ca      	bmi.n	8002fa2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fcba 	bl	8001984 <HAL_GetTick>
 8003010:	1b80      	subs	r0, r0, r6
 8003012:	2864      	cmp	r0, #100	; 0x64
 8003014:	d9f7      	bls.n	8003006 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003016:	2003      	movs	r0, #3
}
 8003018:	b002      	add	sp, #8
 800301a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	b99b      	cbnz	r3, 8003048 <HAL_RCC_OscConfig+0xb4>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003030:	f7fe fca8 	bl	8001984 <HAL_GetTick>
 8003034:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	0399      	lsls	r1, r3, #14
 800303a:	d5b2      	bpl.n	8002fa2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe fca2 	bl	8001984 <HAL_GetTick>
 8003040:	1b80      	subs	r0, r0, r6
 8003042:	2864      	cmp	r0, #100	; 0x64
 8003044:	d9f7      	bls.n	8003036 <HAL_RCC_OscConfig+0xa2>
 8003046:	e7e6      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	d103      	bne.n	8003058 <HAL_RCC_OscConfig+0xc4>
 8003050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	e7cf      	b.n	8002ff8 <HAL_RCC_OscConfig+0x64>
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003064:	e7cb      	b.n	8002ffe <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4c68      	ldr	r4, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	f013 0f0c 	tst.w	r3, #12
 800306e:	d007      	beq.n	8003080 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d110      	bne.n	800309c <HAL_RCC_OscConfig+0x108>
 800307a:	6863      	ldr	r3, [r4, #4]
 800307c:	03da      	lsls	r2, r3, #15
 800307e:	d40d      	bmi.n	800309c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	079b      	lsls	r3, r3, #30
 8003084:	d502      	bpl.n	800308c <HAL_RCC_OscConfig+0xf8>
 8003086:	692b      	ldr	r3, [r5, #16]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d1af      	bne.n	8002fec <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	696a      	ldr	r2, [r5, #20]
 8003090:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003094:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	e785      	b.n	8002fa8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309c:	692a      	ldr	r2, [r5, #16]
 800309e:	4b5b      	ldr	r3, [pc, #364]	; (800320c <HAL_RCC_OscConfig+0x278>)
 80030a0:	b16a      	cbz	r2, 80030be <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030a6:	f7fe fc6d 	bl	8001984 <HAL_GetTick>
 80030aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	079f      	lsls	r7, r3, #30
 80030b0:	d4ec      	bmi.n	800308c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fc67 	bl	8001984 <HAL_GetTick>
 80030b6:	1b80      	subs	r0, r0, r6
 80030b8:	2802      	cmp	r0, #2
 80030ba:	d9f7      	bls.n	80030ac <HAL_RCC_OscConfig+0x118>
 80030bc:	e7ab      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80030be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030c0:	f7fe fc60 	bl	8001984 <HAL_GetTick>
 80030c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	0798      	lsls	r0, r3, #30
 80030ca:	f57f af6d 	bpl.w	8002fa8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fc59 	bl	8001984 <HAL_GetTick>
 80030d2:	1b80      	subs	r0, r0, r6
 80030d4:	2802      	cmp	r0, #2
 80030d6:	d9f6      	bls.n	80030c6 <HAL_RCC_OscConfig+0x132>
 80030d8:	e79d      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030da:	69aa      	ldr	r2, [r5, #24]
 80030dc:	4e4a      	ldr	r6, [pc, #296]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_RCC_OscConfig+0x278>)
 80030e0:	b1e2      	cbz	r2, 800311c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80030e2:	2201      	movs	r2, #1
 80030e4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80030e8:	f7fe fc4c 	bl	8001984 <HAL_GetTick>
 80030ec:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030f0:	079b      	lsls	r3, r3, #30
 80030f2:	d50d      	bpl.n	8003110 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003100:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003102:	bf00      	nop
  }
  while (Delay --);
 8003104:	9b01      	ldr	r3, [sp, #4]
 8003106:	1e5a      	subs	r2, r3, #1
 8003108:	9201      	str	r2, [sp, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_RCC_OscConfig+0x16e>
 800310e:	e74f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe fc38 	bl	8001984 <HAL_GetTick>
 8003114:	1b00      	subs	r0, r0, r4
 8003116:	2802      	cmp	r0, #2
 8003118:	d9e9      	bls.n	80030ee <HAL_RCC_OscConfig+0x15a>
 800311a:	e77c      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800311c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003120:	f7fe fc30 	bl	8001984 <HAL_GetTick>
 8003124:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003126:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003128:	079f      	lsls	r7, r3, #30
 800312a:	f57f af41 	bpl.w	8002fb0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe fc29 	bl	8001984 <HAL_GetTick>
 8003132:	1b00      	subs	r0, r0, r4
 8003134:	2802      	cmp	r0, #2
 8003136:	d9f6      	bls.n	8003126 <HAL_RCC_OscConfig+0x192>
 8003138:	e76d      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4c33      	ldr	r4, [pc, #204]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 800313c:	69e3      	ldr	r3, [r4, #28]
 800313e:	00d8      	lsls	r0, r3, #3
 8003140:	d424      	bmi.n	800318c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003142:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	69e3      	ldr	r3, [r4, #28]
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	61e3      	str	r3, [r4, #28]
 800314c:	69e3      	ldr	r3, [r4, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4e2f      	ldr	r6, [pc, #188]	; (8003214 <HAL_RCC_OscConfig+0x280>)
 8003158:	6833      	ldr	r3, [r6, #0]
 800315a:	05d9      	lsls	r1, r3, #23
 800315c:	d518      	bpl.n	8003190 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315e:	68eb      	ldr	r3, [r5, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d126      	bne.n	80031b2 <HAL_RCC_OscConfig+0x21e>
 8003164:	6a23      	ldr	r3, [r4, #32]
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800316c:	f7fe fc0a 	bl	8001984 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003174:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	6a23      	ldr	r3, [r4, #32]
 8003178:	079b      	lsls	r3, r3, #30
 800317a:	d53f      	bpl.n	80031fc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800317c:	2f00      	cmp	r7, #0
 800317e:	f43f af1b 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	69e3      	ldr	r3, [r4, #28]
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003188:	61e3      	str	r3, [r4, #28]
 800318a:	e715      	b.n	8002fb8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800318c:	2700      	movs	r7, #0
 800318e:	e7e2      	b.n	8003156 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003190:	6833      	ldr	r3, [r6, #0]
 8003192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003196:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003198:	f7fe fbf4 	bl	8001984 <HAL_GetTick>
 800319c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	6833      	ldr	r3, [r6, #0]
 80031a0:	05da      	lsls	r2, r3, #23
 80031a2:	d4dc      	bmi.n	800315e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a4:	f7fe fbee 	bl	8001984 <HAL_GetTick>
 80031a8:	eba0 0008 	sub.w	r0, r0, r8
 80031ac:	2864      	cmp	r0, #100	; 0x64
 80031ae:	d9f6      	bls.n	800319e <HAL_RCC_OscConfig+0x20a>
 80031b0:	e731      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b2:	b9ab      	cbnz	r3, 80031e0 <HAL_RCC_OscConfig+0x24c>
 80031b4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6223      	str	r3, [r4, #32]
 80031c0:	6a23      	ldr	r3, [r4, #32]
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80031c8:	f7fe fbdc 	bl	8001984 <HAL_GetTick>
 80031cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	6a23      	ldr	r3, [r4, #32]
 80031d0:	0798      	lsls	r0, r3, #30
 80031d2:	d5d3      	bpl.n	800317c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe fbd6 	bl	8001984 <HAL_GetTick>
 80031d8:	1b80      	subs	r0, r0, r6
 80031da:	4540      	cmp	r0, r8
 80031dc:	d9f7      	bls.n	80031ce <HAL_RCC_OscConfig+0x23a>
 80031de:	e71a      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	6a23      	ldr	r3, [r4, #32]
 80031e4:	d103      	bne.n	80031ee <HAL_RCC_OscConfig+0x25a>
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	6223      	str	r3, [r4, #32]
 80031ec:	e7ba      	b.n	8003164 <HAL_RCC_OscConfig+0x1d0>
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6223      	str	r3, [r4, #32]
 80031f4:	6a23      	ldr	r3, [r4, #32]
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	e7b6      	b.n	800316a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe fbc2 	bl	8001984 <HAL_GetTick>
 8003200:	1b80      	subs	r0, r0, r6
 8003202:	4540      	cmp	r0, r8
 8003204:	d9b7      	bls.n	8003176 <HAL_RCC_OscConfig+0x1e2>
 8003206:	e706      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
 8003208:	40021000 	.word	0x40021000
 800320c:	42420000 	.word	0x42420000
 8003210:	20000010 	.word	0x20000010
 8003214:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003218:	4c2a      	ldr	r4, [pc, #168]	; (80032c4 <HAL_RCC_OscConfig+0x330>)
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d03e      	beq.n	80032a2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003224:	2200      	movs	r2, #0
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCC_OscConfig+0x334>)
 8003228:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800322a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322c:	d12c      	bne.n	8003288 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800322e:	f7fe fba9 	bl	8001984 <HAL_GetTick>
 8003232:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	0199      	lsls	r1, r3, #6
 8003238:	d420      	bmi.n	800327c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800323a:	6a2b      	ldr	r3, [r5, #32]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003242:	6862      	ldr	r2, [r4, #4]
 8003244:	68a9      	ldr	r1, [r5, #8]
 8003246:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800324a:	430a      	orrs	r2, r1
 800324c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	430b      	orrs	r3, r1
 8003254:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003258:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800325a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_RCC_OscConfig+0x334>)
 8003260:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003262:	f7fe fb8f 	bl	8001984 <HAL_GetTick>
 8003266:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	019a      	lsls	r2, r3, #6
 800326c:	f53f aea8 	bmi.w	8002fc0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fb88 	bl	8001984 <HAL_GetTick>
 8003274:	1b40      	subs	r0, r0, r5
 8003276:	2802      	cmp	r0, #2
 8003278:	d9f6      	bls.n	8003268 <HAL_RCC_OscConfig+0x2d4>
 800327a:	e6cc      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fb82 	bl	8001984 <HAL_GetTick>
 8003280:	1b80      	subs	r0, r0, r6
 8003282:	2802      	cmp	r0, #2
 8003284:	d9d6      	bls.n	8003234 <HAL_RCC_OscConfig+0x2a0>
 8003286:	e6c6      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003288:	f7fe fb7c 	bl	8001984 <HAL_GetTick>
 800328c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	019b      	lsls	r3, r3, #6
 8003292:	f57f ae95 	bpl.w	8002fc0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe fb75 	bl	8001984 <HAL_GetTick>
 800329a:	1b40      	subs	r0, r0, r5
 800329c:	2802      	cmp	r0, #2
 800329e:	d9f6      	bls.n	800328e <HAL_RCC_OscConfig+0x2fa>
 80032a0:	e6b9      	b.n	8003016 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a2:	2801      	cmp	r0, #1
 80032a4:	f43f aeb8 	beq.w	8003018 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80032a8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	6a2a      	ldr	r2, [r5, #32]
 80032ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80032b0:	4291      	cmp	r1, r2
 80032b2:	f47f ae9b 	bne.w	8002fec <HAL_RCC_OscConfig+0x58>
 80032b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032bc:	4293      	cmp	r3, r2
 80032be:	f43f ae7f 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x2c>
 80032c2:	e693      	b.n	8002fec <HAL_RCC_OscConfig+0x58>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	42420000 	.word	0x42420000

080032cc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_RCC_GetSysClockFreq+0x38>)
 80032ce:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80032d0:	f003 010c 	and.w	r1, r3, #12
 80032d4:	2908      	cmp	r1, #8
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032da:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032de:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032e0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032e2:	d509      	bpl.n	80032f8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_RCC_GetSysClockFreq+0x44>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80032f6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetSysClockFreq+0x48>)
 80032fa:	4358      	muls	r0, r3
 80032fc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	0800a2bc 	.word	0x0800a2bc
 800330c:	007a1200 	.word	0x007a1200
 8003310:	0800a2cc 	.word	0x0800a2cc
 8003314:	003d0900 	.word	0x003d0900

08003318 <HAL_RCC_ClockConfig>:
{
 8003318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800331c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800331e:	4604      	mov	r4, r0
 8003320:	b910      	cbnz	r0, 8003328 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003322:	2001      	movs	r0, #1
}
 8003324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_RCC_ClockConfig+0x124>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	428b      	cmp	r3, r1
 8003332:	d328      	bcc.n	8003386 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	6821      	ldr	r1, [r4, #0]
 8003336:	078e      	lsls	r6, r1, #30
 8003338:	d430      	bmi.n	800339c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	07ca      	lsls	r2, r1, #31
 800333c:	d443      	bmi.n	80033c6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333e:	4a3f      	ldr	r2, [pc, #252]	; (800343c <HAL_RCC_ClockConfig+0x124>)
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	42ab      	cmp	r3, r5
 8003348:	d865      	bhi.n	8003416 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	4d3c      	ldr	r5, [pc, #240]	; (8003440 <HAL_RCC_ClockConfig+0x128>)
 800334e:	f012 0f04 	tst.w	r2, #4
 8003352:	d16c      	bne.n	800342e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	0713      	lsls	r3, r2, #28
 8003356:	d506      	bpl.n	8003366 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003358:	686b      	ldr	r3, [r5, #4]
 800335a:	6922      	ldr	r2, [r4, #16]
 800335c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003360:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003364:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f7ff ffb1 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800336a:	686b      	ldr	r3, [r5, #4]
 800336c:	4a35      	ldr	r2, [pc, #212]	; (8003444 <HAL_RCC_ClockConfig+0x12c>)
 800336e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	40d8      	lsrs	r0, r3
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_ClockConfig+0x130>)
 8003378:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCC_ClockConfig+0x134>)
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f7fe fabf 	bl	8001900 <HAL_InitTick>
  return HAL_OK;
 8003382:	2000      	movs	r0, #0
 8003384:	e7ce      	b.n	8003324 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	f023 0307 	bic.w	r3, r3, #7
 800338c:	430b      	orrs	r3, r1
 800338e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	428b      	cmp	r3, r1
 8003398:	d1c3      	bne.n	8003322 <HAL_RCC_ClockConfig+0xa>
 800339a:	e7cb      	b.n	8003334 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_RCC_ClockConfig+0x128>)
 800339e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a2:	bf1e      	ittt	ne
 80033a4:	685a      	ldrne	r2, [r3, #4]
 80033a6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80033aa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ae:	bf42      	ittt	mi
 80033b0:	685a      	ldrmi	r2, [r3, #4]
 80033b2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80033b6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68a0      	ldr	r0, [r4, #8]
 80033bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80033c0:	4302      	orrs	r2, r0
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	e7b9      	b.n	800333a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	6862      	ldr	r2, [r4, #4]
 80033c8:	4e1d      	ldr	r6, [pc, #116]	; (8003440 <HAL_RCC_ClockConfig+0x128>)
 80033ca:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ce:	d11a      	bne.n	8003406 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	d0a5      	beq.n	8003322 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033dc:	f023 0303 	bic.w	r3, r3, #3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80033e4:	f7fe face 	bl	8001984 <HAL_GetTick>
 80033e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	6873      	ldr	r3, [r6, #4]
 80033ec:	6862      	ldr	r2, [r4, #4]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033f6:	d0a2      	beq.n	800333e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fac4 	bl	8001984 <HAL_GetTick>
 80033fc:	1bc0      	subs	r0, r0, r7
 80033fe:	4540      	cmp	r0, r8
 8003400:	d9f3      	bls.n	80033ea <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003402:	2003      	movs	r0, #3
 8003404:	e78e      	b.n	8003324 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003406:	2a02      	cmp	r2, #2
 8003408:	d102      	bne.n	8003410 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800340e:	e7e1      	b.n	80033d4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	f013 0f02 	tst.w	r3, #2
 8003414:	e7de      	b.n	80033d4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	f023 0307 	bic.w	r3, r3, #7
 800341c:	432b      	orrs	r3, r5
 800341e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003420:	6813      	ldr	r3, [r2, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	42ab      	cmp	r3, r5
 8003428:	f47f af7b 	bne.w	8003322 <HAL_RCC_ClockConfig+0xa>
 800342c:	e78d      	b.n	800334a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342e:	686b      	ldr	r3, [r5, #4]
 8003430:	68e1      	ldr	r1, [r4, #12]
 8003432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003436:	430b      	orrs	r3, r1
 8003438:	606b      	str	r3, [r5, #4]
 800343a:	e78b      	b.n	8003354 <HAL_RCC_ClockConfig+0x3c>
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
 8003444:	0800a2a4 	.word	0x0800a2a4
 8003448:	20000010 	.word	0x20000010
 800344c:	20000018 	.word	0x20000018

08003450 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	4a03      	ldr	r2, [pc, #12]	; (800346c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800345e:	6810      	ldr	r0, [r2, #0]
}
 8003460:	40d8      	lsrs	r0, r3
 8003462:	4770      	bx	lr
 8003464:	40021000 	.word	0x40021000
 8003468:	0800a2b4 	.word	0x0800a2b4
 800346c:	20000010 	.word	0x20000010

08003470 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003472:	4a05      	ldr	r2, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800347e:	6810      	ldr	r0, [r2, #0]
}
 8003480:	40d8      	lsrs	r0, r3
 8003482:	4770      	bx	lr
 8003484:	40021000 	.word	0x40021000
 8003488:	0800a2b4 	.word	0x0800a2b4
 800348c:	20000010 	.word	0x20000010

08003490 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003490:	6803      	ldr	r3, [r0, #0]
{
 8003492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003496:	07d9      	lsls	r1, r3, #31
{
 8003498:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800349a:	d521      	bpl.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349c:	4c36      	ldr	r4, [pc, #216]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800349e:	69e3      	ldr	r3, [r4, #28]
 80034a0:	00da      	lsls	r2, r3, #3
 80034a2:	d433      	bmi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80034a4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	69e3      	ldr	r3, [r4, #28]
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ac:	61e3      	str	r3, [r4, #28]
 80034ae:	69e3      	ldr	r3, [r4, #28]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	4f30      	ldr	r7, [pc, #192]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	05db      	lsls	r3, r3, #23
 80034be:	d527      	bpl.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034c2:	686a      	ldr	r2, [r5, #4]
 80034c4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034c8:	d136      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ca:	6a23      	ldr	r3, [r4, #32]
 80034cc:	686a      	ldr	r2, [r5, #4]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	4313      	orrs	r3, r2
 80034d4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d6:	b11e      	cbz	r6, 80034e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d8:	69e3      	ldr	r3, [r4, #28]
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e0:	6828      	ldr	r0, [r5, #0]
 80034e2:	0783      	lsls	r3, r0, #30
 80034e4:	d506      	bpl.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e6:	4924      	ldr	r1, [pc, #144]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034e8:	68ab      	ldr	r3, [r5, #8]
 80034ea:	684a      	ldr	r2, [r1, #4]
 80034ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80034f0:	431a      	orrs	r2, r3
 80034f2:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f4:	f010 0010 	ands.w	r0, r0, #16
 80034f8:	d01b      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034fc:	68e9      	ldr	r1, [r5, #12]
 80034fe:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003500:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003502:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003506:	430b      	orrs	r3, r1
 8003508:	6053      	str	r3, [r2, #4]
 800350a:	e012      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 800350c:	2600      	movs	r6, #0
 800350e:	e7d3      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003518:	f7fe fa34 	bl	8001984 <HAL_GetTick>
 800351c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	05d8      	lsls	r0, r3, #23
 8003522:	d4cd      	bmi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fe fa2e 	bl	8001984 <HAL_GetTick>
 8003528:	eba0 0008 	sub.w	r0, r0, r8
 800352c:	2864      	cmp	r0, #100	; 0x64
 800352e:	d9f6      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8003530:	2003      	movs	r0, #3
}
 8003532:	b002      	add	sp, #8
 8003534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003538:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800353c:	429a      	cmp	r2, r3
 800353e:	d0c4      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003540:	2001      	movs	r0, #1
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003544:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003546:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800354a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800354c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003550:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003554:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003556:	07d9      	lsls	r1, r3, #31
 8003558:	d5b7      	bpl.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800355a:	f7fe fa13 	bl	8001984 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003562:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	6a23      	ldr	r3, [r4, #32]
 8003566:	079a      	lsls	r2, r3, #30
 8003568:	d4af      	bmi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe fa0b 	bl	8001984 <HAL_GetTick>
 800356e:	1bc0      	subs	r0, r0, r7
 8003570:	4540      	cmp	r0, r8
 8003572:	d9f7      	bls.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003574:	e7dc      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40007000 	.word	0x40007000
 8003580:	42420000 	.word	0x42420000

08003584 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003584:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003588:	2b01      	cmp	r3, #1
 800358a:	d120      	bne.n	80035ce <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003592:	6803      	ldr	r3, [r0, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_TIM_Base_Start_IT+0x50>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00a      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x34>
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d007      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x34>
 80035a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x34>
 80035b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035be:	2a06      	cmp	r2, #6
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ca:	2000      	movs	r0, #0
}
 80035cc:	4770      	bx	lr
    return HAL_ERROR;
 80035ce:	2001      	movs	r0, #1
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00

080035d8 <HAL_TIM_IC_MspInit>:
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_OC_DelayElapsedCallback>:
 80035da:	4770      	bx	lr

080035dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_TriggerCallback>:
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e0:	6803      	ldr	r3, [r0, #0]
{
 80035e2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e4:	691a      	ldr	r2, [r3, #16]
{
 80035e6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e8:	0791      	lsls	r1, r2, #30
 80035ea:	d50e      	bpl.n	800360a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	0792      	lsls	r2, r2, #30
 80035f0:	d50b      	bpl.n	800360a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f2:	f06f 0202 	mvn.w	r2, #2
 80035f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f8:	2201      	movs	r2, #1
 80035fa:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	079b      	lsls	r3, r3, #30
 8003600:	d077      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003602:	f7fd fd15 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	2300      	movs	r3, #0
 8003608:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	0750      	lsls	r0, r2, #29
 8003610:	d510      	bpl.n	8003634 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	0751      	lsls	r1, r2, #29
 8003616:	d50d      	bpl.n	8003634 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003618:	f06f 0204 	mvn.w	r2, #4
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	2202      	movs	r2, #2
 8003620:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003622:	699b      	ldr	r3, [r3, #24]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003624:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003626:	f413 7f40 	tst.w	r3, #768	; 0x300
 800362a:	d068      	beq.n	80036fe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800362c:	f7fd fd00 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003630:	2300      	movs	r3, #0
 8003632:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	0712      	lsls	r2, r2, #28
 800363a:	d50f      	bpl.n	800365c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	0710      	lsls	r0, r2, #28
 8003640:	d50c      	bpl.n	800365c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003642:	f06f 0208 	mvn.w	r2, #8
 8003646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003648:	2204      	movs	r2, #4
 800364a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800364c:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003650:	0799      	lsls	r1, r3, #30
 8003652:	d05a      	beq.n	800370a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003654:	f7fd fcec 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003658:	2300      	movs	r3, #0
 800365a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	06d2      	lsls	r2, r2, #27
 8003662:	d510      	bpl.n	8003686 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	06d0      	lsls	r0, r2, #27
 8003668:	d50d      	bpl.n	8003686 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800366a:	f06f 0210 	mvn.w	r2, #16
 800366e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003670:	2208      	movs	r2, #8
 8003672:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	f413 7f40 	tst.w	r3, #768	; 0x300
 800367c:	d04b      	beq.n	8003716 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	f7fd fcd7 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	2300      	movs	r3, #0
 8003684:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	07d1      	lsls	r1, r2, #31
 800368c:	d508      	bpl.n	80036a0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	07d2      	lsls	r2, r2, #31
 8003692:	d505      	bpl.n	80036a0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003694:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003698:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800369a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800369c:	f7fd fcf6 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	0610      	lsls	r0, r2, #24
 80036a6:	d508      	bpl.n	80036ba <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	0611      	lsls	r1, r2, #24
 80036ac:	d505      	bpl.n	80036ba <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036b6:	f000 fad4 	bl	8003c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	0652      	lsls	r2, r2, #25
 80036c0:	d508      	bpl.n	80036d4 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	0650      	lsls	r0, r2, #25
 80036c6:	d505      	bpl.n	80036d4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036d0:	f7ff ff85 	bl	80035de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	0691      	lsls	r1, r2, #26
 80036da:	d522      	bpl.n	8003722 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	0692      	lsls	r2, r2, #26
 80036e0:	d51f      	bpl.n	8003722 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e6:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80036ee:	f000 bab7 	b.w	8003c60 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	f7ff ff72 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff ff70 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 80036fc:	e783      	b.n	8003606 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	f7ff ff6c 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003702:	4620      	mov	r0, r4
 8003704:	f7ff ff6a 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003708:	e792      	b.n	8003630 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	f7ff ff66 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff ff64 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003714:	e7a0      	b.n	8003658 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	f7ff ff60 	bl	80035da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371a:	4620      	mov	r0, r4
 800371c:	f7ff ff5e 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003720:	e7af      	b.n	8003682 <HAL_TIM_IRQHandler+0xa2>
}
 8003722:	bd10      	pop	{r4, pc}

08003724 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003726:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	4290      	cmp	r0, r2
 800372a:	d00a      	beq.n	8003742 <TIM_Base_SetConfig+0x1e>
 800372c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003730:	d007      	beq.n	8003742 <TIM_Base_SetConfig+0x1e>
 8003732:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003736:	4290      	cmp	r0, r2
 8003738:	d003      	beq.n	8003742 <TIM_Base_SetConfig+0x1e>
 800373a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800373e:	4290      	cmp	r0, r2
 8003740:	d115      	bne.n	800376e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003742:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003748:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	4a11      	ldr	r2, [pc, #68]	; (8003790 <TIM_Base_SetConfig+0x6c>)
 800374c:	4290      	cmp	r0, r2
 800374e:	d00a      	beq.n	8003766 <TIM_Base_SetConfig+0x42>
 8003750:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003754:	d007      	beq.n	8003766 <TIM_Base_SetConfig+0x42>
 8003756:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800375a:	4290      	cmp	r0, r2
 800375c:	d003      	beq.n	8003766 <TIM_Base_SetConfig+0x42>
 800375e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003762:	4290      	cmp	r0, r2
 8003764:	d103      	bne.n	800376e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003766:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800376e:	694a      	ldr	r2, [r1, #20]
 8003770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003774:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003776:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003778:	688b      	ldr	r3, [r1, #8]
 800377a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800377c:	680b      	ldr	r3, [r1, #0]
 800377e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <TIM_Base_SetConfig+0x6c>)
 8003782:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003784:	bf04      	itt	eq
 8003786:	690b      	ldreq	r3, [r1, #16]
 8003788:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378a:	2301      	movs	r3, #1
 800378c:	6143      	str	r3, [r0, #20]
}
 800378e:	4770      	bx	lr
 8003790:	40012c00 	.word	0x40012c00

08003794 <HAL_TIM_Base_Init>:
{
 8003794:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003796:	4604      	mov	r4, r0
 8003798:	b330      	cbz	r0, 80037e8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800379e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a2:	b91b      	cbnz	r3, 80037ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80037a8:	f7fd ffa4 	bl	80016f4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ae:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b4:	1d21      	adds	r1, r4, #4
 80037b6:	f7ff ffb5 	bl	8003724 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ba:	2301      	movs	r3, #1
  return HAL_OK;
 80037bc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80037c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80037ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80037ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80037de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80037e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7fc      	b.n	80037e6 <HAL_TIM_Base_Init+0x52>

080037ec <HAL_TIM_IC_Init>:
{
 80037ec:	b510      	push	{r4, lr}
  if (htim == NULL)
 80037ee:	4604      	mov	r4, r0
 80037f0:	b330      	cbz	r0, 8003840 <HAL_TIM_IC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037fa:	b91b      	cbnz	r3, 8003804 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003800:	f7ff feea 	bl	80035d8 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003806:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	1d21      	adds	r1, r4, #4
 800380e:	f7ff ff89 	bl	8003724 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003812:	2301      	movs	r3, #1
  return HAL_OK;
 8003814:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003816:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800381e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003822:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003826:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800382e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003832:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800383a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800383e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003840:	2001      	movs	r0, #1
 8003842:	e7fc      	b.n	800383e <HAL_TIM_IC_Init+0x52>

08003844 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003844:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003846:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003848:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800384a:	4e12      	ldr	r6, [pc, #72]	; (8003894 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384c:	f024 0401 	bic.w	r4, r4, #1
 8003850:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003852:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003854:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003856:	d019      	beq.n	800388c <TIM_TI1_SetConfig+0x48>
 8003858:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800385c:	d016      	beq.n	800388c <TIM_TI1_SetConfig+0x48>
 800385e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8003862:	42b0      	cmp	r0, r6
 8003864:	d012      	beq.n	800388c <TIM_TI1_SetConfig+0x48>
 8003866:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800386a:	42b0      	cmp	r0, r6
 800386c:	d00e      	beq.n	800388c <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800386e:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003872:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003874:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800387c:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003880:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003884:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003888:	6201      	str	r1, [r0, #32]
}
 800388a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800388c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003890:	4322      	orrs	r2, r4
 8003892:	e7ee      	b.n	8003872 <TIM_TI1_SetConfig+0x2e>
 8003894:	40012c00 	.word	0x40012c00

08003898 <HAL_TIM_IC_ConfigChannel>:
{
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800389a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800389e:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80038a0:	2b01      	cmp	r3, #1
{
 80038a2:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 80038a4:	f000 8088 	beq.w	80039b8 <HAL_TIM_IC_ConfigChannel+0x120>
 80038a8:	2001      	movs	r0, #1
 80038aa:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80038ae:	b98a      	cbnz	r2, 80038d4 <HAL_TIM_IC_ConfigChannel+0x3c>
    TIM_TI1_SetConfig(htim->Instance,
 80038b0:	6828      	ldr	r0, [r5, #0]
 80038b2:	68cb      	ldr	r3, [r1, #12]
 80038b4:	c906      	ldmia	r1, {r1, r2}
 80038b6:	f7ff ffc5 	bl	8003844 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038ba:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038bc:	68a2      	ldr	r2, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038be:	f023 030c 	bic.w	r3, r3, #12
 80038c2:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038c4:	6983      	ldr	r3, [r0, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80038cc:	2300      	movs	r3, #0
 80038ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80038d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80038d4:	2a04      	cmp	r2, #4
 80038d6:	d124      	bne.n	8003922 <HAL_TIM_IC_ConfigChannel+0x8a>
                      sConfig->ICSelection,
 80038d8:	e9d1 2700 	ldrd	r2, r7, [r1]
    TIM_TI2_SetConfig(htim->Instance,
 80038dc:	682b      	ldr	r3, [r5, #0]
                      sConfig->ICFilter);
 80038de:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038e0:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e2:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038e4:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e6:	f020 0010 	bic.w	r0, r0, #16
 80038ea:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ec:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038ee:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038f0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038f4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f8:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038fc:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038fe:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003900:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003904:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003908:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800390c:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800390e:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003910:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003912:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003916:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800391e:	619a      	str	r2, [r3, #24]
 8003920:	e7d3      	b.n	80038ca <HAL_TIM_IC_ConfigChannel+0x32>
  else if (Channel == TIM_CHANNEL_3)
 8003922:	2a08      	cmp	r2, #8
 8003924:	d122      	bne.n	800396c <HAL_TIM_IC_ConfigChannel+0xd4>
                      sConfig->ICSelection,
 8003926:	e9d1 2000 	ldrd	r2, r0, [r1]
    TIM_TI3_SetConfig(htim->Instance,
 800392a:	682b      	ldr	r3, [r5, #0]
                      sConfig->ICFilter);
 800392c:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800392e:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003930:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003932:	0109      	lsls	r1, r1, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003934:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8003938:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800393a:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800393c:	b2c9      	uxtb	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800393e:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 8003942:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003944:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003948:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800394a:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800394c:	f402 7200 	and.w	r2, r2, #512	; 0x200
  tmpccer &= ~(TIM_CCER_CC3P);
 8003950:	f426 7000 	bic.w	r0, r6, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003954:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003956:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8003958:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800395a:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800395c:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800395e:	f022 020c 	bic.w	r2, r2, #12
 8003962:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003968:	61da      	str	r2, [r3, #28]
 800396a:	e7ae      	b.n	80038ca <HAL_TIM_IC_ConfigChannel+0x32>
  else if (Channel == TIM_CHANNEL_4)
 800396c:	2a0c      	cmp	r2, #12
 800396e:	d1ad      	bne.n	80038cc <HAL_TIM_IC_ConfigChannel+0x34>
                      sConfig->ICSelection,
 8003970:	e9d1 2700 	ldrd	r2, r7, [r1]
    TIM_TI4_SetConfig(htim->Instance,
 8003974:	682b      	ldr	r3, [r5, #0]
                      sConfig->ICFilter);
 8003976:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003978:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800397a:	6a18      	ldr	r0, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800397c:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800397e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003982:	6218      	str	r0, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003984:	69d8      	ldr	r0, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003986:	b289      	uxth	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003988:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800398c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003990:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003994:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003996:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003998:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
  tmpccer &= ~(TIM_CCER_CC4P);
 800399c:	f426 5000 	bic.w	r0, r6, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80039a0:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039a2:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039a4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039a6:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039a8:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ae:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039b6:	e7d7      	b.n	8003968 <HAL_TIM_IC_ConfigChannel+0xd0>
  __HAL_LOCK(htim);
 80039b8:	2002      	movs	r0, #2
 80039ba:	e78a      	b.n	80038d2 <HAL_TIM_IC_ConfigChannel+0x3a>

080039bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039bc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039be:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80039ca:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039cc:	6082      	str	r2, [r0, #8]
}
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <HAL_TIM_ConfigClockSource>:
{
 80039d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80039d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80039d6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80039d8:	2b01      	cmp	r3, #1
 80039da:	f04f 0002 	mov.w	r0, #2
 80039de:	f000 808e 	beq.w	8003afe <HAL_TIM_ConfigClockSource+0x12e>
 80039e2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80039e8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80039ea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80039ee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80039f8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80039fa:	680b      	ldr	r3, [r1, #0]
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d04f      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0xd0>
 8003a00:	d832      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x98>
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d064      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0x100>
 8003a06:	d816      	bhi.n	8003a36 <HAL_TIM_ConfigClockSource+0x66>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d00d      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x58>
 8003a0c:	d80a      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x54>
 8003a0e:	f033 0110 	bics.w	r1, r3, #16
 8003a12:	d009      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003a20:	4610      	mov	r0, r2
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003a24:	2b30      	cmp	r3, #48	; 0x30
 8003a26:	d1f5      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003a28:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 0307 	orr.w	r3, r3, #7
 8003a34:	e028      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003a36:	2b50      	cmp	r3, #80	; 0x50
 8003a38:	d1ec      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a3e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a40:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a42:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003a4e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003a58:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a5a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a5c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a62:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003a66:	e00f      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	d00d      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0xba>
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a72:	d00c      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0xbe>
 8003a74:	2b70      	cmp	r3, #112	; 0x70
 8003a76:	d1cd      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	68cb      	ldr	r3, [r1, #12]
 8003a7a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a7e:	f7ff ff9d 	bl	80039bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a82:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8003a88:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	e7c2      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a8e:	68cb      	ldr	r3, [r1, #12]
 8003a90:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a94:	f7ff ff92 	bl	80039bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a98:	6883      	ldr	r3, [r0, #8]
 8003a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9e:	e7f3      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8003aa0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa2:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003aa4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa6:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8003aaa:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aac:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003abc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ac2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ac4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aca:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003ace:	e7db      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8003ad0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ad4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003ae4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003aee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003af0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003af2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003af8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003afc:	e7c4      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8003afe:	4602      	mov	r2, r0
 8003b00:	e78e      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x50>

08003b02 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b02:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b04:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b06:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b08:	f001 011f 	and.w	r1, r1, #31
 8003b0c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003b0e:	ea23 0304 	bic.w	r3, r3, r4
 8003b12:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b14:	6a03      	ldr	r3, [r0, #32]
 8003b16:	408a      	lsls	r2, r1
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	6202      	str	r2, [r0, #32]
}
 8003b1c:	bd10      	pop	{r4, pc}
	...

08003b20 <HAL_TIM_IC_Start_IT>:
{
 8003b20:	b508      	push	{r3, lr}
 8003b22:	4603      	mov	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b24:	bb91      	cbnz	r1, 8003b8c <HAL_TIM_IC_Start_IT+0x6c>
 8003b26:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b2a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b2e:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b30:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b32:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b34:	d161      	bne.n	8003bfa <HAL_TIM_IC_Start_IT+0xda>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b36:	2a01      	cmp	r2, #1
 8003b38:	d160      	bne.n	8003bfc <HAL_TIM_IC_Start_IT+0xdc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	2900      	cmp	r1, #0
 8003b3e:	d13b      	bne.n	8003bb8 <HAL_TIM_IC_Start_IT+0x98>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b40:	6818      	ldr	r0, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b4a:	68c2      	ldr	r2, [r0, #12]
 8003b4c:	f042 0202 	orr.w	r2, r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b50:	60c2      	str	r2, [r0, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f7ff ffd4 	bl	8003b02 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_TIM_IC_Start_IT+0xe0>)
 8003b5c:	4298      	cmp	r0, r3
 8003b5e:	d00a      	beq.n	8003b76 <HAL_TIM_IC_Start_IT+0x56>
 8003b60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b64:	d007      	beq.n	8003b76 <HAL_TIM_IC_Start_IT+0x56>
 8003b66:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8003b6a:	4298      	cmp	r0, r3
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IC_Start_IT+0x56>
 8003b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b72:	4298      	cmp	r0, r3
 8003b74:	d104      	bne.n	8003b80 <HAL_TIM_IC_Start_IT+0x60>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b76:	6883      	ldr	r3, [r0, #8]
 8003b78:	f003 0307 	and.w	r3, r3, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IC_Start_IT+0x68>
      __HAL_TIM_ENABLE(htim);
 8003b80:	6803      	ldr	r3, [r0, #0]
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6003      	str	r3, [r0, #0]
 8003b88:	2000      	movs	r0, #0
 8003b8a:	e037      	b.n	8003bfc <HAL_TIM_IC_Start_IT+0xdc>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b8c:	2904      	cmp	r1, #4
 8003b8e:	d105      	bne.n	8003b9c <HAL_TIM_IC_Start_IT+0x7c>
 8003b90:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b94:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b98:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b9a:	e7c9      	b.n	8003b30 <HAL_TIM_IC_Start_IT+0x10>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b9c:	2908      	cmp	r1, #8
 8003b9e:	bf0b      	itete	eq
 8003ba0:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 8003ba4:	f893 0041 	ldrbne.w	r0, [r3, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ba8:	f893 2044 	ldrbeq.w	r2, [r3, #68]	; 0x44
 8003bac:	f893 2045 	ldrbne.w	r2, [r3, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003bb0:	bf0c      	ite	eq
 8003bb2:	b2c0      	uxtbeq	r0, r0
 8003bb4:	b2c0      	uxtbne	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003bb6:	e7bb      	b.n	8003b30 <HAL_TIM_IC_Start_IT+0x10>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb8:	2904      	cmp	r1, #4
 8003bba:	d108      	bne.n	8003bce <HAL_TIM_IC_Start_IT+0xae>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003bbc:	6818      	ldr	r0, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003bc6:	68c2      	ldr	r2, [r0, #12]
 8003bc8:	f042 0204 	orr.w	r2, r2, #4
 8003bcc:	e7c0      	b.n	8003b50 <HAL_TIM_IC_Start_IT+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bce:	2908      	cmp	r1, #8
 8003bd0:	d108      	bne.n	8003be4 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bd2:	6818      	ldr	r0, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bdc:	68c2      	ldr	r2, [r0, #12]
 8003bde:	f042 0208 	orr.w	r2, r2, #8
 8003be2:	e7b5      	b.n	8003b50 <HAL_TIM_IC_Start_IT+0x30>
  switch (Channel)
 8003be4:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  switch (Channel)
 8003bee:	d105      	bne.n	8003bfc <HAL_TIM_IC_Start_IT+0xdc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	68c2      	ldr	r2, [r0, #12]
 8003bf4:	f042 0210 	orr.w	r2, r2, #16
 8003bf8:	e7aa      	b.n	8003b50 <HAL_TIM_IC_Start_IT+0x30>
    return HAL_ERROR;
 8003bfa:	2001      	movs	r0, #1
}
 8003bfc:	bd08      	pop	{r3, pc}
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003c0a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f04f 0002 	mov.w	r0, #2
 8003c12:	d022      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c14:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c16:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003c1a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c1e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c22:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c26:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c28:	4c0c      	ldr	r4, [pc, #48]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003c2a:	42a3      	cmp	r3, r4
 8003c2c:	d00a      	beq.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d007      	beq.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003c34:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003c3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	d104      	bne.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c44:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c46:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c4c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c4e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003c50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c52:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c56:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003c5a:	bd30      	pop	{r4, r5, pc}
 8003c5c:	40012c00 	.word	0x40012c00

08003c60 <HAL_TIMEx_CommutCallback>:
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIMEx_BreakCallback>:
 8003c62:	4770      	bx	lr

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c68:	6803      	ldr	r3, [r0, #0]
 8003c6a:	68c1      	ldr	r1, [r0, #12]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003c72:	430a      	orrs	r2, r1
 8003c74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c76:	6882      	ldr	r2, [r0, #8]
 8003c78:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003c7a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c7c:	4302      	orrs	r2, r0
 8003c7e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003c80:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003c84:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c88:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	69a1      	ldr	r1, [r4, #24]
 8003c92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c96:	430a      	orrs	r2, r1
 8003c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <UART_SetConfig+0x70>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d115      	bne.n	8003ccc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7ff fbe6 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca4:	2319      	movs	r3, #25
 8003ca6:	4343      	muls	r3, r0
 8003ca8:	6862      	ldr	r2, [r4, #4]
 8003caa:	6820      	ldr	r0, [r4, #0]
 8003cac:	0092      	lsls	r2, r2, #2
 8003cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb2:	2264      	movs	r2, #100	; 0x64
 8003cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cb8:	fb02 3311 	mls	r3, r2, r1, r3
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	3332      	adds	r3, #50	; 0x32
 8003cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003cc8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cca:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7ff fbc0 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	e7e8      	b.n	8003ca4 <UART_SetConfig+0x40>
 8003cd2:	bf00      	nop
 8003cd4:	40013800 	.word	0x40013800

08003cd8 <HAL_UART_Init>:
{
 8003cd8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003cda:	4604      	mov	r4, r0
 8003cdc:	b348      	cbz	r0, 8003d32 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ce6:	b91b      	cbnz	r3, 8003cf0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003ce8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003cec:	f7fd fd38 	bl	8001760 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003cf2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003cf8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cfa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d00:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d02:	f7ff ffaf 	bl	8003c64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d18:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d20:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003d22:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003d30:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d32:	2001      	movs	r0, #1
 8003d34:	e7fc      	b.n	8003d30 <HAL_UART_Init+0x58>

08003d36 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d36:	b084      	sub	sp, #16
 8003d38:	a801      	add	r0, sp, #4
 8003d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003d3e:	b004      	add	sp, #16
 8003d40:	2000      	movs	r0, #0
 8003d42:	4770      	bx	lr

08003d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d44:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d46:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003d54:	4770      	bx	lr

08003d56 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d56:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003d5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d5e:	045b      	lsls	r3, r3, #17
 8003d60:	0c5b      	lsrs	r3, r3, #17
 8003d62:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003d66:	2000      	movs	r0, #0
 8003d68:	4770      	bx	lr

08003d6a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	4770      	bx	lr

08003d6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d6e:	b084      	sub	sp, #16
 8003d70:	b510      	push	{r4, lr}
 8003d72:	4604      	mov	r4, r0
 8003d74:	a803      	add	r0, sp, #12
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d7a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8003d82:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d86:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d8a:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8003d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d92:	b004      	add	sp, #16
 8003d94:	4770      	bx	lr
	...

08003d98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d9a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003d9c:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d9e:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8003da2:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003da4:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8003da8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8003dac:	0424      	lsls	r4, r4, #16
 8003dae:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8003db0:	2d03      	cmp	r5, #3
 8003db2:	d84b      	bhi.n	8003e4c <USB_ActivateEndpoint+0xb4>
 8003db4:	e8df f005 	tbb	[pc, r5]
 8003db8:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8003dbc:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dbe:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dc2:	f248 0680 	movw	r6, #32896	; 0x8080
 8003dc6:	4334      	orrs	r4, r6
 8003dc8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dcc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003dd0:	4f9e      	ldr	r7, [pc, #632]	; (800404c <USB_ActivateEndpoint+0x2b4>)
 8003dd2:	b2a4      	uxth	r4, r4
 8003dd4:	403c      	ands	r4, r7
 8003dd6:	4314      	orrs	r4, r2
 8003dd8:	4334      	orrs	r4, r6
 8003dda:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8003dde:	7b0c      	ldrb	r4, [r1, #12]
 8003de0:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	f040 808b 	bne.w	8003f00 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dea:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8003dec:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dee:	0864      	lsrs	r4, r4, #1
 8003df0:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8003df2:	b36e      	cbz	r6, 8003e50 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003df4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003df8:	b289      	uxth	r1, r1
 8003dfa:	4461      	add	r1, ip
 8003dfc:	f8a1 4400 	strh.w	r4, [r1, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e00:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003e04:	0649      	lsls	r1, r1, #25
 8003e06:	d509      	bpl.n	8003e1c <USB_ActivateEndpoint+0x84>
 8003e08:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003e0c:	b289      	uxth	r1, r1
 8003e0e:	4039      	ands	r1, r7
 8003e10:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003e14:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003e18:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e1c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003e20:	4c8b      	ldr	r4, [pc, #556]	; (8004050 <USB_ActivateEndpoint+0x2b8>)
 8003e22:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003e24:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e26:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003e2a:	d001      	beq.n	8003e30 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e2c:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e30:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003e34:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003e38:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8003e3c:	e04a      	b.n	8003ed4 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e3e:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003e42:	2000      	movs	r0, #0
      break;
 8003e44:	e7bd      	b.n	8003dc2 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e46:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8003e4a:	e7fa      	b.n	8003e42 <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	e7b8      	b.n	8003dc2 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e50:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e54:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e56:	b2ad      	uxth	r5, r5
 8003e58:	4465      	add	r5, ip
 8003e5a:	f8a5 4408 	strh.w	r4, [r5, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e5e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003e62:	293e      	cmp	r1, #62	; 0x3e
 8003e64:	b2a4      	uxth	r4, r4
 8003e66:	4464      	add	r4, ip
 8003e68:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8003e6c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003e70:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 8003e74:	d92f      	bls.n	8003ed6 <USB_ActivateEndpoint+0x13e>
 8003e76:	094d      	lsrs	r5, r1, #5
 8003e78:	06ce      	lsls	r6, r1, #27
 8003e7a:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8003e7e:	bf08      	it	eq
 8003e80:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8003e84:	b289      	uxth	r1, r1
 8003e86:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8003e8a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003e8e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003e92:	b289      	uxth	r1, r1
 8003e94:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e98:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003e9c:	044f      	lsls	r7, r1, #17
 8003e9e:	d50d      	bpl.n	8003ebc <USB_ActivateEndpoint+0x124>
 8003ea0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003ea4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003ea8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003eac:	0409      	lsls	r1, r1, #16
 8003eae:	0c09      	lsrs	r1, r1, #16
 8003eb0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003eb4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003eb8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8003ebc:	4c65      	ldr	r4, [pc, #404]	; (8004054 <USB_ActivateEndpoint+0x2bc>)
 8003ebe:	b9c2      	cbnz	r2, 8003ef2 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	4022      	ands	r2, r4
 8003ec6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ed6:	b911      	cbnz	r1, 8003ede <USB_ActivateEndpoint+0x146>
 8003ed8:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8003edc:	e7d5      	b.n	8003e8a <USB_ActivateEndpoint+0xf2>
 8003ede:	084d      	lsrs	r5, r1, #1
 8003ee0:	07c9      	lsls	r1, r1, #31
 8003ee2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8003ee6:	bf48      	it	mi
 8003ee8:	3501      	addmi	r5, #1
 8003eea:	b289      	uxth	r1, r1
 8003eec:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8003ef0:	e7cf      	b.n	8003e92 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ef2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003ef6:	b289      	uxth	r1, r1
 8003ef8:	4021      	ands	r1, r4
 8003efa:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8003efe:	e797      	b.n	8003e30 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8003f00:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f02:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003f06:	d15b      	bne.n	8003fc0 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f08:	b2a4      	uxth	r4, r4
 8003f0a:	403c      	ands	r4, r7
 8003f0c:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003f10:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003f14:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f18:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003f1c:	890e      	ldrh	r6, [r1, #8]
 8003f1e:	b2a4      	uxth	r4, r4
 8003f20:	0876      	lsrs	r6, r6, #1
 8003f22:	4464      	add	r4, ip
 8003f24:	0076      	lsls	r6, r6, #1
 8003f26:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8003f2a:	894e      	ldrh	r6, [r1, #10]
 8003f2c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003f30:	0876      	lsrs	r6, r6, #1
 8003f32:	b2a4      	uxth	r4, r4
 8003f34:	4464      	add	r4, ip
 8003f36:	0076      	lsls	r6, r6, #1
 8003f38:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8003f3c:	7849      	ldrb	r1, [r1, #1]
 8003f3e:	2900      	cmp	r1, #0
 8003f40:	d148      	bne.n	8003fd4 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f42:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f46:	044e      	lsls	r6, r1, #17
 8003f48:	d50d      	bpl.n	8003f66 <USB_ActivateEndpoint+0x1ce>
 8003f4a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f4e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003f52:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003f56:	0409      	lsls	r1, r1, #16
 8003f58:	0c09      	lsrs	r1, r1, #16
 8003f5a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003f5e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003f62:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f66:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f6a:	064d      	lsls	r5, r1, #25
 8003f6c:	d50d      	bpl.n	8003f8a <USB_ActivateEndpoint+0x1f2>
 8003f6e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f72:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003f76:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003f7a:	0409      	lsls	r1, r1, #16
 8003f7c:	0c09      	lsrs	r1, r1, #16
 8003f7e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003f82:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003f86:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f8a:	f248 0480 	movw	r4, #32896	; 0x8080
 8003f8e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f92:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003f96:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003f9a:	0409      	lsls	r1, r1, #16
 8003f9c:	0c09      	lsrs	r1, r1, #16
 8003f9e:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8003fa2:	4321      	orrs	r1, r4
 8003fa4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fa8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003fac:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003fb0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003fb4:	0409      	lsls	r1, r1, #16
 8003fb6:	0c09      	lsrs	r1, r1, #16
 8003fb8:	430c      	orrs	r4, r1
 8003fba:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8003fbe:	e789      	b.n	8003ed4 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003fc0:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 8003fc4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8003fc8:	0424      	lsls	r4, r4, #16
 8003fca:	0c24      	lsrs	r4, r4, #16
 8003fcc:	4326      	orrs	r6, r4
 8003fce:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8003fd2:	e7a1      	b.n	8003f18 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fd4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003fd8:	044c      	lsls	r4, r1, #17
 8003fda:	d50d      	bpl.n	8003ff8 <USB_ActivateEndpoint+0x260>
 8003fdc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003fe0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003fe4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003fe8:	0409      	lsls	r1, r1, #16
 8003fea:	0c09      	lsrs	r1, r1, #16
 8003fec:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003ff0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003ff4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ff8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003ffc:	0649      	lsls	r1, r1, #25
 8003ffe:	d50d      	bpl.n	800401c <USB_ActivateEndpoint+0x284>
 8004000:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004004:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004008:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800400c:	0409      	lsls	r1, r1, #16
 800400e:	0c09      	lsrs	r1, r1, #16
 8004010:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004014:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004018:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800401c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004020:	4c0b      	ldr	r4, [pc, #44]	; (8004050 <USB_ActivateEndpoint+0x2b8>)
 8004022:	b289      	uxth	r1, r1
 8004024:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004026:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004028:	bf18      	it	ne
 800402a:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800402e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004032:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004036:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800403a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800403e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004042:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004046:	0409      	lsls	r1, r1, #16
 8004048:	0c09      	lsrs	r1, r1, #16
 800404a:	e6f1      	b.n	8003e30 <USB_ActivateEndpoint+0x98>
 800404c:	ffff8f8f 	.word	0xffff8f8f
 8004050:	ffff8fbf 	.word	0xffff8fbf
 8004054:	ffffbf8f 	.word	0xffffbf8f

08004058 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004058:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800405a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 800405c:	7b09      	ldrb	r1, [r1, #12]
 800405e:	bbd9      	cbnz	r1, 80040d8 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004060:	b30a      	cbz	r2, 80040a6 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004062:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004066:	0651      	lsls	r1, r2, #25
 8004068:	d50d      	bpl.n	8004086 <USB_DeactivateEndpoint+0x2e>
 800406a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800406e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004076:	0412      	lsls	r2, r2, #16
 8004078:	0c12      	lsrs	r2, r2, #16
 800407a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004082:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004086:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800408a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800408e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004092:	0412      	lsls	r2, r2, #16
 8004094:	0c12      	lsrs	r2, r2, #16
 8004096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800409e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80040a2:	2000      	movs	r0, #0
 80040a4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80040aa:	0452      	lsls	r2, r2, #17
 80040ac:	d50d      	bpl.n	80040ca <USB_DeactivateEndpoint+0x72>
 80040ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80040b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80040b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040ba:	0412      	lsls	r2, r2, #16
 80040bc:	0c12      	lsrs	r2, r2, #16
 80040be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80040c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80040ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040d6:	e7dc      	b.n	8004092 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80040d8:	2a00      	cmp	r2, #0
 80040da:	d14a      	bne.n	8004172 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80040e0:	0451      	lsls	r1, r2, #17
 80040e2:	d50d      	bpl.n	8004100 <USB_DeactivateEndpoint+0xa8>
 80040e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80040e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80040ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040f0:	0412      	lsls	r2, r2, #16
 80040f2:	0c12      	lsrs	r2, r2, #16
 80040f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80040f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040fc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004100:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004104:	0652      	lsls	r2, r2, #25
 8004106:	d50d      	bpl.n	8004124 <USB_DeactivateEndpoint+0xcc>
 8004108:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800410c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004110:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004114:	0412      	lsls	r2, r2, #16
 8004116:	0c12      	lsrs	r2, r2, #16
 8004118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800411c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004120:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004124:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004128:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800412c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004130:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004134:	0412      	lsls	r2, r2, #16
 8004136:	0c12      	lsrs	r2, r2, #16
 8004138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004140:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004144:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800414c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004150:	0412      	lsls	r2, r2, #16
 8004152:	0c12      	lsrs	r2, r2, #16
 8004154:	430a      	orrs	r2, r1
 8004156:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800415a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800415e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004166:	0412      	lsls	r2, r2, #16
 8004168:	0c12      	lsrs	r2, r2, #16
 800416a:	4311      	orrs	r1, r2
 800416c:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8004170:	e797      	b.n	80040a2 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004172:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004176:	0451      	lsls	r1, r2, #17
 8004178:	d50d      	bpl.n	8004196 <USB_DeactivateEndpoint+0x13e>
 800417a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800417e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004182:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004186:	0412      	lsls	r2, r2, #16
 8004188:	0c12      	lsrs	r2, r2, #16
 800418a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800418e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004192:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004196:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800419a:	0652      	lsls	r2, r2, #25
 800419c:	d50d      	bpl.n	80041ba <USB_DeactivateEndpoint+0x162>
 800419e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041a2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041aa:	0412      	lsls	r2, r2, #16
 80041ac:	0c12      	lsrs	r2, r2, #16
 80041ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80041b6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ba:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80041be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041ca:	0412      	lsls	r2, r2, #16
 80041cc:	0c12      	lsrs	r2, r2, #16
 80041ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80041d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e6:	0412      	lsls	r2, r2, #16
 80041e8:	0c12      	lsrs	r2, r2, #16
 80041ea:	430a      	orrs	r2, r1
 80041ec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041fc:	e7b3      	b.n	8004166 <USB_DeactivateEndpoint+0x10e>

080041fe <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80041fe:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004200:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8004202:	b18b      	cbz	r3, 8004228 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004204:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004224:	2000      	movs	r0, #0
 8004226:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004228:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800422c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800423c:	e7ec      	b.n	8004218 <USB_EPSetStall+0x1a>

0800423e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800423e:	7b0b      	ldrb	r3, [r1, #12]
 8004240:	bb3b      	cbnz	r3, 8004292 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8004242:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004244:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004246:	b333      	cbz	r3, 8004296 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004248:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800424c:	065b      	lsls	r3, r3, #25
 800424e:	d50d      	bpl.n	800426c <USB_EPClearStall+0x2e>
 8004250:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004268:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800426c:	78cb      	ldrb	r3, [r1, #3]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d00f      	beq.n	8004292 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004272:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004292:	2000      	movs	r0, #0
 8004294:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004296:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800429a:	045b      	lsls	r3, r3, #17
 800429c:	d50d      	bpl.n	80042ba <USB_EPClearStall+0x7c>
 800429e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80042ce:	e7da      	b.n	8004286 <USB_EPClearStall+0x48>

080042d0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80042d0:	b911      	cbnz	r1, 80042d8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80042d8:	2000      	movs	r0, #0
 80042da:	4770      	bx	lr

080042dc <USB_DevConnect>:
 80042dc:	2000      	movs	r0, #0
 80042de:	4770      	bx	lr

080042e0 <USB_DevDisconnect>:
 80042e0:	2000      	movs	r0, #0
 80042e2:	4770      	bx	lr

080042e4 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80042e4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80042e8:	b280      	uxth	r0, r0
 80042ea:	4770      	bx	lr

080042ec <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80042ec:	2000      	movs	r0, #0
 80042ee:	4770      	bx	lr

080042f0 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042f0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80042f4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042f6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8004300:	4283      	cmp	r3, r0
 8004302:	d100      	bne.n	8004306 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004304:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004306:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800430a:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800430e:	e7f7      	b.n	8004300 <USB_WritePMA+0x10>

08004310 <USB_EPStartXfer>:
{
 8004310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004314:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8004316:	7849      	ldrb	r1, [r1, #1]
{
 8004318:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800431a:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 800431c:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800431e:	f040 8118 	bne.w	8004552 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8004322:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004326:	69a7      	ldr	r7, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004328:	6961      	ldr	r1, [r4, #20]
 800432a:	454f      	cmp	r7, r9
 800432c:	bf28      	it	cs
 800432e:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8004330:	bb0a      	cbnz	r2, 8004376 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004332:	b2bf      	uxth	r7, r7
 8004334:	88e2      	ldrh	r2, [r4, #6]
 8004336:	463b      	mov	r3, r7
 8004338:	f7ff ffda 	bl	80042f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800433c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004340:	7821      	ldrb	r1, [r4, #0]
 8004342:	b280      	uxth	r0, r0
 8004344:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004348:	0109      	lsls	r1, r1, #4
 800434a:	4402      	add	r2, r0
 800434c:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800434e:	7822      	ldrb	r2, [r4, #0]
 8004350:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8004364:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8004372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8004376:	78e3      	ldrb	r3, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004378:	f894 e000 	ldrb.w	lr, [r4]
      if (ep->type == EP_TYPE_BULK)
 800437c:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800437e:	6a26      	ldr	r6, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004380:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8004384:	f040 80d0 	bne.w	8004528 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8004388:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800438a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800438e:	f080 80b4 	bcs.w	80044fa <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004392:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004396:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800439a:	0412      	lsls	r2, r2, #16
 800439c:	0c12      	lsrs	r2, r2, #16
 800439e:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80043a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043a6:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043aa:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043ae:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 80043b2:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043b4:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 80043b8:	6226      	str	r6, [r4, #32]
            ep->xfer_buff += len;
 80043ba:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043be:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043c0:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043c4:	d04e      	beq.n	8004464 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043c6:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80043ca:	4472      	add	r2, lr
 80043cc:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043d0:	8962      	ldrh	r2, [r4, #10]
 80043d2:	f7ff ff8d 	bl	80042f0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80043d6:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80043d8:	bf36      	itet	cc
 80043da:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80043dc:	2300      	movcs	r3, #0
 80043de:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043e0:	7862      	ldrb	r2, [r4, #1]
 80043e2:	6223      	str	r3, [r4, #32]
            ep->xfer_buff += len;
 80043e4:	f8c4 a014 	str.w	sl, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043e8:	b2b3      	uxth	r3, r6
 80043ea:	bb7a      	cbnz	r2, 800444c <USB_EPStartXfer+0x13c>
 80043ec:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80043f0:	7820      	ldrb	r0, [r4, #0]
 80043f2:	b292      	uxth	r2, r2
 80043f4:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80043f8:	0100      	lsls	r0, r0, #4
 80043fa:	4411      	add	r1, r2
 80043fc:	5a42      	ldrh	r2, [r0, r1]
 80043fe:	2e3e      	cmp	r6, #62	; 0x3e
 8004400:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004404:	5242      	strh	r2, [r0, r1]
 8004406:	d915      	bls.n	8004434 <USB_EPStartXfer+0x124>
 8004408:	06f2      	lsls	r2, r6, #27
 800440a:	5a42      	ldrh	r2, [r0, r1]
 800440c:	ea4f 1756 	mov.w	r7, r6, lsr #5
 8004410:	bf08      	it	eq
 8004412:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8004416:	b292      	uxth	r2, r2
 8004418:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800441c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004420:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004424:	b292      	uxth	r2, r2
 8004426:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004428:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800442a:	4651      	mov	r1, sl
 800442c:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800442e:	f7ff ff5f 	bl	80042f0 <USB_WritePMA>
 8004432:	e78c      	b.n	800434e <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004434:	b90e      	cbnz	r6, 800443a <USB_EPStartXfer+0x12a>
 8004436:	5a42      	ldrh	r2, [r0, r1]
 8004438:	e7f0      	b.n	800441c <USB_EPStartXfer+0x10c>
 800443a:	5a42      	ldrh	r2, [r0, r1]
 800443c:	0877      	lsrs	r7, r6, #1
 800443e:	07f6      	lsls	r6, r6, #31
 8004440:	bf48      	it	mi
 8004442:	3701      	addmi	r7, #1
 8004444:	b292      	uxth	r2, r2
 8004446:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800444a:	e7eb      	b.n	8004424 <USB_EPStartXfer+0x114>
 800444c:	2a01      	cmp	r2, #1
 800444e:	d1eb      	bne.n	8004428 <USB_EPStartXfer+0x118>
 8004450:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004454:	7821      	ldrb	r1, [r4, #0]
 8004456:	b280      	uxth	r0, r0
 8004458:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800445c:	0109      	lsls	r1, r1, #4
 800445e:	4402      	add	r2, r0
 8004460:	528b      	strh	r3, [r1, r2]
 8004462:	e7e1      	b.n	8004428 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004464:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004468:	4472      	add	r2, lr
 800446a:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800446e:	8922      	ldrh	r2, [r4, #8]
 8004470:	f7ff ff3e 	bl	80042f0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004474:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8004476:	bf36      	itet	cc
 8004478:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800447a:	4643      	movcs	r3, r8
 800447c:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800447e:	7862      	ldrb	r2, [r4, #1]
 8004480:	6223      	str	r3, [r4, #32]
            ep->xfer_buff += len;
 8004482:	f8c4 a014 	str.w	sl, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004486:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004488:	bb5a      	cbnz	r2, 80044e2 <USB_EPStartXfer+0x1d2>
 800448a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800448e:	7820      	ldrb	r0, [r4, #0]
 8004490:	b292      	uxth	r2, r2
 8004492:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8004496:	0100      	lsls	r0, r0, #4
 8004498:	4411      	add	r1, r2
 800449a:	5a42      	ldrh	r2, [r0, r1]
 800449c:	2e3e      	cmp	r6, #62	; 0x3e
 800449e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80044a2:	5242      	strh	r2, [r0, r1]
 80044a4:	d911      	bls.n	80044ca <USB_EPStartXfer+0x1ba>
 80044a6:	06f2      	lsls	r2, r6, #27
 80044a8:	5a42      	ldrh	r2, [r0, r1]
 80044aa:	ea4f 1756 	mov.w	r7, r6, lsr #5
 80044ae:	bf08      	it	eq
 80044b0:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80044b4:	b292      	uxth	r2, r2
 80044b6:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80044ba:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80044be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80044c2:	b292      	uxth	r2, r2
 80044c4:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044c6:	8962      	ldrh	r2, [r4, #10]
 80044c8:	e7af      	b.n	800442a <USB_EPStartXfer+0x11a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044ca:	b90e      	cbnz	r6, 80044d0 <USB_EPStartXfer+0x1c0>
 80044cc:	5a42      	ldrh	r2, [r0, r1]
 80044ce:	e7f4      	b.n	80044ba <USB_EPStartXfer+0x1aa>
 80044d0:	5a42      	ldrh	r2, [r0, r1]
 80044d2:	0877      	lsrs	r7, r6, #1
 80044d4:	07f6      	lsls	r6, r6, #31
 80044d6:	bf48      	it	mi
 80044d8:	3701      	addmi	r7, #1
 80044da:	b292      	uxth	r2, r2
 80044dc:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80044e0:	e7ef      	b.n	80044c2 <USB_EPStartXfer+0x1b2>
 80044e2:	2a01      	cmp	r2, #1
 80044e4:	d1ef      	bne.n	80044c6 <USB_EPStartXfer+0x1b6>
 80044e6:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80044ea:	7821      	ldrb	r1, [r4, #0]
 80044ec:	b280      	uxth	r0, r0
 80044ee:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80044f2:	0109      	lsls	r1, r1, #4
 80044f4:	4402      	add	r2, r0
 80044f6:	528b      	strh	r3, [r1, r2]
 80044f8:	e7e5      	b.n	80044c6 <USB_EPStartXfer+0x1b6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80044fa:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80044fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004502:	0412      	lsls	r2, r2, #16
 8004504:	0c12      	lsrs	r2, r2, #16
 8004506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800450a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800450e:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004512:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004516:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800451a:	b29b      	uxth	r3, r3
 800451c:	441a      	add	r2, r3
 800451e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004520:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004524:	8922      	ldrh	r2, [r4, #8]
 8004526:	e782      	b.n	800442e <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004528:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800452c:	1bf6      	subs	r6, r6, r7
 800452e:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004530:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004534:	0652      	lsls	r2, r2, #25
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004536:	b2bb      	uxth	r3, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004538:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800453a:	d506      	bpl.n	800454a <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800453c:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004540:	4432      	add	r2, r6
 8004542:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004546:	8962      	ldrh	r2, [r4, #10]
 8004548:	e771      	b.n	800442e <USB_EPStartXfer+0x11e>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800454a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800454e:	4432      	add	r2, r6
 8004550:	e7e6      	b.n	8004520 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8004552:	b9d2      	cbnz	r2, 800458a <USB_EPStartXfer+0x27a>
      if (ep->xfer_len > ep->maxpacket)
 8004554:	69a3      	ldr	r3, [r4, #24]
 8004556:	6921      	ldr	r1, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004558:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 800455c:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800455e:	bf84      	itt	hi
 8004560:	1a5a      	subhi	r2, r3, r1
 8004562:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004564:	7821      	ldrb	r1, [r4, #0]
 8004566:	61a2      	str	r2, [r4, #24]
 8004568:	b280      	uxth	r0, r0
 800456a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800456e:	0109      	lsls	r1, r1, #4
 8004570:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004572:	5a50      	ldrh	r0, [r2, r1]
 8004574:	2b3e      	cmp	r3, #62	; 0x3e
 8004576:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800457a:	5250      	strh	r0, [r2, r1]
 800457c:	f200 80c5 	bhi.w	800470a <USB_EPStartXfer+0x3fa>
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 80d2 	bne.w	800472a <USB_EPStartXfer+0x41a>
 8004586:	5a53      	ldrh	r3, [r2, r1]
 8004588:	e0c8      	b.n	800471c <USB_EPStartXfer+0x40c>
      if (ep->type == EP_TYPE_BULK)
 800458a:	78e3      	ldrb	r3, [r4, #3]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d17c      	bne.n	800468a <USB_EPStartXfer+0x37a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004590:	2900      	cmp	r1, #0
 8004592:	d14b      	bne.n	800462c <USB_EPStartXfer+0x31c>
 8004594:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004598:	7820      	ldrb	r0, [r4, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80045a0:	0100      	lsls	r0, r0, #4
 80045a2:	4419      	add	r1, r3
 80045a4:	5a43      	ldrh	r3, [r0, r1]
 80045a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045aa:	5243      	strh	r3, [r0, r1]
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	2b3e      	cmp	r3, #62	; 0x3e
 80045b0:	d920      	bls.n	80045f4 <USB_EPStartXfer+0x2e4>
 80045b2:	5a42      	ldrh	r2, [r0, r1]
 80045b4:	095e      	lsrs	r6, r3, #5
 80045b6:	06df      	lsls	r7, r3, #27
 80045b8:	bf08      	it	eq
 80045ba:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 80045be:	b292      	uxth	r2, r2
 80045c0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80045c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80045c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80045cc:	b292      	uxth	r2, r2
 80045ce:	5242      	strh	r2, [r0, r1]
 80045d0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80045d4:	7822      	ldrb	r2, [r4, #0]
 80045d6:	b280      	uxth	r0, r0
 80045d8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80045dc:	0112      	lsls	r2, r2, #4
 80045de:	4401      	add	r1, r0
 80045e0:	5a50      	ldrh	r0, [r2, r1]
 80045e2:	2b3e      	cmp	r3, #62	; 0x3e
 80045e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80045e8:	5250      	strh	r0, [r2, r1]
 80045ea:	d810      	bhi.n	800460e <USB_EPStartXfer+0x2fe>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d143      	bne.n	8004678 <USB_EPStartXfer+0x368>
 80045f0:	5a53      	ldrh	r3, [r2, r1]
 80045f2:	e015      	b.n	8004620 <USB_EPStartXfer+0x310>
 80045f4:	b90b      	cbnz	r3, 80045fa <USB_EPStartXfer+0x2ea>
 80045f6:	5a42      	ldrh	r2, [r0, r1]
 80045f8:	e7e4      	b.n	80045c4 <USB_EPStartXfer+0x2b4>
 80045fa:	07da      	lsls	r2, r3, #31
 80045fc:	5a42      	ldrh	r2, [r0, r1]
 80045fe:	ea4f 0653 	mov.w	r6, r3, lsr #1
 8004602:	bf48      	it	mi
 8004604:	3601      	addmi	r6, #1
 8004606:	b292      	uxth	r2, r2
 8004608:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800460c:	e7de      	b.n	80045cc <USB_EPStartXfer+0x2bc>
 800460e:	0958      	lsrs	r0, r3, #5
 8004610:	06df      	lsls	r7, r3, #27
 8004612:	5a53      	ldrh	r3, [r2, r1]
 8004614:	bf08      	it	eq
 8004616:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800461a:	b29b      	uxth	r3, r3
 800461c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8004620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004628:	b29b      	uxth	r3, r3
 800462a:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 800462c:	69e3      	ldr	r3, [r4, #28]
 800462e:	b1bb      	cbz	r3, 8004660 <USB_EPStartXfer+0x350>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004630:	f244 0340 	movw	r3, #16448	; 0x4040
 8004634:	7822      	ldrb	r2, [r4, #0]
 8004636:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800463a:	ea03 0001 	and.w	r0, r3, r1
 800463e:	438b      	bics	r3, r1
 8004640:	d000      	beq.n	8004644 <USB_EPStartXfer+0x334>
 8004642:	b968      	cbnz	r0, 8004660 <USB_EPStartXfer+0x350>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004644:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004658:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800465c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004660:	7822      	ldrb	r2, [r4, #0]
 8004662:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004676:	e675      	b.n	8004364 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004678:	0858      	lsrs	r0, r3, #1
 800467a:	07de      	lsls	r6, r3, #31
 800467c:	5a53      	ldrh	r3, [r2, r1]
 800467e:	bf48      	it	mi
 8004680:	3001      	addmi	r0, #1
 8004682:	b29b      	uxth	r3, r3
 8004684:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8004688:	e7ce      	b.n	8004628 <USB_EPStartXfer+0x318>
      else if (ep->type == EP_TYPE_ISOC)
 800468a:	2b01      	cmp	r3, #1
 800468c:	d156      	bne.n	800473c <USB_EPStartXfer+0x42c>
        if (ep->xfer_len > ep->maxpacket)
 800468e:	69a3      	ldr	r3, [r4, #24]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8004694:	bf94      	ite	ls
 8004696:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8004698:	1a98      	subhi	r0, r3, r2
 800469a:	61a0      	str	r0, [r4, #24]
 800469c:	bf88      	it	hi
 800469e:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80046a0:	2900      	cmp	r1, #0
 80046a2:	d1dd      	bne.n	8004660 <USB_EPStartXfer+0x350>
 80046a4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80046a8:	7820      	ldrb	r0, [r4, #0]
 80046aa:	b292      	uxth	r2, r2
 80046ac:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80046b0:	0100      	lsls	r0, r0, #4
 80046b2:	4411      	add	r1, r2
 80046b4:	5a42      	ldrh	r2, [r0, r1]
 80046b6:	2b3e      	cmp	r3, #62	; 0x3e
 80046b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80046bc:	5242      	strh	r2, [r0, r1]
 80046be:	d918      	bls.n	80046f2 <USB_EPStartXfer+0x3e2>
 80046c0:	06da      	lsls	r2, r3, #27
 80046c2:	5a42      	ldrh	r2, [r0, r1]
 80046c4:	ea4f 1653 	mov.w	r6, r3, lsr #5
 80046c8:	bf08      	it	eq
 80046ca:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 80046ce:	b292      	uxth	r2, r2
 80046d0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80046d4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80046d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80046dc:	b292      	uxth	r2, r2
 80046de:	5242      	strh	r2, [r0, r1]
 80046e0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80046e4:	7822      	ldrb	r2, [r4, #0]
 80046e6:	b280      	uxth	r0, r0
 80046e8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	4401      	add	r1, r0
 80046f0:	e73f      	b.n	8004572 <USB_EPStartXfer+0x262>
 80046f2:	b90b      	cbnz	r3, 80046f8 <USB_EPStartXfer+0x3e8>
 80046f4:	5a42      	ldrh	r2, [r0, r1]
 80046f6:	e7ed      	b.n	80046d4 <USB_EPStartXfer+0x3c4>
 80046f8:	5a42      	ldrh	r2, [r0, r1]
 80046fa:	085e      	lsrs	r6, r3, #1
 80046fc:	07df      	lsls	r7, r3, #31
 80046fe:	bf48      	it	mi
 8004700:	3601      	addmi	r6, #1
 8004702:	b292      	uxth	r2, r2
 8004704:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8004708:	e7e8      	b.n	80046dc <USB_EPStartXfer+0x3cc>
 800470a:	0958      	lsrs	r0, r3, #5
 800470c:	06de      	lsls	r6, r3, #27
 800470e:	5a53      	ldrh	r3, [r2, r1]
 8004710:	bf08      	it	eq
 8004712:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8004716:	b29b      	uxth	r3, r3
 8004718:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800471c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004724:	b29b      	uxth	r3, r3
 8004726:	5253      	strh	r3, [r2, r1]
 8004728:	e79a      	b.n	8004660 <USB_EPStartXfer+0x350>
 800472a:	0858      	lsrs	r0, r3, #1
 800472c:	07db      	lsls	r3, r3, #31
 800472e:	5a53      	ldrh	r3, [r2, r1]
 8004730:	bf48      	it	mi
 8004732:	3001      	addmi	r0, #1
 8004734:	b29b      	uxth	r3, r3
 8004736:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800473a:	e7f3      	b.n	8004724 <USB_EPStartXfer+0x414>
        return HAL_ERROR;
 800473c:	2001      	movs	r0, #1
 800473e:	e618      	b.n	8004372 <USB_EPStartXfer+0x62>

08004740 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004740:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004746:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800474a:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800474c:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800474e:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8004750:	462e      	mov	r6, r5
 8004752:	3402      	adds	r4, #2
 8004754:	b936      	cbnz	r6, 8004764 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004756:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8004758:	bf44      	itt	mi
 800475a:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800475e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8004762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8004764:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8004768:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800476a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800476c:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004770:	0a12      	lsrs	r2, r2, #8
 8004772:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8004776:	e7ec      	b.n	8004752 <USB_ReadPMA+0x12>

08004778 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004778:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800477c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800477e:	b16b      	cbz	r3, 800479c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004780:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004784:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004788:	28ff      	cmp	r0, #255	; 0xff
 800478a:	d007      	beq.n	800479c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4621      	mov	r1, r4
 8004790:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004794:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004796:	23ff      	movs	r3, #255	; 0xff
 8004798:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800479c:	2000      	movs	r0, #0
 800479e:	bd10      	pop	{r4, pc}

080047a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80047a0:	2343      	movs	r3, #67	; 0x43
 80047a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80047a4:	4800      	ldr	r0, [pc, #0]	; (80047a8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80047a6:	4770      	bx	lr
 80047a8:	20000054 	.word	0x20000054

080047ac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80047ac:	2343      	movs	r3, #67	; 0x43
 80047ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80047b0:	4800      	ldr	r0, [pc, #0]	; (80047b4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80047b2:	4770      	bx	lr
 80047b4:	20000098 	.word	0x20000098

080047b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80047b8:	2343      	movs	r3, #67	; 0x43
 80047ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80047bc:	4800      	ldr	r0, [pc, #0]	; (80047c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80047be:	4770      	bx	lr
 80047c0:	200000e8 	.word	0x200000e8

080047c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80047c4:	230a      	movs	r3, #10
 80047c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80047c8:	4800      	ldr	r0, [pc, #0]	; (80047cc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80047ca:	4770      	bx	lr
 80047cc:	200000dc 	.word	0x200000dc

080047d0 <USBD_CDC_DataOut>:
{
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047d4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80047d8:	f000 fe95 	bl	8005506 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80047dc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80047e0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80047e4:	b14b      	cbz	r3, 80047fa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80047e6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80047ea:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80047f4:	4798      	blx	r3
    return USBD_OK;
 80047f6:	2000      	movs	r0, #0
}
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80047fa:	2002      	movs	r0, #2
 80047fc:	e7fc      	b.n	80047f8 <USBD_CDC_DataOut+0x28>

080047fe <USBD_CDC_DataIn>:
{
 80047fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004800:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8004804:	b1d6      	cbz	r6, 800483c <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004806:	2414      	movs	r4, #20
 8004808:	fb04 0301 	mla	r3, r4, r1, r0
 800480c:	69dc      	ldr	r4, [r3, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800480e:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004812:	b17c      	cbz	r4, 8004834 <USBD_CDC_DataIn+0x36>
 8004814:	2728      	movs	r7, #40	; 0x28
 8004816:	fb07 5201 	mla	r2, r7, r1, r5
 800481a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800481c:	fbb4 f5f2 	udiv	r5, r4, r2
 8004820:	fb02 4415 	mls	r4, r2, r5, r4
 8004824:	b934      	cbnz	r4, 8004834 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8004826:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004828:	4622      	mov	r2, r4
 800482a:	4623      	mov	r3, r4
 800482c:	f000 fe59 	bl	80054e2 <USBD_LL_Transmit>
    return USBD_OK;
 8004830:	4620      	mov	r0, r4
}
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004834:	2000      	movs	r0, #0
 8004836:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800483a:	e7fa      	b.n	8004832 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 800483c:	2002      	movs	r0, #2
 800483e:	e7f8      	b.n	8004832 <USBD_CDC_DataIn+0x34>

08004840 <USBD_CDC_Setup>:
{
 8004840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8004844:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004848:	780a      	ldrb	r2, [r1, #0]
{
 800484a:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800484c:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8004850:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004852:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8004856:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800485a:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800485e:	d028      	beq.n	80048b2 <USBD_CDC_Setup+0x72>
 8004860:	2c20      	cmp	r4, #32
 8004862:	d142      	bne.n	80048ea <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8004864:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004866:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8004868:	b1e4      	cbz	r4, 80048a4 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800486a:	0612      	lsls	r2, r2, #24
 800486c:	d511      	bpl.n	8004892 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800486e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004872:	4639      	mov	r1, r7
 8004874:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	4622      	mov	r2, r4
 800487c:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800487e:	4639      	mov	r1, r7
 8004880:	4628      	mov	r0, r5
 8004882:	88f2      	ldrh	r2, [r6, #6]
 8004884:	f000 fc2f 	bl	80050e6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004888:	4644      	mov	r4, r8
}
 800488a:	4620      	mov	r0, r4
 800488c:	b003      	add	sp, #12
 800488e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004892:	4622      	mov	r2, r4
 8004894:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8004896:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800489a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800489e:	f000 fc37 	bl	8005110 <USBD_CtlPrepareRx>
 80048a2:	e7f1      	b.n	8004888 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048a4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80048a8:	4618      	mov	r0, r3
 80048aa:	6895      	ldr	r5, [r2, #8]
 80048ac:	4622      	mov	r2, r4
 80048ae:	47a8      	blx	r5
 80048b0:	e7eb      	b.n	800488a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80048b2:	784b      	ldrb	r3, [r1, #1]
 80048b4:	2b0a      	cmp	r3, #10
 80048b6:	d00c      	beq.n	80048d2 <USBD_CDC_Setup+0x92>
 80048b8:	2b0b      	cmp	r3, #11
 80048ba:	d012      	beq.n	80048e2 <USBD_CDC_Setup+0xa2>
 80048bc:	b9ab      	cbnz	r3, 80048ea <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d111      	bne.n	80048ea <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80048c6:	2202      	movs	r2, #2
 80048c8:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80048cc:	f000 fc0b 	bl	80050e6 <USBD_CtlSendData>
 80048d0:	e7db      	b.n	800488a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d107      	bne.n	80048ea <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80048da:	2201      	movs	r2, #1
 80048dc:	f10d 0105 	add.w	r1, sp, #5
 80048e0:	e7f4      	b.n	80048cc <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d0cf      	beq.n	800488a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80048ea:	4631      	mov	r1, r6
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 fbd3 	bl	8005098 <USBD_CtlError>
          ret = USBD_FAIL;
 80048f2:	2402      	movs	r4, #2
          break;
 80048f4:	e7c9      	b.n	800488a <USBD_CDC_Setup+0x4a>

080048f6 <USBD_CDC_DeInit>:
{
 80048f6:	b538      	push	{r3, r4, r5, lr}
 80048f8:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80048fa:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80048fc:	2181      	movs	r1, #129	; 0x81
 80048fe:	f000 fdba 	bl	8005476 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004902:	2101      	movs	r1, #1
 8004904:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004906:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004908:	f000 fdb5 	bl	8005476 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800490c:	2182      	movs	r1, #130	; 0x82
 800490e:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004910:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004914:	f000 fdaf 	bl	8005476 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004918:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800491c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800491e:	b14b      	cbz	r3, 8004934 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004920:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004928:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800492c:	f000 fdf4 	bl	8005518 <USBD_static_free>
    pdev->pClassData = NULL;
 8004930:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004934:	2000      	movs	r0, #0
 8004936:	bd38      	pop	{r3, r4, r5, pc}

08004938 <USBD_CDC_Init>:
{
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800493c:	7c03      	ldrb	r3, [r0, #16]
{
 800493e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004940:	bbb3      	cbnz	r3, 80049b0 <USBD_CDC_Init+0x78>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004946:	2181      	movs	r1, #129	; 0x81
 8004948:	2202      	movs	r2, #2
 800494a:	f000 fd88 	bl	800545e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800494e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004950:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004954:	62e1      	str	r1, [r4, #44]	; 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004956:	2601      	movs	r6, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004958:	2202      	movs	r2, #2
 800495a:	4620      	mov	r0, r4
 800495c:	f000 fd7f 	bl	800545e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004960:	2308      	movs	r3, #8
 8004962:	2203      	movs	r2, #3
 8004964:	2182      	movs	r1, #130	; 0x82
 8004966:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004968:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800496c:	f000 fd77 	bl	800545e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004970:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004974:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004976:	f000 fdcb 	bl	8005510 <USBD_static_malloc>
 800497a:	4605      	mov	r5, r0
 800497c:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004980:	b340      	cbz	r0, 80049d4 <USBD_CDC_Init+0x9c>
    hcdc->TxState = 0U;
 8004982:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004986:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4798      	blx	r3
    hcdc->TxState = 0U;
 800498e:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8004992:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004996:	7c27      	ldrb	r7, [r4, #16]
 8004998:	b99f      	cbnz	r7, 80049c2 <USBD_CDC_Init+0x8a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800499a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499e:	4631      	mov	r1, r6
 80049a0:	4620      	mov	r0, r4
 80049a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80049a6:	f000 fda5 	bl	80054f4 <USBD_LL_PrepareReceive>
}
 80049aa:	4638      	mov	r0, r7
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	2181      	movs	r1, #129	; 0x81
 80049b4:	2202      	movs	r2, #2
 80049b6:	f000 fd52 	bl	800545e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049ba:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049bc:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049be:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049c0:	e7c9      	b.n	8004956 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80049c2:	2340      	movs	r3, #64	; 0x40
 80049c4:	4631      	mov	r1, r6
 80049c6:	4620      	mov	r0, r4
 80049c8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80049cc:	f000 fd92 	bl	80054f4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80049d0:	4647      	mov	r7, r8
 80049d2:	e7ea      	b.n	80049aa <USBD_CDC_Init+0x72>
    ret = 1U;
 80049d4:	4637      	mov	r7, r6
 80049d6:	e7e8      	b.n	80049aa <USBD_CDC_Init+0x72>

080049d8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80049d8:	b119      	cbz	r1, 80049e2 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80049da:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80049de:	2000      	movs	r0, #0
 80049e0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80049e2:	2002      	movs	r0, #2
  }

  return ret;
}
 80049e4:	4770      	bx	lr

080049e6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80049ea:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80049ec:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80049f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80049f4:	4770      	bx	lr

080049f6 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80049f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80049fa:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80049fc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004a00:	4770      	bx	lr

08004a02 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a02:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004a06:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004a08:	b182      	cbz	r2, 8004a2c <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a0a:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004a0c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a10:	b934      	cbnz	r4, 8004a20 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a16:	2101      	movs	r1, #1
 8004a18:	f000 fd6c 	bl	80054f4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	2101      	movs	r1, #1
 8004a24:	f000 fd66 	bl	80054f4 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004a28:	2400      	movs	r4, #0
 8004a2a:	e7f7      	b.n	8004a1c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8004a2c:	2402      	movs	r4, #2
 8004a2e:	e7f5      	b.n	8004a1c <USBD_CDC_ReceivePacket+0x1a>

08004a30 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a30:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a32:	b180      	cbz	r0, 8004a56 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004a34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a38:	b113      	cbz	r3, 8004a40 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a40:	b109      	cbz	r1, 8004a46 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004a42:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a46:	2301      	movs	r3, #1
  pdev->id = id;
 8004a48:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a4a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a4e:	f000 fcbb 	bl	80053c8 <USBD_LL_Init>

  return USBD_OK;
 8004a52:	2000      	movs	r0, #0
}
 8004a54:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004a56:	2002      	movs	r0, #2
 8004a58:	e7fc      	b.n	8004a54 <USBD_Init+0x24>

08004a5a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004a5a:	b119      	cbz	r1, 8004a64 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004a5c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004a64:	2002      	movs	r0, #2
  }

  return status;
}
 8004a66:	4770      	bx	lr

08004a68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a68:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004a6a:	f000 fcef 	bl	800544c <USBD_LL_Start>

  return USBD_OK;
}
 8004a6e:	2000      	movs	r0, #0
 8004a70:	bd08      	pop	{r3, pc}

08004a72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a72:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004a74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a78:	b133      	cbz	r3, 8004a88 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4798      	blx	r3
 8004a7e:	3800      	subs	r0, #0
 8004a80:	bf18      	it	ne
 8004a82:	2001      	movne	r0, #1
 8004a84:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004a86:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004a88:	2002      	movs	r0, #2
 8004a8a:	e7fc      	b.n	8004a86 <USBD_SetClassConfig+0x14>

08004a8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a8c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004a8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4798      	blx	r3

  return USBD_OK;
}
 8004a96:	2000      	movs	r0, #0
 8004a98:	bd08      	pop	{r3, pc}

08004a9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a9a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a9c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8004aa0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 fae4 	bl	8005070 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004aa8:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004aaa:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004aae:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004ab2:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004ab6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004aba:	f001 031f 	and.w	r3, r1, #31
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d008      	beq.n	8004ad4 <USBD_LL_SetupStage+0x3a>
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d00b      	beq.n	8004ade <USBD_LL_SetupStage+0x44>
 8004ac6:	b97b      	cbnz	r3, 8004ae8 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 f8fc 	bl	8004cc8 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 fa1e 	bl	8004f18 <USBD_StdItfReq>
      break;
 8004adc:	e7f8      	b.n	8004ad0 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8004ade:	4629      	mov	r1, r5
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 fa3d 	bl	8004f60 <USBD_StdEPReq>
      break;
 8004ae6:	e7f3      	b.n	8004ad0 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004aee:	f000 fccb 	bl	8005488 <USBD_LL_StallEP>
      break;
 8004af2:	e7ed      	b.n	8004ad0 <USBD_LL_SetupStage+0x36>

08004af4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	4604      	mov	r4, r0
 8004af8:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004afa:	460d      	mov	r5, r1
 8004afc:	bb39      	cbnz	r1, 8004b4e <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004afe:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d11c      	bne.n	8004b40 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b06:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8004b0a:	4296      	cmp	r6, r2
 8004b0c:	d90b      	bls.n	8004b26 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8004b0e:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004b10:	42b2      	cmp	r2, r6
 8004b12:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8004b14:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004b18:	bf8c      	ite	hi
 8004b1a:	b2b2      	uxthhi	r2, r6
 8004b1c:	b292      	uxthls	r2, r2
 8004b1e:	f000 fb04 	bl	800512a <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004b22:	4628      	mov	r0, r5
 8004b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004b26:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	b123      	cbz	r3, 8004b38 <USBD_LL_DataOutStage+0x44>
 8004b2e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004b32:	2a03      	cmp	r2, #3
 8004b34:	d100      	bne.n	8004b38 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8004b36:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 fafe 	bl	800513a <USBD_CtlSendStatus>
 8004b3e:	e7f0      	b.n	8004b22 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d1ee      	bne.n	8004b22 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004b44:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004b48:	f000 fc9e 	bl	8005488 <USBD_LL_StallEP>
 8004b4c:	e7e9      	b.n	8004b22 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	b133      	cbz	r3, 8004b64 <USBD_LL_DataOutStage+0x70>
 8004b56:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004b5a:	2a03      	cmp	r2, #3
 8004b5c:	d102      	bne.n	8004b64 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8004b5e:	4798      	blx	r3
  return USBD_OK;
 8004b60:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004b62:	e7de      	b.n	8004b22 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8004b64:	2502      	movs	r5, #2
 8004b66:	e7dc      	b.n	8004b22 <USBD_LL_DataOutStage+0x2e>

08004b68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004b6e:	460d      	mov	r5, r1
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d147      	bne.n	8004c04 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b74:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d13c      	bne.n	8004bf6 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b7c:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8004b80:	429e      	cmp	r6, r3
 8004b82:	d914      	bls.n	8004bae <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004b84:	1af6      	subs	r6, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004b86:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8004b88:	6206      	str	r6, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004b8a:	b2b2      	uxth	r2, r6
 8004b8c:	f000 fab8 	bl	8005100 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b90:	462b      	mov	r3, r5
 8004b92:	462a      	mov	r2, r5
 8004b94:	4629      	mov	r1, r5
 8004b96:	4620      	mov	r0, r4
 8004b98:	f000 fcac 	bl	80054f4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004b9c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d102      	bne.n	8004baa <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004baa:	4628      	mov	r0, r5
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004bae:	69c2      	ldr	r2, [r0, #28]
 8004bb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bb4:	fb03 2616 	mls	r6, r3, r6, r2
 8004bb8:	b95e      	cbnz	r6, 8004bd2 <USBD_LL_DataInStage+0x6a>
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d809      	bhi.n	8004bd2 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8004bbe:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d205      	bcs.n	8004bd2 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	f000 fa9a 	bl	8005100 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bcc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8004bd0:	e7de      	b.n	8004b90 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004bd2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	b12b      	cbz	r3, 8004be6 <USBD_LL_DataInStage+0x7e>
 8004bda:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004bde:	2a03      	cmp	r2, #3
 8004be0:	d101      	bne.n	8004be6 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8004be2:	4620      	mov	r0, r4
 8004be4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	4620      	mov	r0, r4
 8004bea:	f000 fc4d 	bl	8005488 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 faae 	bl	8005150 <USBD_CtlReceiveStatus>
 8004bf4:	e7d2      	b.n	8004b9c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004bf6:	f033 0304 	bics.w	r3, r3, #4
 8004bfa:	d1cf      	bne.n	8004b9c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	f000 fc43 	bl	8005488 <USBD_LL_StallEP>
 8004c02:	e7cb      	b.n	8004b9c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004c04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	b133      	cbz	r3, 8004c1a <USBD_LL_DataInStage+0xb2>
 8004c0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004c10:	2a03      	cmp	r2, #3
 8004c12:	d102      	bne.n	8004c1a <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8004c14:	4798      	blx	r3
  return USBD_OK;
 8004c16:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004c18:	e7c7      	b.n	8004baa <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8004c1a:	2502      	movs	r5, #2
 8004c1c:	e7c5      	b.n	8004baa <USBD_LL_DataInStage+0x42>

08004c1e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c1e:	2200      	movs	r2, #0
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c24:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c26:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c28:	4611      	mov	r1, r2
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	f000 fc17 	bl	800545e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c30:	4633      	mov	r3, r6
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	2200      	movs	r2, #0
 8004c36:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c38:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c3c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c40:	f000 fc0d 	bl	800545e <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c44:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004c46:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c4a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c4c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c4e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c52:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c56:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c58:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8004c5c:	b123      	cbz	r3, 8004c68 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c5e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004c62:	4620      	mov	r0, r4
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004c68:	2000      	movs	r0, #0
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}

08004c6c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004c6c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004c6e:	2000      	movs	r0, #0
 8004c70:	4770      	bx	lr

08004c72 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004c72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c76:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004c80:	2000      	movs	r0, #0
 8004c82:	4770      	bx	lr

08004c84 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c88:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c8a:	bf04      	itt	eq
 8004c8c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004c90:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004c94:	2000      	movs	r0, #0
 8004c96:	4770      	bx	lr

08004c98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c98:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c9a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004c9e:	2a03      	cmp	r2, #3
 8004ca0:	d104      	bne.n	8004cac <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004ca2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	b103      	cbz	r3, 8004cac <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004caa:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8004cac:	2000      	movs	r0, #0
 8004cae:	bd08      	pop	{r3, pc}

08004cb0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	f000 fbe7 	bl	8005488 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004cba:	4620      	mov	r0, r4
}
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f000 bbe1 	b.w	8005488 <USBD_LL_StallEP>
	...

08004cc8 <USBD_StdDevReq>:
{
 8004cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cca:	780b      	ldrb	r3, [r1, #0]
 8004ccc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cd2:	2b20      	cmp	r3, #32
{
 8004cd4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cd6:	d012      	beq.n	8004cfe <USBD_StdDevReq+0x36>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d010      	beq.n	8004cfe <USBD_StdDevReq+0x36>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d151      	bne.n	8004d84 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8004ce0:	784b      	ldrb	r3, [r1, #1]
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d84e      	bhi.n	8004d84 <USBD_StdDevReq+0xbc>
 8004ce6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004cea:	00ee      	.short	0x00ee
 8004cec:	004d0109 	.word	0x004d0109
 8004cf0:	004d0102 	.word	0x004d0102
 8004cf4:	00130087 	.word	0x00130087
 8004cf8:	00d6004d 	.word	0x00d6004d
 8004cfc:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8004cfe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004d02:	4629      	mov	r1, r5
 8004d04:	4620      	mov	r0, r4
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4798      	blx	r3
}
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	b003      	add	sp, #12
 8004d0e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004d16:	884b      	ldrh	r3, [r1, #2]
 8004d18:	0a1a      	lsrs	r2, r3, #8
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	2a06      	cmp	r2, #6
 8004d1e:	d831      	bhi.n	8004d84 <USBD_StdDevReq+0xbc>
 8004d20:	e8df f002 	tbb	[pc, r2]
 8004d24:	30231604 	.word	0x30231604
 8004d28:	4830      	.short	0x4830
 8004d2a:	52          	.byte	0x52
 8004d2b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d2c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004d30:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d32:	7c20      	ldrb	r0, [r4, #16]
 8004d34:	f10d 0106 	add.w	r1, sp, #6
 8004d38:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004d3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004d3e:	88eb      	ldrh	r3, [r5, #6]
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	d055      	beq.n	8004df0 <USBD_StdDevReq+0x128>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d14a      	bne.n	8004dde <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 f9f6 	bl	800513a <USBD_CtlSendStatus>
 8004d4e:	e7dc      	b.n	8004d0a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d50:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8004d52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d56:	b932      	cbnz	r2, 8004d66 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d5a:	f10d 0006 	add.w	r0, sp, #6
 8004d5e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d60:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d62:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004d64:	e7e9      	b.n	8004d3a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	e7f7      	b.n	8004d5a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d809      	bhi.n	8004d84 <USBD_StdDevReq+0xbc>
 8004d70:	e8df f003 	tbb	[pc, r3]
 8004d74:	14100c03 	.word	0x14100c03
 8004d78:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004d7a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004d7e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1d6      	bne.n	8004d32 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8004d84:	4620      	mov	r0, r4
 8004d86:	f7ff ff93 	bl	8004cb0 <USBD_CtlError.constprop.0>
        break;
 8004d8a:	e7be      	b.n	8004d0a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004d8c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	e7f5      	b.n	8004d80 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004d94:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	e7f1      	b.n	8004d80 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004d9c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	e7ed      	b.n	8004d80 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004da4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	e7e9      	b.n	8004d80 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004dac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	e7e5      	b.n	8004d80 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004db4:	7c03      	ldrb	r3, [r0, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e4      	bne.n	8004d84 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004dba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004dbe:	f10d 0006 	add.w	r0, sp, #6
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	4798      	blx	r3
  if (err != 0U)
 8004dc6:	e7b8      	b.n	8004d3a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc8:	7c03      	ldrb	r3, [r0, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1da      	bne.n	8004d84 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004dce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004dd2:	f10d 0006 	add.w	r0, sp, #6
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004dda:	2307      	movs	r3, #7
 8004ddc:	e7c1      	b.n	8004d62 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf28      	it	cs
 8004de2:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004de4:	4601      	mov	r1, r0
 8004de6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004de8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004dec:	f000 f97b 	bl	80050e6 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004df0:	88eb      	ldrh	r3, [r5, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d189      	bne.n	8004d0a <USBD_StdDevReq+0x42>
 8004df6:	e7a7      	b.n	8004d48 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004df8:	888b      	ldrh	r3, [r1, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1c2      	bne.n	8004d84 <USBD_StdDevReq+0xbc>
 8004dfe:	88cb      	ldrh	r3, [r1, #6]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1bf      	bne.n	8004d84 <USBD_StdDevReq+0xbc>
 8004e04:	884d      	ldrh	r5, [r1, #2]
 8004e06:	2d7f      	cmp	r5, #127	; 0x7f
 8004e08:	d8bc      	bhi.n	8004d84 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d0b8      	beq.n	8004d84 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004e12:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8004e14:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004e18:	f000 fb5a 	bl	80054d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 f98c 	bl	800513a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004e22:	b11d      	cbz	r5, 8004e2c <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e24:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e26:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004e2a:	e76e      	b.n	8004d0a <USBD_StdDevReq+0x42>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e7fa      	b.n	8004e26 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8004e30:	7889      	ldrb	r1, [r1, #2]
 8004e32:	4d38      	ldr	r5, [pc, #224]	; (8004f14 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e34:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004e36:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e38:	d8a4      	bhi.n	8004d84 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8004e3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d008      	beq.n	8004e54 <USBD_StdDevReq+0x18c>
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d015      	beq.n	8004e72 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8004e46:	f7ff ff33 	bl	8004cb0 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	7829      	ldrb	r1, [r5, #0]
 8004e4e:	f7ff fe1d 	bl	8004a8c <USBD_ClrClassConfig>
        break;
 8004e52:	e75a      	b.n	8004d0a <USBD_StdDevReq+0x42>
        if (cfgidx)
 8004e54:	2900      	cmp	r1, #0
 8004e56:	f43f af77 	beq.w	8004d48 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8004e5a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e5c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004e5e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e60:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff fe04 	bl	8004a72 <USBD_SetClassConfig>
 8004e6a:	2802      	cmp	r0, #2
 8004e6c:	f47f af6c 	bne.w	8004d48 <USBD_StdDevReq+0x80>
 8004e70:	e788      	b.n	8004d84 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8004e72:	b931      	cbnz	r1, 8004e82 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e74:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8004e76:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e78:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e7c:	f7ff fe06 	bl	8004a8c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e80:	e762      	b.n	8004d48 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8004e82:	6841      	ldr	r1, [r0, #4]
 8004e84:	2901      	cmp	r1, #1
 8004e86:	f43f af5f 	beq.w	8004d48 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e8a:	b2c9      	uxtb	r1, r1
 8004e8c:	f7ff fdfe 	bl	8004a8c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004e90:	7829      	ldrb	r1, [r5, #0]
 8004e92:	6061      	str	r1, [r4, #4]
 8004e94:	e7e6      	b.n	8004e64 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8004e96:	88ca      	ldrh	r2, [r1, #6]
 8004e98:	2a01      	cmp	r2, #1
 8004e9a:	f47f af73 	bne.w	8004d84 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8004e9e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d80a      	bhi.n	8004ebc <USBD_StdDevReq+0x1f4>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f43f af6c 	beq.w	8004d84 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8004eac:	4601      	mov	r1, r0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f000 f916 	bl	80050e6 <USBD_CtlSendData>
      break;
 8004eba:	e726      	b.n	8004d0a <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	f47f af61 	bne.w	8004d84 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004ec2:	1d01      	adds	r1, r0, #4
 8004ec4:	e7f6      	b.n	8004eb4 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8004ec6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	f63f af59 	bhi.w	8004d84 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8004ed2:	88ca      	ldrh	r2, [r1, #6]
 8004ed4:	2a02      	cmp	r2, #2
 8004ed6:	f47f af55 	bne.w	8004d84 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 8004eda:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004ede:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf14      	ite	ne
 8004ee4:	2303      	movne	r3, #3
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	f841 3f0c 	str.w	r3, [r1, #12]!
 8004eec:	e7e2      	b.n	8004eb4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004eee:	884b      	ldrh	r3, [r1, #2]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	f47f af0a 	bne.w	8004d0a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004ef6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004efa:	e725      	b.n	8004d48 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8004efc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f00:	3b01      	subs	r3, #1
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	f63f af3e 	bhi.w	8004d84 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f08:	884b      	ldrh	r3, [r1, #2]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	f47f aefd 	bne.w	8004d0a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e7f0      	b.n	8004ef6 <USBD_StdDevReq+0x22e>
 8004f14:	20000878 	.word	0x20000878

08004f18 <USBD_StdItfReq>:
{
 8004f18:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f1a:	780b      	ldrb	r3, [r1, #0]
{
 8004f1c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f1e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004f22:	2a40      	cmp	r2, #64	; 0x40
{
 8004f24:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f26:	d001      	beq.n	8004f2c <USBD_StdItfReq+0x14>
 8004f28:	065b      	lsls	r3, r3, #25
 8004f2a:	d415      	bmi.n	8004f58 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8004f2c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004f30:	3b01      	subs	r3, #1
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d810      	bhi.n	8004f58 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f36:	792b      	ldrb	r3, [r5, #4]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d80d      	bhi.n	8004f58 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f3c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004f40:	4629      	mov	r1, r5
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4620      	mov	r0, r4
 8004f46:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f48:	88eb      	ldrh	r3, [r5, #6]
 8004f4a:	b91b      	cbnz	r3, 8004f54 <USBD_StdItfReq+0x3c>
 8004f4c:	b910      	cbnz	r0, 8004f54 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 f8f3 	bl	800513a <USBD_CtlSendStatus>
}
 8004f54:	2000      	movs	r0, #0
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7ff fea9 	bl	8004cb0 <USBD_CtlError.constprop.0>
          break;
 8004f5e:	e7f9      	b.n	8004f54 <USBD_StdItfReq+0x3c>

08004f60 <USBD_StdEPReq>:
{
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	780a      	ldrb	r2, [r1, #0]
 8004f64:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8004f66:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f6a:	2a20      	cmp	r2, #32
{
 8004f6c:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8004f6e:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f70:	d02c      	beq.n	8004fcc <USBD_StdEPReq+0x6c>
 8004f72:	2a40      	cmp	r2, #64	; 0x40
 8004f74:	d02a      	beq.n	8004fcc <USBD_StdEPReq+0x6c>
 8004f76:	bbba      	cbnz	r2, 8004fe8 <USBD_StdEPReq+0x88>
      switch (req->bRequest)
 8004f78:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004f7a:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004f7c:	2a01      	cmp	r2, #1
 8004f7e:	d043      	beq.n	8005008 <USBD_StdEPReq+0xa8>
 8004f80:	2a03      	cmp	r2, #3
 8004f82:	d02b      	beq.n	8004fdc <USBD_StdEPReq+0x7c>
 8004f84:	bb82      	cbnz	r2, 8004fe8 <USBD_StdEPReq+0x88>
          switch (pdev->dev_state)
 8004f86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d053      	beq.n	8005036 <USBD_StdEPReq+0xd6>
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d12a      	bne.n	8004fe8 <USBD_StdEPReq+0x88>
              if ((ep_addr & 0x80U) == 0x80U)
 8004f92:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f94:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8004f98:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f9c:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004fa0:	d05a      	beq.n	8005058 <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	b303      	cbz	r3, 8004fe8 <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fa6:	2514      	movs	r5, #20
 8004fa8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004fac:	fb03 5505 	mla	r5, r3, r5, r5
 8004fb0:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004fb2:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 8004fb6:	d005      	beq.n	8004fc4 <USBD_StdEPReq+0x64>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fa77 	bl	80054ac <USBD_LL_IsStallEP>
 8004fbe:	3800      	subs	r0, #0
 8004fc0:	bf18      	it	ne
 8004fc2:	2001      	movne	r0, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8004fc8:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004fca:	e041      	b.n	8005050 <USBD_StdEPReq+0xf0>
      pdev->pClass->Setup(pdev, req);
 8004fcc:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	4790      	blx	r2
}
 8004fd8:	2000      	movs	r0, #0
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8004fdc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004fe0:	2a02      	cmp	r2, #2
 8004fe2:	d01f      	beq.n	8005024 <USBD_StdEPReq+0xc4>
 8004fe4:	2a03      	cmp	r2, #3
 8004fe6:	d003      	beq.n	8004ff0 <USBD_StdEPReq+0x90>
              USBD_CtlError(pdev, req);
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff fe61 	bl	8004cb0 <USBD_CtlError.constprop.0>
              break;
 8004fee:	e7f3      	b.n	8004fd8 <USBD_StdEPReq+0x78>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ff0:	885a      	ldrh	r2, [r3, #2]
 8004ff2:	b92a      	cbnz	r2, 8005000 <USBD_StdEPReq+0xa0>
                if ((ep_addr != 0x00U) &&
 8004ff4:	064a      	lsls	r2, r1, #25
 8004ff6:	d003      	beq.n	8005000 <USBD_StdEPReq+0xa0>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ff8:	88db      	ldrh	r3, [r3, #6]
 8004ffa:	b90b      	cbnz	r3, 8005000 <USBD_StdEPReq+0xa0>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004ffc:	f000 fa44 	bl	8005488 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005000:	4620      	mov	r0, r4
 8005002:	f000 f89a 	bl	800513a <USBD_CtlSendStatus>
              break;
 8005006:	e7e7      	b.n	8004fd8 <USBD_StdEPReq+0x78>
          switch (pdev->dev_state)
 8005008:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800500c:	2a02      	cmp	r2, #2
 800500e:	d009      	beq.n	8005024 <USBD_StdEPReq+0xc4>
 8005010:	2a03      	cmp	r2, #3
 8005012:	d1e9      	bne.n	8004fe8 <USBD_StdEPReq+0x88>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005014:	885b      	ldrh	r3, [r3, #2]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1de      	bne.n	8004fd8 <USBD_StdEPReq+0x78>
                if ((ep_addr & 0x7FU) != 0x00U)
 800501a:	064d      	lsls	r5, r1, #25
 800501c:	d0f0      	beq.n	8005000 <USBD_StdEPReq+0xa0>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800501e:	f000 fa3c 	bl	800549a <USBD_LL_ClearStallEP>
 8005022:	e7ed      	b.n	8005000 <USBD_StdEPReq+0xa0>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005024:	064b      	lsls	r3, r1, #25
 8005026:	d0df      	beq.n	8004fe8 <USBD_StdEPReq+0x88>
                USBD_LL_StallEP(pdev, ep_addr);
 8005028:	f000 fa2e 	bl	8005488 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	4620      	mov	r0, r4
 8005030:	f000 fa2a 	bl	8005488 <USBD_LL_StallEP>
 8005034:	e7d0      	b.n	8004fd8 <USBD_StdEPReq+0x78>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005036:	064a      	lsls	r2, r1, #25
 8005038:	d1d6      	bne.n	8004fe8 <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800503a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800503c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005040:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005044:	bf4c      	ite	mi
 8005046:	f100 0114 	addmi.w	r1, r0, #20
 800504a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800504e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f848 	bl	80050e6 <USBD_CtlSendData>
              break;
 8005056:	e7bf      	b.n	8004fd8 <USBD_StdEPReq+0x78>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005058:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0c3      	beq.n	8004fe8 <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005060:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005062:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005066:	fb03 0505 	mla	r5, r3, r5, r0
 800506a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800506e:	e7a0      	b.n	8004fb2 <USBD_StdEPReq+0x52>

08005070 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005070:	780b      	ldrb	r3, [r1, #0]
 8005072:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005074:	784b      	ldrb	r3, [r1, #1]
 8005076:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005078:	78ca      	ldrb	r2, [r1, #3]
 800507a:	788b      	ldrb	r3, [r1, #2]
 800507c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005080:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005082:	794a      	ldrb	r2, [r1, #5]
 8005084:	790b      	ldrb	r3, [r1, #4]
 8005086:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800508a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800508c:	79ca      	ldrb	r2, [r1, #7]
 800508e:	798b      	ldrb	r3, [r1, #6]
 8005090:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005094:	80c3      	strh	r3, [r0, #6]
}
 8005096:	4770      	bx	lr

08005098 <USBD_CtlError>:
{
 8005098:	b510      	push	{r4, lr}
 800509a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	f000 f9f3 	bl	8005488 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80050a2:	4620      	mov	r0, r4
}
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80050a8:	2100      	movs	r1, #0
 80050aa:	f000 b9ed 	b.w	8005488 <USBD_LL_StallEP>

080050ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050ae:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80050b0:	b188      	cbz	r0, 80050d6 <USBD_GetString+0x28>
 80050b2:	2400      	movs	r4, #0
 80050b4:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80050b6:	4623      	mov	r3, r4
 80050b8:	3401      	adds	r4, #1
 80050ba:	5d05      	ldrb	r5, [r0, r4]
 80050bc:	2d00      	cmp	r5, #0
 80050be:	d1fa      	bne.n	80050b6 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050c8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050ca:	2303      	movs	r3, #3
 80050cc:	704b      	strb	r3, [r1, #1]
 80050ce:	2302      	movs	r3, #2
    while (*desc != '\0')
 80050d0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80050d4:	b904      	cbnz	r4, 80050d8 <USBD_GetString+0x2a>
}
 80050d6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	54cc      	strb	r4, [r1, r3]
 80050dc:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80050de:	3302      	adds	r3, #2
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	548d      	strb	r5, [r1, r2]
 80050e4:	e7f4      	b.n	80050d0 <USBD_GetString+0x22>

080050e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80050e6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80050e8:	2202      	movs	r2, #2
{
 80050ea:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80050ec:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80050f0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80050f4:	460a      	mov	r2, r1
 80050f6:	2100      	movs	r1, #0
 80050f8:	f000 f9f3 	bl	80054e2 <USBD_LL_Transmit>

  return USBD_OK;
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	bd10      	pop	{r4, pc}

08005100 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005100:	b508      	push	{r3, lr}
 8005102:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005104:	460a      	mov	r2, r1
 8005106:	2100      	movs	r1, #0
 8005108:	f000 f9eb 	bl	80054e2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800510c:	2000      	movs	r0, #0
 800510e:	bd08      	pop	{r3, pc}

08005110 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005110:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005112:	2203      	movs	r2, #3
{
 8005114:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005116:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800511a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800511e:	460a      	mov	r2, r1
 8005120:	2100      	movs	r1, #0
 8005122:	f000 f9e7 	bl	80054f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005126:	2000      	movs	r0, #0
 8005128:	bd10      	pop	{r4, pc}

0800512a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800512a:	b508      	push	{r3, lr}
 800512c:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800512e:	460a      	mov	r2, r1
 8005130:	2100      	movs	r1, #0
 8005132:	f000 f9df 	bl	80054f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005136:	2000      	movs	r0, #0
 8005138:	bd08      	pop	{r3, pc}

0800513a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800513a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800513c:	2304      	movs	r3, #4
 800513e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005142:	2300      	movs	r3, #0
 8005144:	461a      	mov	r2, r3
 8005146:	4619      	mov	r1, r3
 8005148:	f000 f9cb 	bl	80054e2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800514c:	2000      	movs	r0, #0
 800514e:	bd08      	pop	{r3, pc}

08005150 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005150:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005152:	2305      	movs	r3, #5
 8005154:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005158:	2300      	movs	r3, #0
 800515a:	461a      	mov	r2, r3
 800515c:	4619      	mov	r1, r3
 800515e:	f000 f9c9 	bl	80054f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005162:	2000      	movs	r0, #0
 8005164:	bd08      	pop	{r3, pc}
	...

08005168 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800516a:	2200      	movs	r2, #0
 800516c:	490e      	ldr	r1, [pc, #56]	; (80051a8 <MX_USB_DEVICE_Init+0x40>)
 800516e:	480f      	ldr	r0, [pc, #60]	; (80051ac <MX_USB_DEVICE_Init+0x44>)
 8005170:	f7ff fc5e 	bl	8004a30 <USBD_Init>
 8005174:	b108      	cbz	r0, 800517a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005176:	f7fc f8cb 	bl	8001310 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800517a:	490d      	ldr	r1, [pc, #52]	; (80051b0 <MX_USB_DEVICE_Init+0x48>)
 800517c:	480b      	ldr	r0, [pc, #44]	; (80051ac <MX_USB_DEVICE_Init+0x44>)
 800517e:	f7ff fc6c 	bl	8004a5a <USBD_RegisterClass>
 8005182:	b108      	cbz	r0, 8005188 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005184:	f7fc f8c4 	bl	8001310 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005188:	490a      	ldr	r1, [pc, #40]	; (80051b4 <MX_USB_DEVICE_Init+0x4c>)
 800518a:	4808      	ldr	r0, [pc, #32]	; (80051ac <MX_USB_DEVICE_Init+0x44>)
 800518c:	f7ff fc24 	bl	80049d8 <USBD_CDC_RegisterInterface>
 8005190:	b108      	cbz	r0, 8005196 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005192:	f7fc f8bd 	bl	8001310 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005196:	4805      	ldr	r0, [pc, #20]	; (80051ac <MX_USB_DEVICE_Init+0x44>)
 8005198:	f7ff fc66 	bl	8004a68 <USBD_Start>
 800519c:	b118      	cbz	r0, 80051a6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800519e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80051a2:	f7fc b8b5 	b.w	8001310 <Error_Handler>
}
 80051a6:	bd08      	pop	{r3, pc}
 80051a8:	2000013c 	.word	0x2000013c
 80051ac:	2000087c 	.word	0x2000087c
 80051b0:	2000001c 	.word	0x2000001c
 80051b4:	2000012c 	.word	0x2000012c

080051b8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80051b8:	2000      	movs	r0, #0
 80051ba:	4770      	bx	lr

080051bc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80051bc:	2000      	movs	r0, #0
 80051be:	4770      	bx	lr

080051c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80051c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80051c2:	4c05      	ldr	r4, [pc, #20]	; (80051d8 <CDC_Receive_FS+0x18>)
{
 80051c4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff fc15 	bl	80049f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff fc18 	bl	8004a02 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80051d2:	2000      	movs	r0, #0
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	bf00      	nop
 80051d8:	2000087c 	.word	0x2000087c

080051dc <CDC_Init_FS>:
{
 80051dc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80051de:	4c06      	ldr	r4, [pc, #24]	; (80051f8 <CDC_Init_FS+0x1c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	4620      	mov	r0, r4
 80051e4:	4905      	ldr	r1, [pc, #20]	; (80051fc <CDC_Init_FS+0x20>)
 80051e6:	f7ff fbfe 	bl	80049e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80051ea:	4620      	mov	r0, r4
 80051ec:	4904      	ldr	r1, [pc, #16]	; (8005200 <CDC_Init_FS+0x24>)
 80051ee:	f7ff fc02 	bl	80049f6 <USBD_CDC_SetRxBuffer>
}
 80051f2:	2000      	movs	r0, #0
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	bf00      	nop
 80051f8:	2000087c 	.word	0x2000087c
 80051fc:	20000f40 	.word	0x20000f40
 8005200:	20000b40 	.word	0x20000b40

08005204 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005204:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005206:	4801      	ldr	r0, [pc, #4]	; (800520c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005208:	800b      	strh	r3, [r1, #0]
}
 800520a:	4770      	bx	lr
 800520c:	20000158 	.word	0x20000158

08005210 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005210:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005212:	4801      	ldr	r0, [pc, #4]	; (8005218 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005214:	800b      	strh	r3, [r1, #0]
}
 8005216:	4770      	bx	lr
 8005218:	2000016c 	.word	0x2000016c

0800521c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800521c:	2300      	movs	r3, #0
 800521e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005220:	461e      	mov	r6, r3
 8005222:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8005224:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8005226:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800522a:	bf34      	ite	cc
 800522c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800522e:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005230:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005234:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8005238:	3301      	adds	r3, #1
 800523a:	b2dc      	uxtb	r4, r3
 800523c:	42a2      	cmp	r2, r4
    value = value << 4;
 800523e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8005242:	d8ef      	bhi.n	8005224 <IntToUnicode+0x8>
  }
}
 8005244:	bd70      	pop	{r4, r5, r6, pc}
	...

08005248 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005248:	231a      	movs	r3, #26
{
 800524a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800524c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <USBD_FS_SerialStrDescriptor+0x30>)
 8005250:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8005254:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8005258:	1880      	adds	r0, r0, r2
 800525a:	d00a      	beq.n	8005272 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800525c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005260:	4906      	ldr	r1, [pc, #24]	; (800527c <USBD_FS_SerialStrDescriptor+0x34>)
 8005262:	2208      	movs	r2, #8
 8005264:	f7ff ffda 	bl	800521c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005268:	2204      	movs	r2, #4
 800526a:	4620      	mov	r0, r4
 800526c:	3110      	adds	r1, #16
 800526e:	f7ff ffd5 	bl	800521c <IntToUnicode>
}
 8005272:	4803      	ldr	r0, [pc, #12]	; (8005280 <USBD_FS_SerialStrDescriptor+0x38>)
 8005274:	bd10      	pop	{r4, pc}
 8005276:	bf00      	nop
 8005278:	1ffff000 	.word	0x1ffff000
 800527c:	20000172 	.word	0x20000172
 8005280:	20000170 	.word	0x20000170

08005284 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005284:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005286:	4c04      	ldr	r4, [pc, #16]	; (8005298 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005288:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800528a:	4804      	ldr	r0, [pc, #16]	; (800529c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800528c:	4621      	mov	r1, r4
 800528e:	f7ff ff0e 	bl	80050ae <USBD_GetString>
}
 8005292:	4620      	mov	r0, r4
 8005294:	bd10      	pop	{r4, pc}
 8005296:	bf00      	nop
 8005298:	20001340 	.word	0x20001340
 800529c:	0800a2ce 	.word	0x0800a2ce

080052a0 <USBD_FS_ProductStrDescriptor>:
{
 80052a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80052a2:	4c04      	ldr	r4, [pc, #16]	; (80052b4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80052a4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80052a6:	4804      	ldr	r0, [pc, #16]	; (80052b8 <USBD_FS_ProductStrDescriptor+0x18>)
 80052a8:	4621      	mov	r1, r4
 80052aa:	f7ff ff00 	bl	80050ae <USBD_GetString>
}
 80052ae:	4620      	mov	r0, r4
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	20001340 	.word	0x20001340
 80052b8:	0800a2e1 	.word	0x0800a2e1

080052bc <USBD_FS_ConfigStrDescriptor>:
{
 80052bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80052be:	4c04      	ldr	r4, [pc, #16]	; (80052d0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80052c0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80052c2:	4804      	ldr	r0, [pc, #16]	; (80052d4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80052c4:	4621      	mov	r1, r4
 80052c6:	f7ff fef2 	bl	80050ae <USBD_GetString>
}
 80052ca:	4620      	mov	r0, r4
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	bf00      	nop
 80052d0:	20001340 	.word	0x20001340
 80052d4:	0800a2f7 	.word	0x0800a2f7

080052d8 <USBD_FS_InterfaceStrDescriptor>:
{
 80052d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80052da:	4c04      	ldr	r4, [pc, #16]	; (80052ec <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80052dc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80052de:	4804      	ldr	r0, [pc, #16]	; (80052f0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80052e0:	4621      	mov	r1, r4
 80052e2:	f7ff fee4 	bl	80050ae <USBD_GetString>
}
 80052e6:	4620      	mov	r0, r4
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	20001340 	.word	0x20001340
 80052f0:	0800a302 	.word	0x0800a302

080052f4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80052f4:	2803      	cmp	r0, #3
 80052f6:	bf9a      	itte	ls
 80052f8:	4b01      	ldrls	r3, [pc, #4]	; (8005300 <USBD_Get_USB_Status+0xc>)
 80052fa:	5c18      	ldrbls	r0, [r3, r0]
{
 80052fc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80052fe:	4770      	bx	lr
 8005300:	0800a310 	.word	0x0800a310

08005304 <HAL_PCD_MspInit>:
{
 8005304:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_PCD_MspInit+0x3c>)
 8005308:	6802      	ldr	r2, [r0, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d115      	bne.n	800533a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800530e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005312:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005314:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005316:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800531a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800531c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800531e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005320:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800532a:	f7fc fb55 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800532e:	2014      	movs	r0, #20
}
 8005330:	b003      	add	sp, #12
 8005332:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005336:	f7fc bb7f 	b.w	8001a38 <HAL_NVIC_EnableIRQ>
}
 800533a:	b003      	add	sp, #12
 800533c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005340:	40005c00 	.word	0x40005c00

08005344 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005344:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005348:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800534c:	f7ff bba5 	b.w	8004a9a <USBD_LL_SetupStage>

08005350 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005350:	2328      	movs	r3, #40	; 0x28
 8005352:	fb03 0301 	mla	r3, r3, r1, r0
 8005356:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800535a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800535e:	f7ff bbc9 	b.w	8004af4 <USBD_LL_DataOutStage>

08005362 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005362:	2328      	movs	r3, #40	; 0x28
 8005364:	fb03 0301 	mla	r3, r3, r1, r0
 8005368:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800536c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800536e:	f7ff bbfb 	b.w	8004b68 <USBD_LL_DataInStage>

08005372 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005372:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005376:	f7ff bc8f 	b.w	8004c98 <USBD_LL_SOF>

0800537a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800537a:	6883      	ldr	r3, [r0, #8]
{
 800537c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800537e:	2b02      	cmp	r3, #2
{
 8005380:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005382:	d001      	beq.n	8005388 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8005384:	f7fb ffc4 	bl	8001310 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005388:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 800538c:	2101      	movs	r1, #1
 800538e:	f7ff fc6d 	bl	8004c6c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005392:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 8005396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800539a:	f7ff bc40 	b.w	8004c1e <USBD_LL_Reset>
	...

080053a0 <HAL_PCD_SuspendCallback>:
{
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80053a4:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80053a8:	f7ff fc63 	bl	8004c72 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80053ac:	69a3      	ldr	r3, [r4, #24]
 80053ae:	b123      	cbz	r3, 80053ba <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80053b0:	4a02      	ldr	r2, [pc, #8]	; (80053bc <HAL_PCD_SuspendCallback+0x1c>)
 80053b2:	6913      	ldr	r3, [r2, #16]
 80053b4:	f043 0306 	orr.w	r3, r3, #6
 80053b8:	6113      	str	r3, [r2, #16]
}
 80053ba:	bd10      	pop	{r4, pc}
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80053c0:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80053c4:	f7ff bc5e 	b.w	8004c84 <USBD_LL_Resume>

080053c8 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80053c8:	2308      	movs	r3, #8
{
 80053ca:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80053cc:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <USBD_LL_Init+0x7c>)
{
 80053ce:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80053d0:	481d      	ldr	r0, [pc, #116]	; (8005448 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80053d2:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80053d6:	2302      	movs	r3, #2
 80053d8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80053da:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80053dc:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80053e0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80053e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80053e8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80053ea:	f7fc ff41 	bl	8002270 <HAL_PCD_Init>
 80053ee:	b108      	cbz	r0, 80053f4 <USBD_LL_Init+0x2c>
    Error_Handler( );
 80053f0:	f7fb ff8e 	bl	8001310 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2318      	movs	r3, #24
 80053f8:	4611      	mov	r1, r2
 80053fa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80053fe:	f7fd fdaf 	bl	8002f60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005402:	2358      	movs	r3, #88	; 0x58
 8005404:	2200      	movs	r2, #0
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800540c:	f7fd fda8 	bl	8002f60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005410:	23c0      	movs	r3, #192	; 0xc0
 8005412:	2200      	movs	r2, #0
 8005414:	2181      	movs	r1, #129	; 0x81
 8005416:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800541a:	f7fd fda1 	bl	8002f60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800541e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005422:	2200      	movs	r2, #0
 8005424:	2101      	movs	r1, #1
 8005426:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800542a:	f7fd fd99 	bl	8002f60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800542e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005432:	2200      	movs	r2, #0
 8005434:	2182      	movs	r1, #130	; 0x82
 8005436:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800543a:	f7fd fd91 	bl	8002f60 <HAL_PCDEx_PMAConfig>
}
 800543e:	2000      	movs	r0, #0
 8005440:	bd10      	pop	{r4, pc}
 8005442:	bf00      	nop
 8005444:	40005c00 	.word	0x40005c00
 8005448:	20001540 	.word	0x20001540

0800544c <USBD_LL_Start>:
{
 800544c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800544e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005452:	f7fc ff85 	bl	8002360 <HAL_PCD_Start>
}
 8005456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800545a:	f7ff bf4b 	b.w	80052f4 <USBD_Get_USB_Status>

0800545e <USBD_LL_OpenEP>:
{
 800545e:	b510      	push	{r4, lr}
 8005460:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005462:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8005466:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005468:	4623      	mov	r3, r4
 800546a:	f7fd fc81 	bl	8002d70 <HAL_PCD_EP_Open>
}
 800546e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005472:	f7ff bf3f 	b.w	80052f4 <USBD_Get_USB_Status>

08005476 <USBD_LL_CloseEP>:
{
 8005476:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005478:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800547c:	f7fd fca8 	bl	8002dd0 <HAL_PCD_EP_Close>
}
 8005480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005484:	f7ff bf36 	b.w	80052f4 <USBD_Get_USB_Status>

08005488 <USBD_LL_StallEP>:
{
 8005488:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800548a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800548e:	f7fd fd01 	bl	8002e94 <HAL_PCD_EP_SetStall>
}
 8005492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005496:	f7ff bf2d 	b.w	80052f4 <USBD_Get_USB_Status>

0800549a <USBD_LL_ClearStallEP>:
{
 800549a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800549c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054a0:	f7fd fd2c 	bl	8002efc <HAL_PCD_EP_ClrStall>
}
 80054a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054a8:	f7ff bf24 	b.w	80052f4 <USBD_Get_USB_Status>

080054ac <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80054ac:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 80054ae:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80054b2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80054b6:	bf1b      	ittet	ne
 80054b8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80054bc:	fb01 2202 	mlane	r2, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80054c0:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80054c4:	189b      	addne	r3, r3, r2
 80054c6:	bf14      	ite	ne
 80054c8:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80054ca:	f893 016a 	ldrbeq.w	r0, [r3, #362]	; 0x16a
}
 80054ce:	4770      	bx	lr

080054d0 <USBD_LL_SetUSBAddress>:
{
 80054d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80054d2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054d6:	f7fc ff5c 	bl	8002392 <HAL_PCD_SetAddress>
}
 80054da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054de:	f7ff bf09 	b.w	80052f4 <USBD_Get_USB_Status>

080054e2 <USBD_LL_Transmit>:
{
 80054e2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80054e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054e8:	f7fd fcba 	bl	8002e60 <HAL_PCD_EP_Transmit>
}
 80054ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054f0:	f7ff bf00 	b.w	80052f4 <USBD_Get_USB_Status>

080054f4 <USBD_LL_PrepareReceive>:
{
 80054f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80054f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054fa:	f7fd fc92 	bl	8002e22 <HAL_PCD_EP_Receive>
}
 80054fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005502:	f7ff bef7 	b.w	80052f4 <USBD_Get_USB_Status>

08005506 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005506:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800550a:	f7fd bca1 	b.w	8002e50 <HAL_PCD_EP_GetRxCount>
	...

08005510 <USBD_static_malloc>:
}
 8005510:	4800      	ldr	r0, [pc, #0]	; (8005514 <USBD_static_malloc+0x4>)
 8005512:	4770      	bx	lr
 8005514:	20001830 	.word	0x20001830

08005518 <USBD_static_free>:
}
 8005518:	4770      	bx	lr

0800551a <HAL_PCDEx_SetConnectionState>:
}
 800551a:	4770      	bx	lr

0800551c <__cvt>:
 800551c:	2b00      	cmp	r3, #0
 800551e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005522:	461f      	mov	r7, r3
 8005524:	bfbb      	ittet	lt
 8005526:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800552a:	461f      	movlt	r7, r3
 800552c:	2300      	movge	r3, #0
 800552e:	232d      	movlt	r3, #45	; 0x2d
 8005530:	b088      	sub	sp, #32
 8005532:	4614      	mov	r4, r2
 8005534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005536:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005538:	7013      	strb	r3, [r2, #0]
 800553a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800553c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005540:	f023 0820 	bic.w	r8, r3, #32
 8005544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005548:	d005      	beq.n	8005556 <__cvt+0x3a>
 800554a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800554e:	d100      	bne.n	8005552 <__cvt+0x36>
 8005550:	3501      	adds	r5, #1
 8005552:	2302      	movs	r3, #2
 8005554:	e000      	b.n	8005558 <__cvt+0x3c>
 8005556:	2303      	movs	r3, #3
 8005558:	aa07      	add	r2, sp, #28
 800555a:	9204      	str	r2, [sp, #16]
 800555c:	aa06      	add	r2, sp, #24
 800555e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005562:	e9cd 3500 	strd	r3, r5, [sp]
 8005566:	4622      	mov	r2, r4
 8005568:	463b      	mov	r3, r7
 800556a:	f000 fe61 	bl	8006230 <_dtoa_r>
 800556e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005572:	4606      	mov	r6, r0
 8005574:	d102      	bne.n	800557c <__cvt+0x60>
 8005576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005578:	07db      	lsls	r3, r3, #31
 800557a:	d522      	bpl.n	80055c2 <__cvt+0xa6>
 800557c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005580:	eb06 0905 	add.w	r9, r6, r5
 8005584:	d110      	bne.n	80055a8 <__cvt+0x8c>
 8005586:	7833      	ldrb	r3, [r6, #0]
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d10a      	bne.n	80055a2 <__cvt+0x86>
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	4620      	mov	r0, r4
 8005592:	4639      	mov	r1, r7
 8005594:	f7fb fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8005598:	b918      	cbnz	r0, 80055a2 <__cvt+0x86>
 800559a:	f1c5 0501 	rsb	r5, r5, #1
 800559e:	f8ca 5000 	str.w	r5, [sl]
 80055a2:	f8da 3000 	ldr.w	r3, [sl]
 80055a6:	4499      	add	r9, r3
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	4620      	mov	r0, r4
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fb f9fa 	bl	80009a8 <__aeabi_dcmpeq>
 80055b4:	b108      	cbz	r0, 80055ba <__cvt+0x9e>
 80055b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80055ba:	2230      	movs	r2, #48	; 0x30
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	454b      	cmp	r3, r9
 80055c0:	d307      	bcc.n	80055d2 <__cvt+0xb6>
 80055c2:	4630      	mov	r0, r6
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055c8:	1b9b      	subs	r3, r3, r6
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	b008      	add	sp, #32
 80055ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	9107      	str	r1, [sp, #28]
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e7f0      	b.n	80055bc <__cvt+0xa0>

080055da <__exponent>:
 80055da:	4603      	mov	r3, r0
 80055dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055de:	2900      	cmp	r1, #0
 80055e0:	f803 2b02 	strb.w	r2, [r3], #2
 80055e4:	bfb6      	itet	lt
 80055e6:	222d      	movlt	r2, #45	; 0x2d
 80055e8:	222b      	movge	r2, #43	; 0x2b
 80055ea:	4249      	neglt	r1, r1
 80055ec:	2909      	cmp	r1, #9
 80055ee:	7042      	strb	r2, [r0, #1]
 80055f0:	dd2a      	ble.n	8005648 <__exponent+0x6e>
 80055f2:	f10d 0207 	add.w	r2, sp, #7
 80055f6:	4617      	mov	r7, r2
 80055f8:	260a      	movs	r6, #10
 80055fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80055fe:	4694      	mov	ip, r2
 8005600:	fb06 1415 	mls	r4, r6, r5, r1
 8005604:	3430      	adds	r4, #48	; 0x30
 8005606:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800560a:	460c      	mov	r4, r1
 800560c:	2c63      	cmp	r4, #99	; 0x63
 800560e:	4629      	mov	r1, r5
 8005610:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005614:	dcf1      	bgt.n	80055fa <__exponent+0x20>
 8005616:	3130      	adds	r1, #48	; 0x30
 8005618:	f1ac 0402 	sub.w	r4, ip, #2
 800561c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005620:	4622      	mov	r2, r4
 8005622:	1c41      	adds	r1, r0, #1
 8005624:	42ba      	cmp	r2, r7
 8005626:	d30a      	bcc.n	800563e <__exponent+0x64>
 8005628:	f10d 0209 	add.w	r2, sp, #9
 800562c:	eba2 020c 	sub.w	r2, r2, ip
 8005630:	42bc      	cmp	r4, r7
 8005632:	bf88      	it	hi
 8005634:	2200      	movhi	r2, #0
 8005636:	4413      	add	r3, r2
 8005638:	1a18      	subs	r0, r3, r0
 800563a:	b003      	add	sp, #12
 800563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800563e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005642:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005646:	e7ed      	b.n	8005624 <__exponent+0x4a>
 8005648:	2330      	movs	r3, #48	; 0x30
 800564a:	3130      	adds	r1, #48	; 0x30
 800564c:	7083      	strb	r3, [r0, #2]
 800564e:	70c1      	strb	r1, [r0, #3]
 8005650:	1d03      	adds	r3, r0, #4
 8005652:	e7f1      	b.n	8005638 <__exponent+0x5e>

08005654 <_printf_float>:
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	b091      	sub	sp, #68	; 0x44
 800565a:	460c      	mov	r4, r1
 800565c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005660:	4616      	mov	r6, r2
 8005662:	461f      	mov	r7, r3
 8005664:	4605      	mov	r5, r0
 8005666:	f000 fcd3 	bl	8006010 <_localeconv_r>
 800566a:	6803      	ldr	r3, [r0, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	9309      	str	r3, [sp, #36]	; 0x24
 8005670:	f7fa fd6e 	bl	8000150 <strlen>
 8005674:	2300      	movs	r3, #0
 8005676:	930e      	str	r3, [sp, #56]	; 0x38
 8005678:	f8d8 3000 	ldr.w	r3, [r8]
 800567c:	900a      	str	r0, [sp, #40]	; 0x28
 800567e:	3307      	adds	r3, #7
 8005680:	f023 0307 	bic.w	r3, r3, #7
 8005684:	f103 0208 	add.w	r2, r3, #8
 8005688:	f894 9018 	ldrb.w	r9, [r4, #24]
 800568c:	f8d4 b000 	ldr.w	fp, [r4]
 8005690:	f8c8 2000 	str.w	r2, [r8]
 8005694:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005698:	4652      	mov	r2, sl
 800569a:	4643      	mov	r3, r8
 800569c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056a0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80056a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056aa:	4650      	mov	r0, sl
 80056ac:	4b9c      	ldr	r3, [pc, #624]	; (8005920 <_printf_float+0x2cc>)
 80056ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056b0:	f7fb f9ac 	bl	8000a0c <__aeabi_dcmpun>
 80056b4:	bb70      	cbnz	r0, 8005714 <_printf_float+0xc0>
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ba:	4650      	mov	r0, sl
 80056bc:	4b98      	ldr	r3, [pc, #608]	; (8005920 <_printf_float+0x2cc>)
 80056be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056c0:	f7fb f986 	bl	80009d0 <__aeabi_dcmple>
 80056c4:	bb30      	cbnz	r0, 8005714 <_printf_float+0xc0>
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	4650      	mov	r0, sl
 80056cc:	4641      	mov	r1, r8
 80056ce:	f7fb f975 	bl	80009bc <__aeabi_dcmplt>
 80056d2:	b110      	cbz	r0, 80056da <_printf_float+0x86>
 80056d4:	232d      	movs	r3, #45	; 0x2d
 80056d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056da:	4a92      	ldr	r2, [pc, #584]	; (8005924 <_printf_float+0x2d0>)
 80056dc:	4b92      	ldr	r3, [pc, #584]	; (8005928 <_printf_float+0x2d4>)
 80056de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80056e2:	bf94      	ite	ls
 80056e4:	4690      	movls	r8, r2
 80056e6:	4698      	movhi	r8, r3
 80056e8:	2303      	movs	r3, #3
 80056ea:	f04f 0a00 	mov.w	sl, #0
 80056ee:	6123      	str	r3, [r4, #16]
 80056f0:	f02b 0304 	bic.w	r3, fp, #4
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	4633      	mov	r3, r6
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	9700      	str	r7, [sp, #0]
 80056fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005700:	f000 f9d6 	bl	8005ab0 <_printf_common>
 8005704:	3001      	adds	r0, #1
 8005706:	f040 8090 	bne.w	800582a <_printf_float+0x1d6>
 800570a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570e:	b011      	add	sp, #68	; 0x44
 8005710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005714:	4652      	mov	r2, sl
 8005716:	4643      	mov	r3, r8
 8005718:	4650      	mov	r0, sl
 800571a:	4641      	mov	r1, r8
 800571c:	f7fb f976 	bl	8000a0c <__aeabi_dcmpun>
 8005720:	b148      	cbz	r0, 8005736 <_printf_float+0xe2>
 8005722:	f1b8 0f00 	cmp.w	r8, #0
 8005726:	bfb8      	it	lt
 8005728:	232d      	movlt	r3, #45	; 0x2d
 800572a:	4a80      	ldr	r2, [pc, #512]	; (800592c <_printf_float+0x2d8>)
 800572c:	bfb8      	it	lt
 800572e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005732:	4b7f      	ldr	r3, [pc, #508]	; (8005930 <_printf_float+0x2dc>)
 8005734:	e7d3      	b.n	80056de <_printf_float+0x8a>
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	d142      	bne.n	80057c6 <_printf_float+0x172>
 8005740:	2306      	movs	r3, #6
 8005742:	6063      	str	r3, [r4, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	9206      	str	r2, [sp, #24]
 8005748:	aa0e      	add	r2, sp, #56	; 0x38
 800574a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800574e:	aa0d      	add	r2, sp, #52	; 0x34
 8005750:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005754:	9203      	str	r2, [sp, #12]
 8005756:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800575a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	4652      	mov	r2, sl
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	4628      	mov	r0, r5
 8005768:	4643      	mov	r3, r8
 800576a:	910b      	str	r1, [sp, #44]	; 0x2c
 800576c:	f7ff fed6 	bl	800551c <__cvt>
 8005770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005772:	4680      	mov	r8, r0
 8005774:	2947      	cmp	r1, #71	; 0x47
 8005776:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005778:	d108      	bne.n	800578c <_printf_float+0x138>
 800577a:	1cc8      	adds	r0, r1, #3
 800577c:	db02      	blt.n	8005784 <_printf_float+0x130>
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	4299      	cmp	r1, r3
 8005782:	dd40      	ble.n	8005806 <_printf_float+0x1b2>
 8005784:	f1a9 0902 	sub.w	r9, r9, #2
 8005788:	fa5f f989 	uxtb.w	r9, r9
 800578c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005790:	d81f      	bhi.n	80057d2 <_printf_float+0x17e>
 8005792:	464a      	mov	r2, r9
 8005794:	3901      	subs	r1, #1
 8005796:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800579a:	910d      	str	r1, [sp, #52]	; 0x34
 800579c:	f7ff ff1d 	bl	80055da <__exponent>
 80057a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057a2:	4682      	mov	sl, r0
 80057a4:	1813      	adds	r3, r2, r0
 80057a6:	2a01      	cmp	r2, #1
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	dc02      	bgt.n	80057b2 <_printf_float+0x15e>
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	07d2      	lsls	r2, r2, #31
 80057b0:	d501      	bpl.n	80057b6 <_printf_float+0x162>
 80057b2:	3301      	adds	r3, #1
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d09b      	beq.n	80056f6 <_printf_float+0xa2>
 80057be:	232d      	movs	r3, #45	; 0x2d
 80057c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c4:	e797      	b.n	80056f6 <_printf_float+0xa2>
 80057c6:	2947      	cmp	r1, #71	; 0x47
 80057c8:	d1bc      	bne.n	8005744 <_printf_float+0xf0>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ba      	bne.n	8005744 <_printf_float+0xf0>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e7b7      	b.n	8005742 <_printf_float+0xee>
 80057d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80057d6:	d118      	bne.n	800580a <_printf_float+0x1b6>
 80057d8:	2900      	cmp	r1, #0
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	dd0b      	ble.n	80057f6 <_printf_float+0x1a2>
 80057de:	6121      	str	r1, [r4, #16]
 80057e0:	b913      	cbnz	r3, 80057e8 <_printf_float+0x194>
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	07d0      	lsls	r0, r2, #31
 80057e6:	d502      	bpl.n	80057ee <_printf_float+0x19a>
 80057e8:	3301      	adds	r3, #1
 80057ea:	440b      	add	r3, r1
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	f04f 0a00 	mov.w	sl, #0
 80057f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80057f4:	e7df      	b.n	80057b6 <_printf_float+0x162>
 80057f6:	b913      	cbnz	r3, 80057fe <_printf_float+0x1aa>
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	07d2      	lsls	r2, r2, #31
 80057fc:	d501      	bpl.n	8005802 <_printf_float+0x1ae>
 80057fe:	3302      	adds	r3, #2
 8005800:	e7f4      	b.n	80057ec <_printf_float+0x198>
 8005802:	2301      	movs	r3, #1
 8005804:	e7f2      	b.n	80057ec <_printf_float+0x198>
 8005806:	f04f 0967 	mov.w	r9, #103	; 0x67
 800580a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800580c:	4299      	cmp	r1, r3
 800580e:	db05      	blt.n	800581c <_printf_float+0x1c8>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	6121      	str	r1, [r4, #16]
 8005814:	07d8      	lsls	r0, r3, #31
 8005816:	d5ea      	bpl.n	80057ee <_printf_float+0x19a>
 8005818:	1c4b      	adds	r3, r1, #1
 800581a:	e7e7      	b.n	80057ec <_printf_float+0x198>
 800581c:	2900      	cmp	r1, #0
 800581e:	bfcc      	ite	gt
 8005820:	2201      	movgt	r2, #1
 8005822:	f1c1 0202 	rsble	r2, r1, #2
 8005826:	4413      	add	r3, r2
 8005828:	e7e0      	b.n	80057ec <_printf_float+0x198>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	055a      	lsls	r2, r3, #21
 800582e:	d407      	bmi.n	8005840 <_printf_float+0x1ec>
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	4642      	mov	r2, r8
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	d12b      	bne.n	8005896 <_printf_float+0x242>
 800583e:	e764      	b.n	800570a <_printf_float+0xb6>
 8005840:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005844:	f240 80dd 	bls.w	8005a02 <_printf_float+0x3ae>
 8005848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800584c:	2200      	movs	r2, #0
 800584e:	2300      	movs	r3, #0
 8005850:	f7fb f8aa 	bl	80009a8 <__aeabi_dcmpeq>
 8005854:	2800      	cmp	r0, #0
 8005856:	d033      	beq.n	80058c0 <_printf_float+0x26c>
 8005858:	2301      	movs	r3, #1
 800585a:	4631      	mov	r1, r6
 800585c:	4628      	mov	r0, r5
 800585e:	4a35      	ldr	r2, [pc, #212]	; (8005934 <_printf_float+0x2e0>)
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f af51 	beq.w	800570a <_printf_float+0xb6>
 8005868:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800586c:	429a      	cmp	r2, r3
 800586e:	db02      	blt.n	8005876 <_printf_float+0x222>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	07d8      	lsls	r0, r3, #31
 8005874:	d50f      	bpl.n	8005896 <_printf_float+0x242>
 8005876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f af42 	beq.w	800570a <_printf_float+0xb6>
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	f104 091a 	add.w	r9, r4, #26
 800588e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005890:	3b01      	subs	r3, #1
 8005892:	4543      	cmp	r3, r8
 8005894:	dc09      	bgt.n	80058aa <_printf_float+0x256>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	f100 8104 	bmi.w	8005aa6 <_printf_float+0x452>
 800589e:	68e0      	ldr	r0, [r4, #12]
 80058a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058a2:	4298      	cmp	r0, r3
 80058a4:	bfb8      	it	lt
 80058a6:	4618      	movlt	r0, r3
 80058a8:	e731      	b.n	800570e <_printf_float+0xba>
 80058aa:	2301      	movs	r3, #1
 80058ac:	464a      	mov	r2, r9
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	f43f af28 	beq.w	800570a <_printf_float+0xb6>
 80058ba:	f108 0801 	add.w	r8, r8, #1
 80058be:	e7e6      	b.n	800588e <_printf_float+0x23a>
 80058c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dc38      	bgt.n	8005938 <_printf_float+0x2e4>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	4a19      	ldr	r2, [pc, #100]	; (8005934 <_printf_float+0x2e0>)
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	f43f af1a 	beq.w	800570a <_printf_float+0xb6>
 80058d6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80058da:	4313      	orrs	r3, r2
 80058dc:	d102      	bne.n	80058e4 <_printf_float+0x290>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	07d9      	lsls	r1, r3, #31
 80058e2:	d5d8      	bpl.n	8005896 <_printf_float+0x242>
 80058e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f af0b 	beq.w	800570a <_printf_float+0xb6>
 80058f4:	f04f 0900 	mov.w	r9, #0
 80058f8:	f104 0a1a 	add.w	sl, r4, #26
 80058fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058fe:	425b      	negs	r3, r3
 8005900:	454b      	cmp	r3, r9
 8005902:	dc01      	bgt.n	8005908 <_printf_float+0x2b4>
 8005904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005906:	e794      	b.n	8005832 <_printf_float+0x1de>
 8005908:	2301      	movs	r3, #1
 800590a:	4652      	mov	r2, sl
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f aef9 	beq.w	800570a <_printf_float+0xb6>
 8005918:	f109 0901 	add.w	r9, r9, #1
 800591c:	e7ee      	b.n	80058fc <_printf_float+0x2a8>
 800591e:	bf00      	nop
 8005920:	7fefffff 	.word	0x7fefffff
 8005924:	0800a314 	.word	0x0800a314
 8005928:	0800a318 	.word	0x0800a318
 800592c:	0800a31c 	.word	0x0800a31c
 8005930:	0800a320 	.word	0x0800a320
 8005934:	0800a324 	.word	0x0800a324
 8005938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800593a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800593c:	429a      	cmp	r2, r3
 800593e:	bfa8      	it	ge
 8005940:	461a      	movge	r2, r3
 8005942:	2a00      	cmp	r2, #0
 8005944:	4691      	mov	r9, r2
 8005946:	dc37      	bgt.n	80059b8 <_printf_float+0x364>
 8005948:	f04f 0b00 	mov.w	fp, #0
 800594c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005950:	f104 021a 	add.w	r2, r4, #26
 8005954:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005958:	ebaa 0309 	sub.w	r3, sl, r9
 800595c:	455b      	cmp	r3, fp
 800595e:	dc33      	bgt.n	80059c8 <_printf_float+0x374>
 8005960:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005964:	429a      	cmp	r2, r3
 8005966:	db3b      	blt.n	80059e0 <_printf_float+0x38c>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07da      	lsls	r2, r3, #31
 800596c:	d438      	bmi.n	80059e0 <_printf_float+0x38c>
 800596e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005972:	eba2 0903 	sub.w	r9, r2, r3
 8005976:	eba2 020a 	sub.w	r2, r2, sl
 800597a:	4591      	cmp	r9, r2
 800597c:	bfa8      	it	ge
 800597e:	4691      	movge	r9, r2
 8005980:	f1b9 0f00 	cmp.w	r9, #0
 8005984:	dc34      	bgt.n	80059f0 <_printf_float+0x39c>
 8005986:	f04f 0800 	mov.w	r8, #0
 800598a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800598e:	f104 0a1a 	add.w	sl, r4, #26
 8005992:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	eba3 0309 	sub.w	r3, r3, r9
 800599c:	4543      	cmp	r3, r8
 800599e:	f77f af7a 	ble.w	8005896 <_printf_float+0x242>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f aeac 	beq.w	800570a <_printf_float+0xb6>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	e7ec      	b.n	8005992 <_printf_float+0x33e>
 80059b8:	4613      	mov	r3, r2
 80059ba:	4631      	mov	r1, r6
 80059bc:	4642      	mov	r2, r8
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	d1c0      	bne.n	8005948 <_printf_float+0x2f4>
 80059c6:	e6a0      	b.n	800570a <_printf_float+0xb6>
 80059c8:	2301      	movs	r3, #1
 80059ca:	4631      	mov	r1, r6
 80059cc:	4628      	mov	r0, r5
 80059ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f ae99 	beq.w	800570a <_printf_float+0xb6>
 80059d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059da:	f10b 0b01 	add.w	fp, fp, #1
 80059de:	e7b9      	b.n	8005954 <_printf_float+0x300>
 80059e0:	4631      	mov	r1, r6
 80059e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	d1bf      	bne.n	800596e <_printf_float+0x31a>
 80059ee:	e68c      	b.n	800570a <_printf_float+0xb6>
 80059f0:	464b      	mov	r3, r9
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	eb08 020a 	add.w	r2, r8, sl
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	d1c2      	bne.n	8005986 <_printf_float+0x332>
 8005a00:	e683      	b.n	800570a <_printf_float+0xb6>
 8005a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a04:	2a01      	cmp	r2, #1
 8005a06:	dc01      	bgt.n	8005a0c <_printf_float+0x3b8>
 8005a08:	07db      	lsls	r3, r3, #31
 8005a0a:	d539      	bpl.n	8005a80 <_printf_float+0x42c>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4642      	mov	r2, r8
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f ae77 	beq.w	800570a <_printf_float+0xb6>
 8005a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f ae6f 	beq.w	800570a <_printf_float+0xb6>
 8005a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a30:	2200      	movs	r2, #0
 8005a32:	2300      	movs	r3, #0
 8005a34:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005a38:	f7fa ffb6 	bl	80009a8 <__aeabi_dcmpeq>
 8005a3c:	b9d8      	cbnz	r0, 8005a76 <_printf_float+0x422>
 8005a3e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005a42:	f108 0201 	add.w	r2, r8, #1
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d10e      	bne.n	8005a6e <_printf_float+0x41a>
 8005a50:	e65b      	b.n	800570a <_printf_float+0xb6>
 8005a52:	2301      	movs	r3, #1
 8005a54:	464a      	mov	r2, r9
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f ae54 	beq.w	800570a <_printf_float+0xb6>
 8005a62:	f108 0801 	add.w	r8, r8, #1
 8005a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	4543      	cmp	r3, r8
 8005a6c:	dcf1      	bgt.n	8005a52 <_printf_float+0x3fe>
 8005a6e:	4653      	mov	r3, sl
 8005a70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a74:	e6de      	b.n	8005834 <_printf_float+0x1e0>
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	f104 091a 	add.w	r9, r4, #26
 8005a7e:	e7f2      	b.n	8005a66 <_printf_float+0x412>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4642      	mov	r2, r8
 8005a84:	e7df      	b.n	8005a46 <_printf_float+0x3f2>
 8005a86:	2301      	movs	r3, #1
 8005a88:	464a      	mov	r2, r9
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f ae3a 	beq.w	800570a <_printf_float+0xb6>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a9e:	1a5b      	subs	r3, r3, r1
 8005aa0:	4543      	cmp	r3, r8
 8005aa2:	dcf0      	bgt.n	8005a86 <_printf_float+0x432>
 8005aa4:	e6fb      	b.n	800589e <_printf_float+0x24a>
 8005aa6:	f04f 0800 	mov.w	r8, #0
 8005aaa:	f104 0919 	add.w	r9, r4, #25
 8005aae:	e7f4      	b.n	8005a9a <_printf_float+0x446>

08005ab0 <_printf_common>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	4699      	mov	r9, r3
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	4607      	mov	r7, r0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bfb8      	it	lt
 8005ac2:	4613      	movlt	r3, r2
 8005ac4:	6033      	str	r3, [r6, #0]
 8005ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aca:	460c      	mov	r4, r1
 8005acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_printf_common+0x26>
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	0699      	lsls	r1, r3, #26
 8005ada:	bf42      	ittt	mi
 8005adc:	6833      	ldrmi	r3, [r6, #0]
 8005ade:	3302      	addmi	r3, #2
 8005ae0:	6033      	strmi	r3, [r6, #0]
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	f015 0506 	ands.w	r5, r5, #6
 8005ae8:	d106      	bne.n	8005af8 <_printf_common+0x48>
 8005aea:	f104 0a19 	add.w	sl, r4, #25
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	6832      	ldr	r2, [r6, #0]
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dc2b      	bgt.n	8005b50 <_printf_common+0xa0>
 8005af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005afc:	1e13      	subs	r3, r2, #0
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	bf18      	it	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	0692      	lsls	r2, r2, #26
 8005b06:	d430      	bmi.n	8005b6a <_printf_common+0xba>
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b10:	47c0      	blx	r8
 8005b12:	3001      	adds	r0, #1
 8005b14:	d023      	beq.n	8005b5e <_printf_common+0xae>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6922      	ldr	r2, [r4, #16]
 8005b1a:	f003 0306 	and.w	r3, r3, #6
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf14      	ite	ne
 8005b22:	2500      	movne	r5, #0
 8005b24:	6833      	ldreq	r3, [r6, #0]
 8005b26:	f04f 0600 	mov.w	r6, #0
 8005b2a:	bf08      	it	eq
 8005b2c:	68e5      	ldreq	r5, [r4, #12]
 8005b2e:	f104 041a 	add.w	r4, r4, #26
 8005b32:	bf08      	it	eq
 8005b34:	1aed      	subeq	r5, r5, r3
 8005b36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b3a:	bf08      	it	eq
 8005b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bfc4      	itt	gt
 8005b44:	1a9b      	subgt	r3, r3, r2
 8005b46:	18ed      	addgt	r5, r5, r3
 8005b48:	42b5      	cmp	r5, r6
 8005b4a:	d11a      	bne.n	8005b82 <_printf_common+0xd2>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e008      	b.n	8005b62 <_printf_common+0xb2>
 8005b50:	2301      	movs	r3, #1
 8005b52:	4652      	mov	r2, sl
 8005b54:	4649      	mov	r1, r9
 8005b56:	4638      	mov	r0, r7
 8005b58:	47c0      	blx	r8
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d103      	bne.n	8005b66 <_printf_common+0xb6>
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b66:	3501      	adds	r5, #1
 8005b68:	e7c1      	b.n	8005aee <_printf_common+0x3e>
 8005b6a:	2030      	movs	r0, #48	; 0x30
 8005b6c:	18e1      	adds	r1, r4, r3
 8005b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b78:	4422      	add	r2, r4
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b80:	e7c2      	b.n	8005b08 <_printf_common+0x58>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4622      	mov	r2, r4
 8005b86:	4649      	mov	r1, r9
 8005b88:	4638      	mov	r0, r7
 8005b8a:	47c0      	blx	r8
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0e6      	beq.n	8005b5e <_printf_common+0xae>
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7d9      	b.n	8005b48 <_printf_common+0x98>

08005b94 <_printf_i>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	7e0f      	ldrb	r7, [r1, #24]
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	2f78      	cmp	r7, #120	; 0x78
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	469a      	mov	sl, r3
 8005ba4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005baa:	d807      	bhi.n	8005bbc <_printf_i+0x28>
 8005bac:	2f62      	cmp	r7, #98	; 0x62
 8005bae:	d80a      	bhi.n	8005bc6 <_printf_i+0x32>
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	f000 80d5 	beq.w	8005d60 <_printf_i+0x1cc>
 8005bb6:	2f58      	cmp	r7, #88	; 0x58
 8005bb8:	f000 80c1 	beq.w	8005d3e <_printf_i+0x1aa>
 8005bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc4:	e03a      	b.n	8005c3c <_printf_i+0xa8>
 8005bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bca:	2b15      	cmp	r3, #21
 8005bcc:	d8f6      	bhi.n	8005bbc <_printf_i+0x28>
 8005bce:	a101      	add	r1, pc, #4	; (adr r1, 8005bd4 <_printf_i+0x40>)
 8005bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005bbd 	.word	0x08005bbd
 8005be0:	08005bbd 	.word	0x08005bbd
 8005be4:	08005bbd 	.word	0x08005bbd
 8005be8:	08005bbd 	.word	0x08005bbd
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005bbd 	.word	0x08005bbd
 8005bf4:	08005bbd 	.word	0x08005bbd
 8005bf8:	08005bbd 	.word	0x08005bbd
 8005bfc:	08005bbd 	.word	0x08005bbd
 8005c00:	08005d47 	.word	0x08005d47
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005d01 	.word	0x08005d01
 8005c0c:	08005bbd 	.word	0x08005bbd
 8005c10:	08005bbd 	.word	0x08005bbd
 8005c14:	08005d69 	.word	0x08005d69
 8005c18:	08005bbd 	.word	0x08005bbd
 8005c1c:	08005c6d 	.word	0x08005c6d
 8005c20:	08005bbd 	.word	0x08005bbd
 8005c24:	08005bbd 	.word	0x08005bbd
 8005c28:	08005d09 	.word	0x08005d09
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0a0      	b.n	8005d82 <_printf_i+0x1ee>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	0607      	lsls	r7, r0, #24
 8005c46:	f103 0104 	add.w	r1, r3, #4
 8005c4a:	6029      	str	r1, [r5, #0]
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0xbe>
 8005c4e:	681e      	ldr	r6, [r3, #0]
 8005c50:	e003      	b.n	8005c5a <_printf_i+0xc6>
 8005c52:	0646      	lsls	r6, r0, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0xba>
 8005c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	da03      	bge.n	8005c66 <_printf_i+0xd2>
 8005c5e:	232d      	movs	r3, #45	; 0x2d
 8005c60:	4276      	negs	r6, r6
 8005c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c66:	230a      	movs	r3, #10
 8005c68:	4859      	ldr	r0, [pc, #356]	; (8005dd0 <_printf_i+0x23c>)
 8005c6a:	e012      	b.n	8005c92 <_printf_i+0xfe>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	6029      	str	r1, [r5, #0]
 8005c74:	0605      	lsls	r5, r0, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xe8>
 8005c78:	681e      	ldr	r6, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0xee>
 8005c7c:	0641      	lsls	r1, r0, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xe4>
 8005c80:	881e      	ldrh	r6, [r3, #0]
 8005c82:	2f6f      	cmp	r7, #111	; 0x6f
 8005c84:	bf0c      	ite	eq
 8005c86:	2308      	moveq	r3, #8
 8005c88:	230a      	movne	r3, #10
 8005c8a:	4851      	ldr	r0, [pc, #324]	; (8005dd0 <_printf_i+0x23c>)
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c92:	6865      	ldr	r5, [r4, #4]
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	bfa8      	it	ge
 8005c98:	6821      	ldrge	r1, [r4, #0]
 8005c9a:	60a5      	str	r5, [r4, #8]
 8005c9c:	bfa4      	itt	ge
 8005c9e:	f021 0104 	bicge.w	r1, r1, #4
 8005ca2:	6021      	strge	r1, [r4, #0]
 8005ca4:	b90e      	cbnz	r6, 8005caa <_printf_i+0x116>
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	d04b      	beq.n	8005d42 <_printf_i+0x1ae>
 8005caa:	4615      	mov	r5, r2
 8005cac:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cb0:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb4:	5dc7      	ldrb	r7, [r0, r7]
 8005cb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cba:	4637      	mov	r7, r6
 8005cbc:	42bb      	cmp	r3, r7
 8005cbe:	460e      	mov	r6, r1
 8005cc0:	d9f4      	bls.n	8005cac <_printf_i+0x118>
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d10b      	bne.n	8005cde <_printf_i+0x14a>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	07de      	lsls	r6, r3, #31
 8005cca:	d508      	bpl.n	8005cde <_printf_i+0x14a>
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	6861      	ldr	r1, [r4, #4]
 8005cd0:	4299      	cmp	r1, r3
 8005cd2:	bfde      	ittt	le
 8005cd4:	2330      	movle	r3, #48	; 0x30
 8005cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cda:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cde:	1b52      	subs	r2, r2, r5
 8005ce0:	6122      	str	r2, [r4, #16]
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	f8cd a000 	str.w	sl, [sp]
 8005cec:	aa03      	add	r2, sp, #12
 8005cee:	f7ff fedf 	bl	8005ab0 <_printf_common>
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d14a      	bne.n	8005d8c <_printf_i+0x1f8>
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cfa:	b004      	add	sp, #16
 8005cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	f043 0320 	orr.w	r3, r3, #32
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	2778      	movs	r7, #120	; 0x78
 8005d0a:	4832      	ldr	r0, [pc, #200]	; (8005dd4 <_printf_i+0x240>)
 8005d0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	6829      	ldr	r1, [r5, #0]
 8005d14:	061f      	lsls	r7, r3, #24
 8005d16:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d1a:	d402      	bmi.n	8005d22 <_printf_i+0x18e>
 8005d1c:	065f      	lsls	r7, r3, #25
 8005d1e:	bf48      	it	mi
 8005d20:	b2b6      	uxthmi	r6, r6
 8005d22:	07df      	lsls	r7, r3, #31
 8005d24:	bf48      	it	mi
 8005d26:	f043 0320 	orrmi.w	r3, r3, #32
 8005d2a:	6029      	str	r1, [r5, #0]
 8005d2c:	bf48      	it	mi
 8005d2e:	6023      	strmi	r3, [r4, #0]
 8005d30:	b91e      	cbnz	r6, 8005d3a <_printf_i+0x1a6>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	f023 0320 	bic.w	r3, r3, #32
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	e7a6      	b.n	8005c8c <_printf_i+0xf8>
 8005d3e:	4824      	ldr	r0, [pc, #144]	; (8005dd0 <_printf_i+0x23c>)
 8005d40:	e7e4      	b.n	8005d0c <_printf_i+0x178>
 8005d42:	4615      	mov	r5, r2
 8005d44:	e7bd      	b.n	8005cc2 <_printf_i+0x12e>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	6826      	ldr	r6, [r4, #0]
 8005d4a:	1d18      	adds	r0, r3, #4
 8005d4c:	6961      	ldr	r1, [r4, #20]
 8005d4e:	6028      	str	r0, [r5, #0]
 8005d50:	0635      	lsls	r5, r6, #24
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	d501      	bpl.n	8005d5a <_printf_i+0x1c6>
 8005d56:	6019      	str	r1, [r3, #0]
 8005d58:	e002      	b.n	8005d60 <_printf_i+0x1cc>
 8005d5a:	0670      	lsls	r0, r6, #25
 8005d5c:	d5fb      	bpl.n	8005d56 <_printf_i+0x1c2>
 8005d5e:	8019      	strh	r1, [r3, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	4615      	mov	r5, r2
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	e7bc      	b.n	8005ce2 <_printf_i+0x14e>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 f9c1 	bl	80060fc <memchr>
 8005d7a:	b108      	cbz	r0, 8005d80 <_printf_i+0x1ec>
 8005d7c:	1b40      	subs	r0, r0, r5
 8005d7e:	6060      	str	r0, [r4, #4]
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	6123      	str	r3, [r4, #16]
 8005d84:	2300      	movs	r3, #0
 8005d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8a:	e7aa      	b.n	8005ce2 <_printf_i+0x14e>
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	47d0      	blx	sl
 8005d96:	3001      	adds	r0, #1
 8005d98:	d0ad      	beq.n	8005cf6 <_printf_i+0x162>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	079b      	lsls	r3, r3, #30
 8005d9e:	d413      	bmi.n	8005dc8 <_printf_i+0x234>
 8005da0:	68e0      	ldr	r0, [r4, #12]
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	4298      	cmp	r0, r3
 8005da6:	bfb8      	it	lt
 8005da8:	4618      	movlt	r0, r3
 8005daa:	e7a6      	b.n	8005cfa <_printf_i+0x166>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4632      	mov	r2, r6
 8005db0:	4649      	mov	r1, r9
 8005db2:	4640      	mov	r0, r8
 8005db4:	47d0      	blx	sl
 8005db6:	3001      	adds	r0, #1
 8005db8:	d09d      	beq.n	8005cf6 <_printf_i+0x162>
 8005dba:	3501      	adds	r5, #1
 8005dbc:	68e3      	ldr	r3, [r4, #12]
 8005dbe:	9903      	ldr	r1, [sp, #12]
 8005dc0:	1a5b      	subs	r3, r3, r1
 8005dc2:	42ab      	cmp	r3, r5
 8005dc4:	dcf2      	bgt.n	8005dac <_printf_i+0x218>
 8005dc6:	e7eb      	b.n	8005da0 <_printf_i+0x20c>
 8005dc8:	2500      	movs	r5, #0
 8005dca:	f104 0619 	add.w	r6, r4, #25
 8005dce:	e7f5      	b.n	8005dbc <_printf_i+0x228>
 8005dd0:	0800a326 	.word	0x0800a326
 8005dd4:	0800a337 	.word	0x0800a337

08005dd8 <std>:
 8005dd8:	2300      	movs	r3, #0
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	4604      	mov	r4, r0
 8005dde:	e9c0 3300 	strd	r3, r3, [r0]
 8005de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005de6:	6083      	str	r3, [r0, #8]
 8005de8:	8181      	strh	r1, [r0, #12]
 8005dea:	6643      	str	r3, [r0, #100]	; 0x64
 8005dec:	81c2      	strh	r2, [r0, #14]
 8005dee:	6183      	str	r3, [r0, #24]
 8005df0:	4619      	mov	r1, r3
 8005df2:	2208      	movs	r2, #8
 8005df4:	305c      	adds	r0, #92	; 0x5c
 8005df6:	f000 f902 	bl	8005ffe <memset>
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <std+0x38>)
 8005dfc:	6224      	str	r4, [r4, #32]
 8005dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <std+0x3c>)
 8005e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <std+0x40>)
 8005e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <std+0x44>)
 8005e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	bf00      	nop
 8005e10:	08005f79 	.word	0x08005f79
 8005e14:	08005f9b 	.word	0x08005f9b
 8005e18:	08005fd3 	.word	0x08005fd3
 8005e1c:	08005ff7 	.word	0x08005ff7

08005e20 <stdio_exit_handler>:
 8005e20:	4a02      	ldr	r2, [pc, #8]	; (8005e2c <stdio_exit_handler+0xc>)
 8005e22:	4903      	ldr	r1, [pc, #12]	; (8005e30 <stdio_exit_handler+0x10>)
 8005e24:	4803      	ldr	r0, [pc, #12]	; (8005e34 <stdio_exit_handler+0x14>)
 8005e26:	f000 b869 	b.w	8005efc <_fwalk_sglue>
 8005e2a:	bf00      	nop
 8005e2c:	2000018c 	.word	0x2000018c
 8005e30:	08007a95 	.word	0x08007a95
 8005e34:	20000198 	.word	0x20000198

08005e38 <cleanup_stdio>:
 8005e38:	6841      	ldr	r1, [r0, #4]
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <cleanup_stdio+0x34>)
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4299      	cmp	r1, r3
 8005e40:	4604      	mov	r4, r0
 8005e42:	d001      	beq.n	8005e48 <cleanup_stdio+0x10>
 8005e44:	f001 fe26 	bl	8007a94 <_fflush_r>
 8005e48:	68a1      	ldr	r1, [r4, #8]
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <cleanup_stdio+0x38>)
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <cleanup_stdio+0x1e>
 8005e50:	4620      	mov	r0, r4
 8005e52:	f001 fe1f 	bl	8007a94 <_fflush_r>
 8005e56:	68e1      	ldr	r1, [r4, #12]
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <cleanup_stdio+0x3c>)
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	d004      	beq.n	8005e68 <cleanup_stdio+0x30>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	f001 be16 	b.w	8007a94 <_fflush_r>
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20001a50 	.word	0x20001a50
 8005e70:	20001ab8 	.word	0x20001ab8
 8005e74:	20001b20 	.word	0x20001b20

08005e78 <global_stdio_init.part.0>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <global_stdio_init.part.0+0x30>)
 8005e7c:	4c0b      	ldr	r4, [pc, #44]	; (8005eac <global_stdio_init.part.0+0x34>)
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	; (8005eb0 <global_stdio_init.part.0+0x38>)
 8005e80:	4620      	mov	r0, r4
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	2104      	movs	r1, #4
 8005e86:	2200      	movs	r2, #0
 8005e88:	f7ff ffa6 	bl	8005dd8 <std>
 8005e8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e90:	2201      	movs	r2, #1
 8005e92:	2109      	movs	r1, #9
 8005e94:	f7ff ffa0 	bl	8005dd8 <std>
 8005e98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea2:	2112      	movs	r1, #18
 8005ea4:	f7ff bf98 	b.w	8005dd8 <std>
 8005ea8:	20001b88 	.word	0x20001b88
 8005eac:	20001a50 	.word	0x20001a50
 8005eb0:	08005e21 	.word	0x08005e21

08005eb4 <__sfp_lock_acquire>:
 8005eb4:	4801      	ldr	r0, [pc, #4]	; (8005ebc <__sfp_lock_acquire+0x8>)
 8005eb6:	f000 b91f 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 8005eba:	bf00      	nop
 8005ebc:	20001b91 	.word	0x20001b91

08005ec0 <__sfp_lock_release>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	; (8005ec8 <__sfp_lock_release+0x8>)
 8005ec2:	f000 b91a 	b.w	80060fa <__retarget_lock_release_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	20001b91 	.word	0x20001b91

08005ecc <__sinit>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4604      	mov	r4, r0
 8005ed0:	f7ff fff0 	bl	8005eb4 <__sfp_lock_acquire>
 8005ed4:	6a23      	ldr	r3, [r4, #32]
 8005ed6:	b11b      	cbz	r3, 8005ee0 <__sinit+0x14>
 8005ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005edc:	f7ff bff0 	b.w	8005ec0 <__sfp_lock_release>
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <__sinit+0x28>)
 8005ee2:	6223      	str	r3, [r4, #32]
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <__sinit+0x2c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f5      	bne.n	8005ed8 <__sinit+0xc>
 8005eec:	f7ff ffc4 	bl	8005e78 <global_stdio_init.part.0>
 8005ef0:	e7f2      	b.n	8005ed8 <__sinit+0xc>
 8005ef2:	bf00      	nop
 8005ef4:	08005e39 	.word	0x08005e39
 8005ef8:	20001b88 	.word	0x20001b88

08005efc <_fwalk_sglue>:
 8005efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f00:	4607      	mov	r7, r0
 8005f02:	4688      	mov	r8, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	2600      	movs	r6, #0
 8005f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f10:	d505      	bpl.n	8005f1e <_fwalk_sglue+0x22>
 8005f12:	6824      	ldr	r4, [r4, #0]
 8005f14:	2c00      	cmp	r4, #0
 8005f16:	d1f7      	bne.n	8005f08 <_fwalk_sglue+0xc>
 8005f18:	4630      	mov	r0, r6
 8005f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d907      	bls.n	8005f34 <_fwalk_sglue+0x38>
 8005f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	d003      	beq.n	8005f34 <_fwalk_sglue+0x38>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	4306      	orrs	r6, r0
 8005f34:	3568      	adds	r5, #104	; 0x68
 8005f36:	e7e9      	b.n	8005f0c <_fwalk_sglue+0x10>

08005f38 <siprintf>:
 8005f38:	b40e      	push	{r1, r2, r3}
 8005f3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f3e:	b500      	push	{lr}
 8005f40:	b09c      	sub	sp, #112	; 0x70
 8005f42:	ab1d      	add	r3, sp, #116	; 0x74
 8005f44:	9002      	str	r0, [sp, #8]
 8005f46:	9006      	str	r0, [sp, #24]
 8005f48:	9107      	str	r1, [sp, #28]
 8005f4a:	9104      	str	r1, [sp, #16]
 8005f4c:	4808      	ldr	r0, [pc, #32]	; (8005f70 <siprintf+0x38>)
 8005f4e:	4909      	ldr	r1, [pc, #36]	; (8005f74 <siprintf+0x3c>)
 8005f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f54:	9105      	str	r1, [sp, #20]
 8005f56:	6800      	ldr	r0, [r0, #0]
 8005f58:	a902      	add	r1, sp, #8
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	f001 fc1a 	bl	8007794 <_svfiprintf_r>
 8005f60:	2200      	movs	r2, #0
 8005f62:	9b02      	ldr	r3, [sp, #8]
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	b01c      	add	sp, #112	; 0x70
 8005f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f6c:	b003      	add	sp, #12
 8005f6e:	4770      	bx	lr
 8005f70:	200001e4 	.word	0x200001e4
 8005f74:	ffff0208 	.word	0xffff0208

08005f78 <__sread>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f80:	f000 f86c 	bl	800605c <_read_r>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	bfab      	itete	ge
 8005f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f8c:	181b      	addge	r3, r3, r0
 8005f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f92:	bfac      	ite	ge
 8005f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f96:	81a3      	strhlt	r3, [r4, #12]
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <__swrite>:
 8005f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9e:	461f      	mov	r7, r3
 8005fa0:	898b      	ldrh	r3, [r1, #12]
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	05db      	lsls	r3, r3, #23
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	4616      	mov	r6, r2
 8005faa:	d505      	bpl.n	8005fb8 <__swrite+0x1e>
 8005fac:	2302      	movs	r3, #2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb4:	f000 f840 	bl	8006038 <_lseek_r>
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	4632      	mov	r2, r6
 8005fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	f000 b857 	b.w	8006080 <_write_r>

08005fd2 <__sseek>:
 8005fd2:	b510      	push	{r4, lr}
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fda:	f000 f82d 	bl	8006038 <_lseek_r>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	bf15      	itete	ne
 8005fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fee:	81a3      	strheq	r3, [r4, #12]
 8005ff0:	bf18      	it	ne
 8005ff2:	81a3      	strhne	r3, [r4, #12]
 8005ff4:	bd10      	pop	{r4, pc}

08005ff6 <__sclose>:
 8005ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffa:	f000 b80d 	b.w	8006018 <_close_r>

08005ffe <memset>:
 8005ffe:	4603      	mov	r3, r0
 8006000:	4402      	add	r2, r0
 8006002:	4293      	cmp	r3, r2
 8006004:	d100      	bne.n	8006008 <memset+0xa>
 8006006:	4770      	bx	lr
 8006008:	f803 1b01 	strb.w	r1, [r3], #1
 800600c:	e7f9      	b.n	8006002 <memset+0x4>
	...

08006010 <_localeconv_r>:
 8006010:	4800      	ldr	r0, [pc, #0]	; (8006014 <_localeconv_r+0x4>)
 8006012:	4770      	bx	lr
 8006014:	200002d8 	.word	0x200002d8

08006018 <_close_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	2300      	movs	r3, #0
 800601c:	4d05      	ldr	r5, [pc, #20]	; (8006034 <_close_r+0x1c>)
 800601e:	4604      	mov	r4, r0
 8006020:	4608      	mov	r0, r1
 8006022:	602b      	str	r3, [r5, #0]
 8006024:	f7fb fc18 	bl	8001858 <_close>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_close_r+0x1a>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_close_r+0x1a>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20001b8c 	.word	0x20001b8c

08006038 <_lseek_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	2200      	movs	r2, #0
 8006042:	4d05      	ldr	r5, [pc, #20]	; (8006058 <_lseek_r+0x20>)
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f7fb fc10 	bl	800186c <_lseek>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_lseek_r+0x1e>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_lseek_r+0x1e>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20001b8c 	.word	0x20001b8c

0800605c <_read_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4604      	mov	r4, r0
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	2200      	movs	r2, #0
 8006066:	4d05      	ldr	r5, [pc, #20]	; (800607c <_read_r+0x20>)
 8006068:	602a      	str	r2, [r5, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f7fb fbd8 	bl	8001820 <_read>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_read_r+0x1e>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_read_r+0x1e>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20001b8c 	.word	0x20001b8c

08006080 <_write_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	2200      	movs	r2, #0
 800608a:	4d05      	ldr	r5, [pc, #20]	; (80060a0 <_write_r+0x20>)
 800608c:	602a      	str	r2, [r5, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	f7fb fbd4 	bl	800183c <_write>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_write_r+0x1e>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_write_r+0x1e>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	20001b8c 	.word	0x20001b8c

080060a4 <__errno>:
 80060a4:	4b01      	ldr	r3, [pc, #4]	; (80060ac <__errno+0x8>)
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	200001e4 	.word	0x200001e4

080060b0 <__libc_init_array>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	2600      	movs	r6, #0
 80060b4:	4d0c      	ldr	r5, [pc, #48]	; (80060e8 <__libc_init_array+0x38>)
 80060b6:	4c0d      	ldr	r4, [pc, #52]	; (80060ec <__libc_init_array+0x3c>)
 80060b8:	1b64      	subs	r4, r4, r5
 80060ba:	10a4      	asrs	r4, r4, #2
 80060bc:	42a6      	cmp	r6, r4
 80060be:	d109      	bne.n	80060d4 <__libc_init_array+0x24>
 80060c0:	f002 f888 	bl	80081d4 <_init>
 80060c4:	2600      	movs	r6, #0
 80060c6:	4d0a      	ldr	r5, [pc, #40]	; (80060f0 <__libc_init_array+0x40>)
 80060c8:	4c0a      	ldr	r4, [pc, #40]	; (80060f4 <__libc_init_array+0x44>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	d105      	bne.n	80060de <__libc_init_array+0x2e>
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d8:	4798      	blx	r3
 80060da:	3601      	adds	r6, #1
 80060dc:	e7ee      	b.n	80060bc <__libc_init_array+0xc>
 80060de:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e2:	4798      	blx	r3
 80060e4:	3601      	adds	r6, #1
 80060e6:	e7f2      	b.n	80060ce <__libc_init_array+0x1e>
 80060e8:	0800a684 	.word	0x0800a684
 80060ec:	0800a684 	.word	0x0800a684
 80060f0:	0800a684 	.word	0x0800a684
 80060f4:	0800a688 	.word	0x0800a688

080060f8 <__retarget_lock_acquire_recursive>:
 80060f8:	4770      	bx	lr

080060fa <__retarget_lock_release_recursive>:
 80060fa:	4770      	bx	lr

080060fc <memchr>:
 80060fc:	4603      	mov	r3, r0
 80060fe:	b510      	push	{r4, lr}
 8006100:	b2c9      	uxtb	r1, r1
 8006102:	4402      	add	r2, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	4618      	mov	r0, r3
 8006108:	d101      	bne.n	800610e <memchr+0x12>
 800610a:	2000      	movs	r0, #0
 800610c:	e003      	b.n	8006116 <memchr+0x1a>
 800610e:	7804      	ldrb	r4, [r0, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	428c      	cmp	r4, r1
 8006114:	d1f6      	bne.n	8006104 <memchr+0x8>
 8006116:	bd10      	pop	{r4, pc}

08006118 <quorem>:
 8006118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	6903      	ldr	r3, [r0, #16]
 800611e:	690c      	ldr	r4, [r1, #16]
 8006120:	4607      	mov	r7, r0
 8006122:	42a3      	cmp	r3, r4
 8006124:	db7f      	blt.n	8006226 <quorem+0x10e>
 8006126:	3c01      	subs	r4, #1
 8006128:	f100 0514 	add.w	r5, r0, #20
 800612c:	f101 0814 	add.w	r8, r1, #20
 8006130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800613a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800613e:	3301      	adds	r3, #1
 8006140:	429a      	cmp	r2, r3
 8006142:	fbb2 f6f3 	udiv	r6, r2, r3
 8006146:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800614a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800614e:	d331      	bcc.n	80061b4 <quorem+0x9c>
 8006150:	f04f 0e00 	mov.w	lr, #0
 8006154:	4640      	mov	r0, r8
 8006156:	46ac      	mov	ip, r5
 8006158:	46f2      	mov	sl, lr
 800615a:	f850 2b04 	ldr.w	r2, [r0], #4
 800615e:	b293      	uxth	r3, r2
 8006160:	fb06 e303 	mla	r3, r6, r3, lr
 8006164:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006168:	0c1a      	lsrs	r2, r3, #16
 800616a:	b29b      	uxth	r3, r3
 800616c:	fb06 220e 	mla	r2, r6, lr, r2
 8006170:	ebaa 0303 	sub.w	r3, sl, r3
 8006174:	f8dc a000 	ldr.w	sl, [ip]
 8006178:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800617c:	fa1f fa8a 	uxth.w	sl, sl
 8006180:	4453      	add	r3, sl
 8006182:	f8dc a000 	ldr.w	sl, [ip]
 8006186:	b292      	uxth	r2, r2
 8006188:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800618c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006190:	b29b      	uxth	r3, r3
 8006192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006196:	4581      	cmp	r9, r0
 8006198:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800619c:	f84c 3b04 	str.w	r3, [ip], #4
 80061a0:	d2db      	bcs.n	800615a <quorem+0x42>
 80061a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80061a6:	b92b      	cbnz	r3, 80061b4 <quorem+0x9c>
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	3b04      	subs	r3, #4
 80061ac:	429d      	cmp	r5, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	d32d      	bcc.n	800620e <quorem+0xf6>
 80061b2:	613c      	str	r4, [r7, #16]
 80061b4:	4638      	mov	r0, r7
 80061b6:	f001 f995 	bl	80074e4 <__mcmp>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	db23      	blt.n	8006206 <quorem+0xee>
 80061be:	4629      	mov	r1, r5
 80061c0:	2000      	movs	r0, #0
 80061c2:	3601      	adds	r6, #1
 80061c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80061c8:	f8d1 c000 	ldr.w	ip, [r1]
 80061cc:	b293      	uxth	r3, r2
 80061ce:	1ac3      	subs	r3, r0, r3
 80061d0:	0c12      	lsrs	r2, r2, #16
 80061d2:	fa1f f08c 	uxth.w	r0, ip
 80061d6:	4403      	add	r3, r0
 80061d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80061dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061e6:	45c1      	cmp	r9, r8
 80061e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061ec:	f841 3b04 	str.w	r3, [r1], #4
 80061f0:	d2e8      	bcs.n	80061c4 <quorem+0xac>
 80061f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061fa:	b922      	cbnz	r2, 8006206 <quorem+0xee>
 80061fc:	3b04      	subs	r3, #4
 80061fe:	429d      	cmp	r5, r3
 8006200:	461a      	mov	r2, r3
 8006202:	d30a      	bcc.n	800621a <quorem+0x102>
 8006204:	613c      	str	r4, [r7, #16]
 8006206:	4630      	mov	r0, r6
 8006208:	b003      	add	sp, #12
 800620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	3b04      	subs	r3, #4
 8006212:	2a00      	cmp	r2, #0
 8006214:	d1cd      	bne.n	80061b2 <quorem+0x9a>
 8006216:	3c01      	subs	r4, #1
 8006218:	e7c8      	b.n	80061ac <quorem+0x94>
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	3b04      	subs	r3, #4
 800621e:	2a00      	cmp	r2, #0
 8006220:	d1f0      	bne.n	8006204 <quorem+0xec>
 8006222:	3c01      	subs	r4, #1
 8006224:	e7eb      	b.n	80061fe <quorem+0xe6>
 8006226:	2000      	movs	r0, #0
 8006228:	e7ee      	b.n	8006208 <quorem+0xf0>
 800622a:	0000      	movs	r0, r0
 800622c:	0000      	movs	r0, r0
	...

08006230 <_dtoa_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	4616      	mov	r6, r2
 8006236:	461f      	mov	r7, r3
 8006238:	69c4      	ldr	r4, [r0, #28]
 800623a:	b099      	sub	sp, #100	; 0x64
 800623c:	4605      	mov	r5, r0
 800623e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006242:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006246:	b974      	cbnz	r4, 8006266 <_dtoa_r+0x36>
 8006248:	2010      	movs	r0, #16
 800624a:	f000 fe1d 	bl	8006e88 <malloc>
 800624e:	4602      	mov	r2, r0
 8006250:	61e8      	str	r0, [r5, #28]
 8006252:	b920      	cbnz	r0, 800625e <_dtoa_r+0x2e>
 8006254:	21ef      	movs	r1, #239	; 0xef
 8006256:	4bac      	ldr	r3, [pc, #688]	; (8006508 <_dtoa_r+0x2d8>)
 8006258:	48ac      	ldr	r0, [pc, #688]	; (800650c <_dtoa_r+0x2dc>)
 800625a:	f001 fc7b 	bl	8007b54 <__assert_func>
 800625e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006262:	6004      	str	r4, [r0, #0]
 8006264:	60c4      	str	r4, [r0, #12]
 8006266:	69eb      	ldr	r3, [r5, #28]
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	b151      	cbz	r1, 8006282 <_dtoa_r+0x52>
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	2301      	movs	r3, #1
 8006270:	4093      	lsls	r3, r2
 8006272:	604a      	str	r2, [r1, #4]
 8006274:	608b      	str	r3, [r1, #8]
 8006276:	4628      	mov	r0, r5
 8006278:	f000 fefa 	bl	8007070 <_Bfree>
 800627c:	2200      	movs	r2, #0
 800627e:	69eb      	ldr	r3, [r5, #28]
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	1e3b      	subs	r3, r7, #0
 8006284:	bfaf      	iteee	ge
 8006286:	2300      	movge	r3, #0
 8006288:	2201      	movlt	r2, #1
 800628a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800628e:	9305      	strlt	r3, [sp, #20]
 8006290:	bfa8      	it	ge
 8006292:	f8c8 3000 	strge.w	r3, [r8]
 8006296:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800629a:	4b9d      	ldr	r3, [pc, #628]	; (8006510 <_dtoa_r+0x2e0>)
 800629c:	bfb8      	it	lt
 800629e:	f8c8 2000 	strlt.w	r2, [r8]
 80062a2:	ea33 0309 	bics.w	r3, r3, r9
 80062a6:	d119      	bne.n	80062dc <_dtoa_r+0xac>
 80062a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80062ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062b4:	4333      	orrs	r3, r6
 80062b6:	f000 8589 	beq.w	8006dcc <_dtoa_r+0xb9c>
 80062ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062bc:	b953      	cbnz	r3, 80062d4 <_dtoa_r+0xa4>
 80062be:	4b95      	ldr	r3, [pc, #596]	; (8006514 <_dtoa_r+0x2e4>)
 80062c0:	e023      	b.n	800630a <_dtoa_r+0xda>
 80062c2:	4b95      	ldr	r3, [pc, #596]	; (8006518 <_dtoa_r+0x2e8>)
 80062c4:	9303      	str	r3, [sp, #12]
 80062c6:	3308      	adds	r3, #8
 80062c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	9803      	ldr	r0, [sp, #12]
 80062ce:	b019      	add	sp, #100	; 0x64
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	4b8f      	ldr	r3, [pc, #572]	; (8006514 <_dtoa_r+0x2e4>)
 80062d6:	9303      	str	r3, [sp, #12]
 80062d8:	3303      	adds	r3, #3
 80062da:	e7f5      	b.n	80062c8 <_dtoa_r+0x98>
 80062dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80062e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062e8:	2200      	movs	r2, #0
 80062ea:	2300      	movs	r3, #0
 80062ec:	f7fa fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80062f0:	4680      	mov	r8, r0
 80062f2:	b160      	cbz	r0, 800630e <_dtoa_r+0xde>
 80062f4:	2301      	movs	r3, #1
 80062f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8562 	beq.w	8006dc6 <_dtoa_r+0xb96>
 8006302:	4b86      	ldr	r3, [pc, #536]	; (800651c <_dtoa_r+0x2ec>)
 8006304:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	e7de      	b.n	80062cc <_dtoa_r+0x9c>
 800630e:	ab16      	add	r3, sp, #88	; 0x58
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	ab17      	add	r3, sp, #92	; 0x5c
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4628      	mov	r0, r5
 8006318:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800631c:	f001 f98a 	bl	8007634 <__d2b>
 8006320:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006324:	4682      	mov	sl, r0
 8006326:	2c00      	cmp	r4, #0
 8006328:	d07e      	beq.n	8006428 <_dtoa_r+0x1f8>
 800632a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800632e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006330:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006338:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800633c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006340:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006344:	4619      	mov	r1, r3
 8006346:	2200      	movs	r2, #0
 8006348:	4b75      	ldr	r3, [pc, #468]	; (8006520 <_dtoa_r+0x2f0>)
 800634a:	f7f9 ff0d 	bl	8000168 <__aeabi_dsub>
 800634e:	a368      	add	r3, pc, #416	; (adr r3, 80064f0 <_dtoa_r+0x2c0>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa f8c0 	bl	80004d8 <__aeabi_dmul>
 8006358:	a367      	add	r3, pc, #412	; (adr r3, 80064f8 <_dtoa_r+0x2c8>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7f9 ff05 	bl	800016c <__adddf3>
 8006362:	4606      	mov	r6, r0
 8006364:	4620      	mov	r0, r4
 8006366:	460f      	mov	r7, r1
 8006368:	f7fa f84c 	bl	8000404 <__aeabi_i2d>
 800636c:	a364      	add	r3, pc, #400	; (adr r3, 8006500 <_dtoa_r+0x2d0>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7fa f8b1 	bl	80004d8 <__aeabi_dmul>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7f9 fef5 	bl	800016c <__adddf3>
 8006382:	4606      	mov	r6, r0
 8006384:	460f      	mov	r7, r1
 8006386:	f7fa fb57 	bl	8000a38 <__aeabi_d2iz>
 800638a:	2200      	movs	r2, #0
 800638c:	4683      	mov	fp, r0
 800638e:	2300      	movs	r3, #0
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa fb12 	bl	80009bc <__aeabi_dcmplt>
 8006398:	b148      	cbz	r0, 80063ae <_dtoa_r+0x17e>
 800639a:	4658      	mov	r0, fp
 800639c:	f7fa f832 	bl	8000404 <__aeabi_i2d>
 80063a0:	4632      	mov	r2, r6
 80063a2:	463b      	mov	r3, r7
 80063a4:	f7fa fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80063a8:	b908      	cbnz	r0, 80063ae <_dtoa_r+0x17e>
 80063aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80063ae:	f1bb 0f16 	cmp.w	fp, #22
 80063b2:	d857      	bhi.n	8006464 <_dtoa_r+0x234>
 80063b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063b8:	4b5a      	ldr	r3, [pc, #360]	; (8006524 <_dtoa_r+0x2f4>)
 80063ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f7fa fafb 	bl	80009bc <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d04e      	beq.n	8006468 <_dtoa_r+0x238>
 80063ca:	2300      	movs	r3, #0
 80063cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80063d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063d4:	1b1b      	subs	r3, r3, r4
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	bf46      	itte	mi
 80063da:	f1c3 0901 	rsbmi	r9, r3, #1
 80063de:	2300      	movmi	r3, #0
 80063e0:	f04f 0900 	movpl.w	r9, #0
 80063e4:	9209      	str	r2, [sp, #36]	; 0x24
 80063e6:	bf48      	it	mi
 80063e8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80063ea:	f1bb 0f00 	cmp.w	fp, #0
 80063ee:	db3d      	blt.n	800646c <_dtoa_r+0x23c>
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80063f6:	445b      	add	r3, fp
 80063f8:	9309      	str	r3, [sp, #36]	; 0x24
 80063fa:	2300      	movs	r3, #0
 80063fc:	930a      	str	r3, [sp, #40]	; 0x28
 80063fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006400:	2b09      	cmp	r3, #9
 8006402:	d867      	bhi.n	80064d4 <_dtoa_r+0x2a4>
 8006404:	2b05      	cmp	r3, #5
 8006406:	bfc4      	itt	gt
 8006408:	3b04      	subgt	r3, #4
 800640a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800640c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800640e:	bfc8      	it	gt
 8006410:	2400      	movgt	r4, #0
 8006412:	f1a3 0302 	sub.w	r3, r3, #2
 8006416:	bfd8      	it	le
 8006418:	2401      	movle	r4, #1
 800641a:	2b03      	cmp	r3, #3
 800641c:	f200 8086 	bhi.w	800652c <_dtoa_r+0x2fc>
 8006420:	e8df f003 	tbb	[pc, r3]
 8006424:	5637392c 	.word	0x5637392c
 8006428:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800642c:	441c      	add	r4, r3
 800642e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006432:	2b20      	cmp	r3, #32
 8006434:	bfc1      	itttt	gt
 8006436:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800643a:	fa09 f903 	lslgt.w	r9, r9, r3
 800643e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006442:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006446:	bfd6      	itet	le
 8006448:	f1c3 0320 	rsble	r3, r3, #32
 800644c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006450:	fa06 f003 	lslle.w	r0, r6, r3
 8006454:	f7f9 ffc6 	bl	80003e4 <__aeabi_ui2d>
 8006458:	2201      	movs	r2, #1
 800645a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800645e:	3c01      	subs	r4, #1
 8006460:	9213      	str	r2, [sp, #76]	; 0x4c
 8006462:	e76f      	b.n	8006344 <_dtoa_r+0x114>
 8006464:	2301      	movs	r3, #1
 8006466:	e7b3      	b.n	80063d0 <_dtoa_r+0x1a0>
 8006468:	900f      	str	r0, [sp, #60]	; 0x3c
 800646a:	e7b2      	b.n	80063d2 <_dtoa_r+0x1a2>
 800646c:	f1cb 0300 	rsb	r3, fp, #0
 8006470:	930a      	str	r3, [sp, #40]	; 0x28
 8006472:	2300      	movs	r3, #0
 8006474:	eba9 090b 	sub.w	r9, r9, fp
 8006478:	930e      	str	r3, [sp, #56]	; 0x38
 800647a:	e7c0      	b.n	80063fe <_dtoa_r+0x1ce>
 800647c:	2300      	movs	r3, #0
 800647e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006482:	2b00      	cmp	r3, #0
 8006484:	dc55      	bgt.n	8006532 <_dtoa_r+0x302>
 8006486:	2301      	movs	r3, #1
 8006488:	461a      	mov	r2, r3
 800648a:	9306      	str	r3, [sp, #24]
 800648c:	9308      	str	r3, [sp, #32]
 800648e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006490:	e00b      	b.n	80064aa <_dtoa_r+0x27a>
 8006492:	2301      	movs	r3, #1
 8006494:	e7f3      	b.n	800647e <_dtoa_r+0x24e>
 8006496:	2300      	movs	r3, #0
 8006498:	930b      	str	r3, [sp, #44]	; 0x2c
 800649a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800649c:	445b      	add	r3, fp
 800649e:	9306      	str	r3, [sp, #24]
 80064a0:	3301      	adds	r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	9308      	str	r3, [sp, #32]
 80064a6:	bfb8      	it	lt
 80064a8:	2301      	movlt	r3, #1
 80064aa:	2100      	movs	r1, #0
 80064ac:	2204      	movs	r2, #4
 80064ae:	69e8      	ldr	r0, [r5, #28]
 80064b0:	f102 0614 	add.w	r6, r2, #20
 80064b4:	429e      	cmp	r6, r3
 80064b6:	d940      	bls.n	800653a <_dtoa_r+0x30a>
 80064b8:	6041      	str	r1, [r0, #4]
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 fd98 	bl	8006ff0 <_Balloc>
 80064c0:	9003      	str	r0, [sp, #12]
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d13c      	bne.n	8006540 <_dtoa_r+0x310>
 80064c6:	4602      	mov	r2, r0
 80064c8:	f240 11af 	movw	r1, #431	; 0x1af
 80064cc:	4b16      	ldr	r3, [pc, #88]	; (8006528 <_dtoa_r+0x2f8>)
 80064ce:	e6c3      	b.n	8006258 <_dtoa_r+0x28>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e7e1      	b.n	8006498 <_dtoa_r+0x268>
 80064d4:	2401      	movs	r4, #1
 80064d6:	2300      	movs	r3, #0
 80064d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80064da:	9322      	str	r3, [sp, #136]	; 0x88
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e0:	2200      	movs	r2, #0
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	9308      	str	r3, [sp, #32]
 80064e6:	2312      	movs	r3, #18
 80064e8:	e7d1      	b.n	800648e <_dtoa_r+0x25e>
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w
 80064f0:	636f4361 	.word	0x636f4361
 80064f4:	3fd287a7 	.word	0x3fd287a7
 80064f8:	8b60c8b3 	.word	0x8b60c8b3
 80064fc:	3fc68a28 	.word	0x3fc68a28
 8006500:	509f79fb 	.word	0x509f79fb
 8006504:	3fd34413 	.word	0x3fd34413
 8006508:	0800a355 	.word	0x0800a355
 800650c:	0800a36c 	.word	0x0800a36c
 8006510:	7ff00000 	.word	0x7ff00000
 8006514:	0800a351 	.word	0x0800a351
 8006518:	0800a348 	.word	0x0800a348
 800651c:	0800a325 	.word	0x0800a325
 8006520:	3ff80000 	.word	0x3ff80000
 8006524:	0800a458 	.word	0x0800a458
 8006528:	0800a3c4 	.word	0x0800a3c4
 800652c:	2301      	movs	r3, #1
 800652e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006530:	e7d4      	b.n	80064dc <_dtoa_r+0x2ac>
 8006532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006534:	9306      	str	r3, [sp, #24]
 8006536:	9308      	str	r3, [sp, #32]
 8006538:	e7b7      	b.n	80064aa <_dtoa_r+0x27a>
 800653a:	3101      	adds	r1, #1
 800653c:	0052      	lsls	r2, r2, #1
 800653e:	e7b7      	b.n	80064b0 <_dtoa_r+0x280>
 8006540:	69eb      	ldr	r3, [r5, #28]
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	9b08      	ldr	r3, [sp, #32]
 8006548:	2b0e      	cmp	r3, #14
 800654a:	f200 80a8 	bhi.w	800669e <_dtoa_r+0x46e>
 800654e:	2c00      	cmp	r4, #0
 8006550:	f000 80a5 	beq.w	800669e <_dtoa_r+0x46e>
 8006554:	f1bb 0f00 	cmp.w	fp, #0
 8006558:	dd34      	ble.n	80065c4 <_dtoa_r+0x394>
 800655a:	4b9a      	ldr	r3, [pc, #616]	; (80067c4 <_dtoa_r+0x594>)
 800655c:	f00b 020f 	and.w	r2, fp, #15
 8006560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006564:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006568:	e9d3 3400 	ldrd	r3, r4, [r3]
 800656c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006570:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006574:	d016      	beq.n	80065a4 <_dtoa_r+0x374>
 8006576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800657a:	4b93      	ldr	r3, [pc, #588]	; (80067c8 <_dtoa_r+0x598>)
 800657c:	2703      	movs	r7, #3
 800657e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006582:	f7fa f8d3 	bl	800072c <__aeabi_ddiv>
 8006586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800658a:	f004 040f 	and.w	r4, r4, #15
 800658e:	4e8e      	ldr	r6, [pc, #568]	; (80067c8 <_dtoa_r+0x598>)
 8006590:	b954      	cbnz	r4, 80065a8 <_dtoa_r+0x378>
 8006592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800659a:	f7fa f8c7 	bl	800072c <__aeabi_ddiv>
 800659e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065a2:	e029      	b.n	80065f8 <_dtoa_r+0x3c8>
 80065a4:	2702      	movs	r7, #2
 80065a6:	e7f2      	b.n	800658e <_dtoa_r+0x35e>
 80065a8:	07e1      	lsls	r1, r4, #31
 80065aa:	d508      	bpl.n	80065be <_dtoa_r+0x38e>
 80065ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065b4:	f7f9 ff90 	bl	80004d8 <__aeabi_dmul>
 80065b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065bc:	3701      	adds	r7, #1
 80065be:	1064      	asrs	r4, r4, #1
 80065c0:	3608      	adds	r6, #8
 80065c2:	e7e5      	b.n	8006590 <_dtoa_r+0x360>
 80065c4:	f000 80a5 	beq.w	8006712 <_dtoa_r+0x4e2>
 80065c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065cc:	f1cb 0400 	rsb	r4, fp, #0
 80065d0:	4b7c      	ldr	r3, [pc, #496]	; (80067c4 <_dtoa_r+0x594>)
 80065d2:	f004 020f 	and.w	r2, r4, #15
 80065d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7f9 ff7b 	bl	80004d8 <__aeabi_dmul>
 80065e2:	2702      	movs	r7, #2
 80065e4:	2300      	movs	r3, #0
 80065e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ea:	4e77      	ldr	r6, [pc, #476]	; (80067c8 <_dtoa_r+0x598>)
 80065ec:	1124      	asrs	r4, r4, #4
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	f040 8084 	bne.w	80066fc <_dtoa_r+0x4cc>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1d2      	bne.n	800659e <_dtoa_r+0x36e>
 80065f8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8087 	beq.w	8006716 <_dtoa_r+0x4e6>
 8006608:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800660c:	2200      	movs	r2, #0
 800660e:	4b6f      	ldr	r3, [pc, #444]	; (80067cc <_dtoa_r+0x59c>)
 8006610:	f7fa f9d4 	bl	80009bc <__aeabi_dcmplt>
 8006614:	2800      	cmp	r0, #0
 8006616:	d07e      	beq.n	8006716 <_dtoa_r+0x4e6>
 8006618:	9b08      	ldr	r3, [sp, #32]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d07b      	beq.n	8006716 <_dtoa_r+0x4e6>
 800661e:	9b06      	ldr	r3, [sp, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dd38      	ble.n	8006696 <_dtoa_r+0x466>
 8006624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006628:	2200      	movs	r2, #0
 800662a:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <_dtoa_r+0x5a0>)
 800662c:	f7f9 ff54 	bl	80004d8 <__aeabi_dmul>
 8006630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006634:	9c06      	ldr	r4, [sp, #24]
 8006636:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800663a:	3701      	adds	r7, #1
 800663c:	4638      	mov	r0, r7
 800663e:	f7f9 fee1 	bl	8000404 <__aeabi_i2d>
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	f7f9 ff47 	bl	80004d8 <__aeabi_dmul>
 800664a:	2200      	movs	r2, #0
 800664c:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <_dtoa_r+0x5a4>)
 800664e:	f7f9 fd8d 	bl	800016c <__adddf3>
 8006652:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800665a:	9611      	str	r6, [sp, #68]	; 0x44
 800665c:	2c00      	cmp	r4, #0
 800665e:	d15d      	bne.n	800671c <_dtoa_r+0x4ec>
 8006660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006664:	2200      	movs	r2, #0
 8006666:	4b5c      	ldr	r3, [pc, #368]	; (80067d8 <_dtoa_r+0x5a8>)
 8006668:	f7f9 fd7e 	bl	8000168 <__aeabi_dsub>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006674:	4633      	mov	r3, r6
 8006676:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006678:	f7fa f9be 	bl	80009f8 <__aeabi_dcmpgt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f040 8295 	bne.w	8006bac <_dtoa_r+0x97c>
 8006682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006688:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800668c:	f7fa f996 	bl	80009bc <__aeabi_dcmplt>
 8006690:	2800      	cmp	r0, #0
 8006692:	f040 8289 	bne.w	8006ba8 <_dtoa_r+0x978>
 8006696:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800669a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800669e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f2c0 8151 	blt.w	8006948 <_dtoa_r+0x718>
 80066a6:	f1bb 0f0e 	cmp.w	fp, #14
 80066aa:	f300 814d 	bgt.w	8006948 <_dtoa_r+0x718>
 80066ae:	4b45      	ldr	r3, [pc, #276]	; (80067c4 <_dtoa_r+0x594>)
 80066b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80066bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f280 80da 	bge.w	8006878 <_dtoa_r+0x648>
 80066c4:	9b08      	ldr	r3, [sp, #32]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f300 80d6 	bgt.w	8006878 <_dtoa_r+0x648>
 80066cc:	f040 826b 	bne.w	8006ba6 <_dtoa_r+0x976>
 80066d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d4:	2200      	movs	r2, #0
 80066d6:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <_dtoa_r+0x5a8>)
 80066d8:	f7f9 fefe 	bl	80004d8 <__aeabi_dmul>
 80066dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e0:	f7fa f980 	bl	80009e4 <__aeabi_dcmpge>
 80066e4:	9c08      	ldr	r4, [sp, #32]
 80066e6:	4626      	mov	r6, r4
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f040 8241 	bne.w	8006b70 <_dtoa_r+0x940>
 80066ee:	2331      	movs	r3, #49	; 0x31
 80066f0:	9f03      	ldr	r7, [sp, #12]
 80066f2:	f10b 0b01 	add.w	fp, fp, #1
 80066f6:	f807 3b01 	strb.w	r3, [r7], #1
 80066fa:	e23d      	b.n	8006b78 <_dtoa_r+0x948>
 80066fc:	07e2      	lsls	r2, r4, #31
 80066fe:	d505      	bpl.n	800670c <_dtoa_r+0x4dc>
 8006700:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006704:	f7f9 fee8 	bl	80004d8 <__aeabi_dmul>
 8006708:	2301      	movs	r3, #1
 800670a:	3701      	adds	r7, #1
 800670c:	1064      	asrs	r4, r4, #1
 800670e:	3608      	adds	r6, #8
 8006710:	e76d      	b.n	80065ee <_dtoa_r+0x3be>
 8006712:	2702      	movs	r7, #2
 8006714:	e770      	b.n	80065f8 <_dtoa_r+0x3c8>
 8006716:	46d8      	mov	r8, fp
 8006718:	9c08      	ldr	r4, [sp, #32]
 800671a:	e78f      	b.n	800663c <_dtoa_r+0x40c>
 800671c:	9903      	ldr	r1, [sp, #12]
 800671e:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <_dtoa_r+0x594>)
 8006720:	4421      	add	r1, r4
 8006722:	9112      	str	r1, [sp, #72]	; 0x48
 8006724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006726:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800672a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800672e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006732:	2900      	cmp	r1, #0
 8006734:	d054      	beq.n	80067e0 <_dtoa_r+0x5b0>
 8006736:	2000      	movs	r0, #0
 8006738:	4928      	ldr	r1, [pc, #160]	; (80067dc <_dtoa_r+0x5ac>)
 800673a:	f7f9 fff7 	bl	800072c <__aeabi_ddiv>
 800673e:	463b      	mov	r3, r7
 8006740:	4632      	mov	r2, r6
 8006742:	f7f9 fd11 	bl	8000168 <__aeabi_dsub>
 8006746:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800674a:	9f03      	ldr	r7, [sp, #12]
 800674c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006750:	f7fa f972 	bl	8000a38 <__aeabi_d2iz>
 8006754:	4604      	mov	r4, r0
 8006756:	f7f9 fe55 	bl	8000404 <__aeabi_i2d>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006762:	f7f9 fd01 	bl	8000168 <__aeabi_dsub>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	3430      	adds	r4, #48	; 0x30
 800676c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006774:	f807 4b01 	strb.w	r4, [r7], #1
 8006778:	f7fa f920 	bl	80009bc <__aeabi_dcmplt>
 800677c:	2800      	cmp	r0, #0
 800677e:	d173      	bne.n	8006868 <_dtoa_r+0x638>
 8006780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006784:	2000      	movs	r0, #0
 8006786:	4911      	ldr	r1, [pc, #68]	; (80067cc <_dtoa_r+0x59c>)
 8006788:	f7f9 fcee 	bl	8000168 <__aeabi_dsub>
 800678c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006790:	f7fa f914 	bl	80009bc <__aeabi_dcmplt>
 8006794:	2800      	cmp	r0, #0
 8006796:	f040 80b6 	bne.w	8006906 <_dtoa_r+0x6d6>
 800679a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800679c:	429f      	cmp	r7, r3
 800679e:	f43f af7a 	beq.w	8006696 <_dtoa_r+0x466>
 80067a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067a6:	2200      	movs	r2, #0
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <_dtoa_r+0x5a0>)
 80067aa:	f7f9 fe95 	bl	80004d8 <__aeabi_dmul>
 80067ae:	2200      	movs	r2, #0
 80067b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <_dtoa_r+0x5a0>)
 80067ba:	f7f9 fe8d 	bl	80004d8 <__aeabi_dmul>
 80067be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067c2:	e7c3      	b.n	800674c <_dtoa_r+0x51c>
 80067c4:	0800a458 	.word	0x0800a458
 80067c8:	0800a430 	.word	0x0800a430
 80067cc:	3ff00000 	.word	0x3ff00000
 80067d0:	40240000 	.word	0x40240000
 80067d4:	401c0000 	.word	0x401c0000
 80067d8:	40140000 	.word	0x40140000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fe78 	bl	80004d8 <__aeabi_dmul>
 80067e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ee:	9c03      	ldr	r4, [sp, #12]
 80067f0:	9314      	str	r3, [sp, #80]	; 0x50
 80067f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f6:	f7fa f91f 	bl	8000a38 <__aeabi_d2iz>
 80067fa:	9015      	str	r0, [sp, #84]	; 0x54
 80067fc:	f7f9 fe02 	bl	8000404 <__aeabi_i2d>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006808:	f7f9 fcae 	bl	8000168 <__aeabi_dsub>
 800680c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800680e:	4606      	mov	r6, r0
 8006810:	3330      	adds	r3, #48	; 0x30
 8006812:	f804 3b01 	strb.w	r3, [r4], #1
 8006816:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006818:	460f      	mov	r7, r1
 800681a:	429c      	cmp	r4, r3
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	d124      	bne.n	800686c <_dtoa_r+0x63c>
 8006822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006826:	4baf      	ldr	r3, [pc, #700]	; (8006ae4 <_dtoa_r+0x8b4>)
 8006828:	f7f9 fca0 	bl	800016c <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7fa f8e0 	bl	80009f8 <__aeabi_dcmpgt>
 8006838:	2800      	cmp	r0, #0
 800683a:	d163      	bne.n	8006904 <_dtoa_r+0x6d4>
 800683c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006840:	2000      	movs	r0, #0
 8006842:	49a8      	ldr	r1, [pc, #672]	; (8006ae4 <_dtoa_r+0x8b4>)
 8006844:	f7f9 fc90 	bl	8000168 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f7fa f8b4 	bl	80009bc <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f af1e 	beq.w	8006696 <_dtoa_r+0x466>
 800685a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800685c:	1e7b      	subs	r3, r7, #1
 800685e:	9314      	str	r3, [sp, #80]	; 0x50
 8006860:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d0f8      	beq.n	800685a <_dtoa_r+0x62a>
 8006868:	46c3      	mov	fp, r8
 800686a:	e03b      	b.n	80068e4 <_dtoa_r+0x6b4>
 800686c:	4b9e      	ldr	r3, [pc, #632]	; (8006ae8 <_dtoa_r+0x8b8>)
 800686e:	f7f9 fe33 	bl	80004d8 <__aeabi_dmul>
 8006872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006876:	e7bc      	b.n	80067f2 <_dtoa_r+0x5c2>
 8006878:	9f03      	ldr	r7, [sp, #12]
 800687a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800687e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 ff51 	bl	800072c <__aeabi_ddiv>
 800688a:	f7fa f8d5 	bl	8000a38 <__aeabi_d2iz>
 800688e:	4604      	mov	r4, r0
 8006890:	f7f9 fdb8 	bl	8000404 <__aeabi_i2d>
 8006894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006898:	f7f9 fe1e 	bl	80004d8 <__aeabi_dmul>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7f9 fc60 	bl	8000168 <__aeabi_dsub>
 80068a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80068ac:	f807 6b01 	strb.w	r6, [r7], #1
 80068b0:	9e03      	ldr	r6, [sp, #12]
 80068b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80068b6:	1bbe      	subs	r6, r7, r6
 80068b8:	45b4      	cmp	ip, r6
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	d136      	bne.n	800692e <_dtoa_r+0x6fe>
 80068c0:	f7f9 fc54 	bl	800016c <__adddf3>
 80068c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068c8:	4680      	mov	r8, r0
 80068ca:	4689      	mov	r9, r1
 80068cc:	f7fa f894 	bl	80009f8 <__aeabi_dcmpgt>
 80068d0:	bb58      	cbnz	r0, 800692a <_dtoa_r+0x6fa>
 80068d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068d6:	4640      	mov	r0, r8
 80068d8:	4649      	mov	r1, r9
 80068da:	f7fa f865 	bl	80009a8 <__aeabi_dcmpeq>
 80068de:	b108      	cbz	r0, 80068e4 <_dtoa_r+0x6b4>
 80068e0:	07e3      	lsls	r3, r4, #31
 80068e2:	d422      	bmi.n	800692a <_dtoa_r+0x6fa>
 80068e4:	4651      	mov	r1, sl
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 fbc2 	bl	8007070 <_Bfree>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068f0:	703b      	strb	r3, [r7, #0]
 80068f2:	f10b 0301 	add.w	r3, fp, #1
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f43f ace6 	beq.w	80062cc <_dtoa_r+0x9c>
 8006900:	601f      	str	r7, [r3, #0]
 8006902:	e4e3      	b.n	80062cc <_dtoa_r+0x9c>
 8006904:	4627      	mov	r7, r4
 8006906:	463b      	mov	r3, r7
 8006908:	461f      	mov	r7, r3
 800690a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800690e:	2a39      	cmp	r2, #57	; 0x39
 8006910:	d107      	bne.n	8006922 <_dtoa_r+0x6f2>
 8006912:	9a03      	ldr	r2, [sp, #12]
 8006914:	429a      	cmp	r2, r3
 8006916:	d1f7      	bne.n	8006908 <_dtoa_r+0x6d8>
 8006918:	2230      	movs	r2, #48	; 0x30
 800691a:	9903      	ldr	r1, [sp, #12]
 800691c:	f108 0801 	add.w	r8, r8, #1
 8006920:	700a      	strb	r2, [r1, #0]
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	3201      	adds	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e79e      	b.n	8006868 <_dtoa_r+0x638>
 800692a:	46d8      	mov	r8, fp
 800692c:	e7eb      	b.n	8006906 <_dtoa_r+0x6d6>
 800692e:	2200      	movs	r2, #0
 8006930:	4b6d      	ldr	r3, [pc, #436]	; (8006ae8 <_dtoa_r+0x8b8>)
 8006932:	f7f9 fdd1 	bl	80004d8 <__aeabi_dmul>
 8006936:	2200      	movs	r2, #0
 8006938:	2300      	movs	r3, #0
 800693a:	4680      	mov	r8, r0
 800693c:	4689      	mov	r9, r1
 800693e:	f7fa f833 	bl	80009a8 <__aeabi_dcmpeq>
 8006942:	2800      	cmp	r0, #0
 8006944:	d09b      	beq.n	800687e <_dtoa_r+0x64e>
 8006946:	e7cd      	b.n	80068e4 <_dtoa_r+0x6b4>
 8006948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800694a:	2a00      	cmp	r2, #0
 800694c:	f000 80c4 	beq.w	8006ad8 <_dtoa_r+0x8a8>
 8006950:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006952:	2a01      	cmp	r2, #1
 8006954:	f300 80a8 	bgt.w	8006aa8 <_dtoa_r+0x878>
 8006958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800695a:	2a00      	cmp	r2, #0
 800695c:	f000 80a0 	beq.w	8006aa0 <_dtoa_r+0x870>
 8006960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006964:	464f      	mov	r7, r9
 8006966:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800696a:	2101      	movs	r1, #1
 800696c:	441a      	add	r2, r3
 800696e:	4628      	mov	r0, r5
 8006970:	4499      	add	r9, r3
 8006972:	9209      	str	r2, [sp, #36]	; 0x24
 8006974:	f000 fc32 	bl	80071dc <__i2b>
 8006978:	4606      	mov	r6, r0
 800697a:	b15f      	cbz	r7, 8006994 <_dtoa_r+0x764>
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	dd08      	ble.n	8006994 <_dtoa_r+0x764>
 8006982:	42bb      	cmp	r3, r7
 8006984:	bfa8      	it	ge
 8006986:	463b      	movge	r3, r7
 8006988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800698a:	eba9 0903 	sub.w	r9, r9, r3
 800698e:	1aff      	subs	r7, r7, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	9309      	str	r3, [sp, #36]	; 0x24
 8006994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006996:	b1f3      	cbz	r3, 80069d6 <_dtoa_r+0x7a6>
 8006998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80a0 	beq.w	8006ae0 <_dtoa_r+0x8b0>
 80069a0:	2c00      	cmp	r4, #0
 80069a2:	dd10      	ble.n	80069c6 <_dtoa_r+0x796>
 80069a4:	4631      	mov	r1, r6
 80069a6:	4622      	mov	r2, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 fcd5 	bl	8007358 <__pow5mult>
 80069ae:	4652      	mov	r2, sl
 80069b0:	4601      	mov	r1, r0
 80069b2:	4606      	mov	r6, r0
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 fc27 	bl	8007208 <__multiply>
 80069ba:	4680      	mov	r8, r0
 80069bc:	4651      	mov	r1, sl
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 fb56 	bl	8007070 <_Bfree>
 80069c4:	46c2      	mov	sl, r8
 80069c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c8:	1b1a      	subs	r2, r3, r4
 80069ca:	d004      	beq.n	80069d6 <_dtoa_r+0x7a6>
 80069cc:	4651      	mov	r1, sl
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 fcc2 	bl	8007358 <__pow5mult>
 80069d4:	4682      	mov	sl, r0
 80069d6:	2101      	movs	r1, #1
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 fbff 	bl	80071dc <__i2b>
 80069de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069e0:	4604      	mov	r4, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f340 8082 	ble.w	8006aec <_dtoa_r+0x8bc>
 80069e8:	461a      	mov	r2, r3
 80069ea:	4601      	mov	r1, r0
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 fcb3 	bl	8007358 <__pow5mult>
 80069f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069f4:	4604      	mov	r4, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	dd7b      	ble.n	8006af2 <_dtoa_r+0x8c2>
 80069fa:	f04f 0800 	mov.w	r8, #0
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a04:	6918      	ldr	r0, [r3, #16]
 8006a06:	f000 fb9b 	bl	8007140 <__hi0bits>
 8006a0a:	f1c0 0020 	rsb	r0, r0, #32
 8006a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a10:	4418      	add	r0, r3
 8006a12:	f010 001f 	ands.w	r0, r0, #31
 8006a16:	f000 8092 	beq.w	8006b3e <_dtoa_r+0x90e>
 8006a1a:	f1c0 0320 	rsb	r3, r0, #32
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	f340 8085 	ble.w	8006b2e <_dtoa_r+0x8fe>
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	f1c0 001c 	rsb	r0, r0, #28
 8006a2a:	4403      	add	r3, r0
 8006a2c:	4481      	add	r9, r0
 8006a2e:	4407      	add	r7, r0
 8006a30:	9309      	str	r3, [sp, #36]	; 0x24
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	dd05      	ble.n	8006a44 <_dtoa_r+0x814>
 8006a38:	4651      	mov	r1, sl
 8006a3a:	464a      	mov	r2, r9
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 fce5 	bl	800740c <__lshift>
 8006a42:	4682      	mov	sl, r0
 8006a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dd05      	ble.n	8006a56 <_dtoa_r+0x826>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fcdc 	bl	800740c <__lshift>
 8006a54:	4604      	mov	r4, r0
 8006a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d072      	beq.n	8006b42 <_dtoa_r+0x912>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4650      	mov	r0, sl
 8006a60:	f000 fd40 	bl	80074e4 <__mcmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	da6c      	bge.n	8006b42 <_dtoa_r+0x912>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4651      	mov	r1, sl
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fb20 	bl	80070b4 <__multadd>
 8006a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a76:	4682      	mov	sl, r0
 8006a78:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 81ac 	beq.w	8006dda <_dtoa_r+0xbaa>
 8006a82:	2300      	movs	r3, #0
 8006a84:	4631      	mov	r1, r6
 8006a86:	220a      	movs	r2, #10
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fb13 	bl	80070b4 <__multadd>
 8006a8e:	9b06      	ldr	r3, [sp, #24]
 8006a90:	4606      	mov	r6, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f300 8093 	bgt.w	8006bbe <_dtoa_r+0x98e>
 8006a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	dc59      	bgt.n	8006b52 <_dtoa_r+0x922>
 8006a9e:	e08e      	b.n	8006bbe <_dtoa_r+0x98e>
 8006aa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006aa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aa6:	e75d      	b.n	8006964 <_dtoa_r+0x734>
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	1e5c      	subs	r4, r3, #1
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	bfbf      	itttt	lt
 8006ab2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ab4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006ab6:	1ae3      	sublt	r3, r4, r3
 8006ab8:	18d2      	addlt	r2, r2, r3
 8006aba:	bfa8      	it	ge
 8006abc:	1b1c      	subge	r4, r3, r4
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	bfbe      	ittt	lt
 8006ac2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006ac4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006ac6:	2400      	movlt	r4, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfb5      	itete	lt
 8006acc:	eba9 0703 	sublt.w	r7, r9, r3
 8006ad0:	464f      	movge	r7, r9
 8006ad2:	2300      	movlt	r3, #0
 8006ad4:	9b08      	ldrge	r3, [sp, #32]
 8006ad6:	e747      	b.n	8006968 <_dtoa_r+0x738>
 8006ad8:	464f      	mov	r7, r9
 8006ada:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006adc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ade:	e74c      	b.n	800697a <_dtoa_r+0x74a>
 8006ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae2:	e773      	b.n	80069cc <_dtoa_r+0x79c>
 8006ae4:	3fe00000 	.word	0x3fe00000
 8006ae8:	40240000 	.word	0x40240000
 8006aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	dc18      	bgt.n	8006b24 <_dtoa_r+0x8f4>
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	b9b3      	cbnz	r3, 8006b24 <_dtoa_r+0x8f4>
 8006af6:	9b05      	ldr	r3, [sp, #20]
 8006af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006afc:	b993      	cbnz	r3, 8006b24 <_dtoa_r+0x8f4>
 8006afe:	9b05      	ldr	r3, [sp, #20]
 8006b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b04:	0d1b      	lsrs	r3, r3, #20
 8006b06:	051b      	lsls	r3, r3, #20
 8006b08:	b17b      	cbz	r3, 8006b2a <_dtoa_r+0x8fa>
 8006b0a:	f04f 0801 	mov.w	r8, #1
 8006b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b10:	f109 0901 	add.w	r9, r9, #1
 8006b14:	3301      	adds	r3, #1
 8006b16:	9309      	str	r3, [sp, #36]	; 0x24
 8006b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f47f af6f 	bne.w	80069fe <_dtoa_r+0x7ce>
 8006b20:	2001      	movs	r0, #1
 8006b22:	e774      	b.n	8006a0e <_dtoa_r+0x7de>
 8006b24:	f04f 0800 	mov.w	r8, #0
 8006b28:	e7f6      	b.n	8006b18 <_dtoa_r+0x8e8>
 8006b2a:	4698      	mov	r8, r3
 8006b2c:	e7f4      	b.n	8006b18 <_dtoa_r+0x8e8>
 8006b2e:	d080      	beq.n	8006a32 <_dtoa_r+0x802>
 8006b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b32:	331c      	adds	r3, #28
 8006b34:	441a      	add	r2, r3
 8006b36:	4499      	add	r9, r3
 8006b38:	441f      	add	r7, r3
 8006b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b3c:	e779      	b.n	8006a32 <_dtoa_r+0x802>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	e7f6      	b.n	8006b30 <_dtoa_r+0x900>
 8006b42:	9b08      	ldr	r3, [sp, #32]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dc34      	bgt.n	8006bb2 <_dtoa_r+0x982>
 8006b48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	dd31      	ble.n	8006bb2 <_dtoa_r+0x982>
 8006b4e:	9b08      	ldr	r3, [sp, #32]
 8006b50:	9306      	str	r3, [sp, #24]
 8006b52:	9b06      	ldr	r3, [sp, #24]
 8006b54:	b963      	cbnz	r3, 8006b70 <_dtoa_r+0x940>
 8006b56:	4621      	mov	r1, r4
 8006b58:	2205      	movs	r2, #5
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 faaa 	bl	80070b4 <__multadd>
 8006b60:	4601      	mov	r1, r0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4650      	mov	r0, sl
 8006b66:	f000 fcbd 	bl	80074e4 <__mcmp>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f73f adbf 	bgt.w	80066ee <_dtoa_r+0x4be>
 8006b70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b72:	9f03      	ldr	r7, [sp, #12]
 8006b74:	ea6f 0b03 	mvn.w	fp, r3
 8006b78:	f04f 0800 	mov.w	r8, #0
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 fa76 	bl	8007070 <_Bfree>
 8006b84:	2e00      	cmp	r6, #0
 8006b86:	f43f aead 	beq.w	80068e4 <_dtoa_r+0x6b4>
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	d005      	beq.n	8006b9c <_dtoa_r+0x96c>
 8006b90:	45b0      	cmp	r8, r6
 8006b92:	d003      	beq.n	8006b9c <_dtoa_r+0x96c>
 8006b94:	4641      	mov	r1, r8
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fa6a 	bl	8007070 <_Bfree>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 fa66 	bl	8007070 <_Bfree>
 8006ba4:	e69e      	b.n	80068e4 <_dtoa_r+0x6b4>
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	4626      	mov	r6, r4
 8006baa:	e7e1      	b.n	8006b70 <_dtoa_r+0x940>
 8006bac:	46c3      	mov	fp, r8
 8006bae:	4626      	mov	r6, r4
 8006bb0:	e59d      	b.n	80066ee <_dtoa_r+0x4be>
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80c8 	beq.w	8006d4a <_dtoa_r+0xb1a>
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	9306      	str	r3, [sp, #24]
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	dd05      	ble.n	8006bce <_dtoa_r+0x99e>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 fc20 	bl	800740c <__lshift>
 8006bcc:	4606      	mov	r6, r0
 8006bce:	f1b8 0f00 	cmp.w	r8, #0
 8006bd2:	d05b      	beq.n	8006c8c <_dtoa_r+0xa5c>
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	6871      	ldr	r1, [r6, #4]
 8006bd8:	f000 fa0a 	bl	8006ff0 <_Balloc>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	b928      	cbnz	r0, 8006bec <_dtoa_r+0x9bc>
 8006be0:	4602      	mov	r2, r0
 8006be2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006be6:	4b81      	ldr	r3, [pc, #516]	; (8006dec <_dtoa_r+0xbbc>)
 8006be8:	f7ff bb36 	b.w	8006258 <_dtoa_r+0x28>
 8006bec:	6932      	ldr	r2, [r6, #16]
 8006bee:	f106 010c 	add.w	r1, r6, #12
 8006bf2:	3202      	adds	r2, #2
 8006bf4:	0092      	lsls	r2, r2, #2
 8006bf6:	300c      	adds	r0, #12
 8006bf8:	f000 ff9e 	bl	8007b38 <memcpy>
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 fc03 	bl	800740c <__lshift>
 8006c06:	46b0      	mov	r8, r6
 8006c08:	4606      	mov	r6, r0
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	9a03      	ldr	r2, [sp, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	9308      	str	r3, [sp, #32]
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	4413      	add	r3, r2
 8006c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c18:	9b04      	ldr	r3, [sp, #16]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	4621      	mov	r1, r4
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4650      	mov	r0, sl
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	f7ff fa75 	bl	8006118 <quorem>
 8006c2e:	4641      	mov	r1, r8
 8006c30:	9006      	str	r0, [sp, #24]
 8006c32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c36:	4650      	mov	r0, sl
 8006c38:	f000 fc54 	bl	80074e4 <__mcmp>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	9009      	str	r0, [sp, #36]	; 0x24
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 fc6a 	bl	800751c <__mdiff>
 8006c48:	68c2      	ldr	r2, [r0, #12]
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	bb02      	cbnz	r2, 8006c90 <_dtoa_r+0xa60>
 8006c4e:	4601      	mov	r1, r0
 8006c50:	4650      	mov	r0, sl
 8006c52:	f000 fc47 	bl	80074e4 <__mcmp>
 8006c56:	4602      	mov	r2, r0
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	920c      	str	r2, [sp, #48]	; 0x30
 8006c5e:	f000 fa07 	bl	8007070 <_Bfree>
 8006c62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c66:	9f08      	ldr	r7, [sp, #32]
 8006c68:	ea43 0102 	orr.w	r1, r3, r2
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6e:	4319      	orrs	r1, r3
 8006c70:	d110      	bne.n	8006c94 <_dtoa_r+0xa64>
 8006c72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c76:	d029      	beq.n	8006ccc <_dtoa_r+0xa9c>
 8006c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dd02      	ble.n	8006c84 <_dtoa_r+0xa54>
 8006c7e:	9b06      	ldr	r3, [sp, #24]
 8006c80:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	f883 9000 	strb.w	r9, [r3]
 8006c8a:	e777      	b.n	8006b7c <_dtoa_r+0x94c>
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	e7ba      	b.n	8006c06 <_dtoa_r+0x9d6>
 8006c90:	2201      	movs	r2, #1
 8006c92:	e7e1      	b.n	8006c58 <_dtoa_r+0xa28>
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	db04      	blt.n	8006ca4 <_dtoa_r+0xa74>
 8006c9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	d120      	bne.n	8006ce6 <_dtoa_r+0xab6>
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	dded      	ble.n	8006c84 <_dtoa_r+0xa54>
 8006ca8:	4651      	mov	r1, sl
 8006caa:	2201      	movs	r2, #1
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 fbad 	bl	800740c <__lshift>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	f000 fc15 	bl	80074e4 <__mcmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	dc03      	bgt.n	8006cc6 <_dtoa_r+0xa96>
 8006cbe:	d1e1      	bne.n	8006c84 <_dtoa_r+0xa54>
 8006cc0:	f019 0f01 	tst.w	r9, #1
 8006cc4:	d0de      	beq.n	8006c84 <_dtoa_r+0xa54>
 8006cc6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cca:	d1d8      	bne.n	8006c7e <_dtoa_r+0xa4e>
 8006ccc:	2339      	movs	r3, #57	; 0x39
 8006cce:	9a04      	ldr	r2, [sp, #16]
 8006cd0:	7013      	strb	r3, [r2, #0]
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	461f      	mov	r7, r3
 8006cd6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2a39      	cmp	r2, #57	; 0x39
 8006cde:	d06b      	beq.n	8006db8 <_dtoa_r+0xb88>
 8006ce0:	3201      	adds	r2, #1
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e74a      	b.n	8006b7c <_dtoa_r+0x94c>
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	dd07      	ble.n	8006cfa <_dtoa_r+0xaca>
 8006cea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cee:	d0ed      	beq.n	8006ccc <_dtoa_r+0xa9c>
 8006cf0:	9a04      	ldr	r2, [sp, #16]
 8006cf2:	f109 0301 	add.w	r3, r9, #1
 8006cf6:	7013      	strb	r3, [r2, #0]
 8006cf8:	e740      	b.n	8006b7c <_dtoa_r+0x94c>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cfe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d042      	beq.n	8006d8c <_dtoa_r+0xb5c>
 8006d06:	4651      	mov	r1, sl
 8006d08:	2300      	movs	r3, #0
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 f9d1 	bl	80070b4 <__multadd>
 8006d12:	45b0      	cmp	r8, r6
 8006d14:	4682      	mov	sl, r0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	f04f 020a 	mov.w	r2, #10
 8006d1e:	4641      	mov	r1, r8
 8006d20:	4628      	mov	r0, r5
 8006d22:	d107      	bne.n	8006d34 <_dtoa_r+0xb04>
 8006d24:	f000 f9c6 	bl	80070b4 <__multadd>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	9308      	str	r3, [sp, #32]
 8006d32:	e775      	b.n	8006c20 <_dtoa_r+0x9f0>
 8006d34:	f000 f9be 	bl	80070b4 <__multadd>
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	220a      	movs	r2, #10
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 f9b7 	bl	80070b4 <__multadd>
 8006d46:	4606      	mov	r6, r0
 8006d48:	e7f0      	b.n	8006d2c <_dtoa_r+0xafc>
 8006d4a:	9b08      	ldr	r3, [sp, #32]
 8006d4c:	9306      	str	r3, [sp, #24]
 8006d4e:	9f03      	ldr	r7, [sp, #12]
 8006d50:	4621      	mov	r1, r4
 8006d52:	4650      	mov	r0, sl
 8006d54:	f7ff f9e0 	bl	8006118 <quorem>
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d5e:	f807 9b01 	strb.w	r9, [r7], #1
 8006d62:	1afa      	subs	r2, r7, r3
 8006d64:	9b06      	ldr	r3, [sp, #24]
 8006d66:	4293      	cmp	r3, r2
 8006d68:	dd07      	ble.n	8006d7a <_dtoa_r+0xb4a>
 8006d6a:	4651      	mov	r1, sl
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	220a      	movs	r2, #10
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 f99f 	bl	80070b4 <__multadd>
 8006d76:	4682      	mov	sl, r0
 8006d78:	e7ea      	b.n	8006d50 <_dtoa_r+0xb20>
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	f04f 0800 	mov.w	r8, #0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfcc      	ite	gt
 8006d84:	461f      	movgt	r7, r3
 8006d86:	2701      	movle	r7, #1
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	441f      	add	r7, r3
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 fb3b 	bl	800740c <__lshift>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4682      	mov	sl, r0
 8006d9a:	f000 fba3 	bl	80074e4 <__mcmp>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	dc97      	bgt.n	8006cd2 <_dtoa_r+0xaa2>
 8006da2:	d102      	bne.n	8006daa <_dtoa_r+0xb7a>
 8006da4:	f019 0f01 	tst.w	r9, #1
 8006da8:	d193      	bne.n	8006cd2 <_dtoa_r+0xaa2>
 8006daa:	463b      	mov	r3, r7
 8006dac:	461f      	mov	r7, r3
 8006dae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006db2:	2a30      	cmp	r2, #48	; 0x30
 8006db4:	d0fa      	beq.n	8006dac <_dtoa_r+0xb7c>
 8006db6:	e6e1      	b.n	8006b7c <_dtoa_r+0x94c>
 8006db8:	9a03      	ldr	r2, [sp, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d18a      	bne.n	8006cd4 <_dtoa_r+0xaa4>
 8006dbe:	2331      	movs	r3, #49	; 0x31
 8006dc0:	f10b 0b01 	add.w	fp, fp, #1
 8006dc4:	e797      	b.n	8006cf6 <_dtoa_r+0xac6>
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <_dtoa_r+0xbc0>)
 8006dc8:	f7ff ba9f 	b.w	800630a <_dtoa_r+0xda>
 8006dcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f47f aa77 	bne.w	80062c2 <_dtoa_r+0x92>
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <_dtoa_r+0xbc4>)
 8006dd6:	f7ff ba98 	b.w	800630a <_dtoa_r+0xda>
 8006dda:	9b06      	ldr	r3, [sp, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dcb6      	bgt.n	8006d4e <_dtoa_r+0xb1e>
 8006de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	f73f aeb5 	bgt.w	8006b52 <_dtoa_r+0x922>
 8006de8:	e7b1      	b.n	8006d4e <_dtoa_r+0xb1e>
 8006dea:	bf00      	nop
 8006dec:	0800a3c4 	.word	0x0800a3c4
 8006df0:	0800a324 	.word	0x0800a324
 8006df4:	0800a348 	.word	0x0800a348

08006df8 <_free_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d040      	beq.n	8006e82 <_free_r+0x8a>
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f0c      	subs	r4, r1, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfb8      	it	lt
 8006e0a:	18e4      	addlt	r4, r4, r3
 8006e0c:	f000 f8e4 	bl	8006fd8 <__malloc_lock>
 8006e10:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <_free_r+0x8c>)
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	b933      	cbnz	r3, 8006e24 <_free_r+0x2c>
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	6014      	str	r4, [r2, #0]
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e20:	f000 b8e0 	b.w	8006fe4 <__malloc_unlock>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d908      	bls.n	8006e3a <_free_r+0x42>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	1821      	adds	r1, r4, r0
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf01      	itttt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	1809      	addeq	r1, r1, r0
 8006e36:	6021      	streq	r1, [r4, #0]
 8006e38:	e7ed      	b.n	8006e16 <_free_r+0x1e>
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b10b      	cbz	r3, 8006e44 <_free_r+0x4c>
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d9fa      	bls.n	8006e3a <_free_r+0x42>
 8006e44:	6811      	ldr	r1, [r2, #0]
 8006e46:	1850      	adds	r0, r2, r1
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d10b      	bne.n	8006e64 <_free_r+0x6c>
 8006e4c:	6820      	ldr	r0, [r4, #0]
 8006e4e:	4401      	add	r1, r0
 8006e50:	1850      	adds	r0, r2, r1
 8006e52:	4283      	cmp	r3, r0
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	d1e0      	bne.n	8006e1a <_free_r+0x22>
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4408      	add	r0, r1
 8006e5e:	6010      	str	r0, [r2, #0]
 8006e60:	6053      	str	r3, [r2, #4]
 8006e62:	e7da      	b.n	8006e1a <_free_r+0x22>
 8006e64:	d902      	bls.n	8006e6c <_free_r+0x74>
 8006e66:	230c      	movs	r3, #12
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	e7d6      	b.n	8006e1a <_free_r+0x22>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	1821      	adds	r1, r4, r0
 8006e70:	428b      	cmp	r3, r1
 8006e72:	bf01      	itttt	eq
 8006e74:	6819      	ldreq	r1, [r3, #0]
 8006e76:	685b      	ldreq	r3, [r3, #4]
 8006e78:	1809      	addeq	r1, r1, r0
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6054      	str	r4, [r2, #4]
 8006e80:	e7cb      	b.n	8006e1a <_free_r+0x22>
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20001b94 	.word	0x20001b94

08006e88 <malloc>:
 8006e88:	4b02      	ldr	r3, [pc, #8]	; (8006e94 <malloc+0xc>)
 8006e8a:	4601      	mov	r1, r0
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	f000 b823 	b.w	8006ed8 <_malloc_r>
 8006e92:	bf00      	nop
 8006e94:	200001e4 	.word	0x200001e4

08006e98 <sbrk_aligned>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4e0e      	ldr	r6, [pc, #56]	; (8006ed4 <sbrk_aligned+0x3c>)
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	6831      	ldr	r1, [r6, #0]
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	b911      	cbnz	r1, 8006eaa <sbrk_aligned+0x12>
 8006ea4:	f000 fe38 	bl	8007b18 <_sbrk_r>
 8006ea8:	6030      	str	r0, [r6, #0]
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 fe33 	bl	8007b18 <_sbrk_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d00a      	beq.n	8006ecc <sbrk_aligned+0x34>
 8006eb6:	1cc4      	adds	r4, r0, #3
 8006eb8:	f024 0403 	bic.w	r4, r4, #3
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d007      	beq.n	8006ed0 <sbrk_aligned+0x38>
 8006ec0:	1a21      	subs	r1, r4, r0
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 fe28 	bl	8007b18 <_sbrk_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d101      	bne.n	8006ed0 <sbrk_aligned+0x38>
 8006ecc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	20001b98 	.word	0x20001b98

08006ed8 <_malloc_r>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	1ccd      	adds	r5, r1, #3
 8006ede:	f025 0503 	bic.w	r5, r5, #3
 8006ee2:	3508      	adds	r5, #8
 8006ee4:	2d0c      	cmp	r5, #12
 8006ee6:	bf38      	it	cc
 8006ee8:	250c      	movcc	r5, #12
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	4607      	mov	r7, r0
 8006eee:	db01      	blt.n	8006ef4 <_malloc_r+0x1c>
 8006ef0:	42a9      	cmp	r1, r5
 8006ef2:	d905      	bls.n	8006f00 <_malloc_r+0x28>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	4630      	mov	r0, r6
 8006efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fd4 <_malloc_r+0xfc>
 8006f04:	f000 f868 	bl	8006fd8 <__malloc_lock>
 8006f08:	f8d8 3000 	ldr.w	r3, [r8]
 8006f0c:	461c      	mov	r4, r3
 8006f0e:	bb5c      	cbnz	r4, 8006f68 <_malloc_r+0x90>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4638      	mov	r0, r7
 8006f14:	f7ff ffc0 	bl	8006e98 <sbrk_aligned>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	d155      	bne.n	8006fca <_malloc_r+0xf2>
 8006f1e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f22:	4626      	mov	r6, r4
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d145      	bne.n	8006fb4 <_malloc_r+0xdc>
 8006f28:	2c00      	cmp	r4, #0
 8006f2a:	d048      	beq.n	8006fbe <_malloc_r+0xe6>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4638      	mov	r0, r7
 8006f32:	eb04 0903 	add.w	r9, r4, r3
 8006f36:	f000 fdef 	bl	8007b18 <_sbrk_r>
 8006f3a:	4581      	cmp	r9, r0
 8006f3c:	d13f      	bne.n	8006fbe <_malloc_r+0xe6>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	4638      	mov	r0, r7
 8006f42:	1a6d      	subs	r5, r5, r1
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7ff ffa7 	bl	8006e98 <sbrk_aligned>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d037      	beq.n	8006fbe <_malloc_r+0xe6>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	442b      	add	r3, r5
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	f8d8 3000 	ldr.w	r3, [r8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d038      	beq.n	8006fce <_malloc_r+0xf6>
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	42a2      	cmp	r2, r4
 8006f60:	d12b      	bne.n	8006fba <_malloc_r+0xe2>
 8006f62:	2200      	movs	r2, #0
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e00f      	b.n	8006f88 <_malloc_r+0xb0>
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	1b52      	subs	r2, r2, r5
 8006f6c:	d41f      	bmi.n	8006fae <_malloc_r+0xd6>
 8006f6e:	2a0b      	cmp	r2, #11
 8006f70:	d917      	bls.n	8006fa2 <_malloc_r+0xca>
 8006f72:	1961      	adds	r1, r4, r5
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	6025      	str	r5, [r4, #0]
 8006f78:	bf18      	it	ne
 8006f7a:	6059      	strne	r1, [r3, #4]
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	bf08      	it	eq
 8006f80:	f8c8 1000 	streq.w	r1, [r8]
 8006f84:	5162      	str	r2, [r4, r5]
 8006f86:	604b      	str	r3, [r1, #4]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f104 060b 	add.w	r6, r4, #11
 8006f8e:	f000 f829 	bl	8006fe4 <__malloc_unlock>
 8006f92:	f026 0607 	bic.w	r6, r6, #7
 8006f96:	1d23      	adds	r3, r4, #4
 8006f98:	1af2      	subs	r2, r6, r3
 8006f9a:	d0ae      	beq.n	8006efa <_malloc_r+0x22>
 8006f9c:	1b9b      	subs	r3, r3, r6
 8006f9e:	50a3      	str	r3, [r4, r2]
 8006fa0:	e7ab      	b.n	8006efa <_malloc_r+0x22>
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	6862      	ldr	r2, [r4, #4]
 8006fa6:	d1dd      	bne.n	8006f64 <_malloc_r+0x8c>
 8006fa8:	f8c8 2000 	str.w	r2, [r8]
 8006fac:	e7ec      	b.n	8006f88 <_malloc_r+0xb0>
 8006fae:	4623      	mov	r3, r4
 8006fb0:	6864      	ldr	r4, [r4, #4]
 8006fb2:	e7ac      	b.n	8006f0e <_malloc_r+0x36>
 8006fb4:	4634      	mov	r4, r6
 8006fb6:	6876      	ldr	r6, [r6, #4]
 8006fb8:	e7b4      	b.n	8006f24 <_malloc_r+0x4c>
 8006fba:	4613      	mov	r3, r2
 8006fbc:	e7cc      	b.n	8006f58 <_malloc_r+0x80>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	f000 f80e 	bl	8006fe4 <__malloc_unlock>
 8006fc8:	e797      	b.n	8006efa <_malloc_r+0x22>
 8006fca:	6025      	str	r5, [r4, #0]
 8006fcc:	e7dc      	b.n	8006f88 <_malloc_r+0xb0>
 8006fce:	605b      	str	r3, [r3, #4]
 8006fd0:	deff      	udf	#255	; 0xff
 8006fd2:	bf00      	nop
 8006fd4:	20001b94 	.word	0x20001b94

08006fd8 <__malloc_lock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_lock+0x8>)
 8006fda:	f7ff b88d 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20001b90 	.word	0x20001b90

08006fe4 <__malloc_unlock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_unlock+0x8>)
 8006fe6:	f7ff b888 	b.w	80060fa <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	20001b90 	.word	0x20001b90

08006ff0 <_Balloc>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	69c6      	ldr	r6, [r0, #28]
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	b976      	cbnz	r6, 8007018 <_Balloc+0x28>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7ff ff44 	bl	8006e88 <malloc>
 8007000:	4602      	mov	r2, r0
 8007002:	61e0      	str	r0, [r4, #28]
 8007004:	b920      	cbnz	r0, 8007010 <_Balloc+0x20>
 8007006:	216b      	movs	r1, #107	; 0x6b
 8007008:	4b17      	ldr	r3, [pc, #92]	; (8007068 <_Balloc+0x78>)
 800700a:	4818      	ldr	r0, [pc, #96]	; (800706c <_Balloc+0x7c>)
 800700c:	f000 fda2 	bl	8007b54 <__assert_func>
 8007010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007014:	6006      	str	r6, [r0, #0]
 8007016:	60c6      	str	r6, [r0, #12]
 8007018:	69e6      	ldr	r6, [r4, #28]
 800701a:	68f3      	ldr	r3, [r6, #12]
 800701c:	b183      	cbz	r3, 8007040 <_Balloc+0x50>
 800701e:	69e3      	ldr	r3, [r4, #28]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007026:	b9b8      	cbnz	r0, 8007058 <_Balloc+0x68>
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f605 	lsl.w	r6, r1, r5
 800702e:	1d72      	adds	r2, r6, #5
 8007030:	4620      	mov	r0, r4
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	f000 fdac 	bl	8007b90 <_calloc_r>
 8007038:	b160      	cbz	r0, 8007054 <_Balloc+0x64>
 800703a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800703e:	e00e      	b.n	800705e <_Balloc+0x6e>
 8007040:	2221      	movs	r2, #33	; 0x21
 8007042:	2104      	movs	r1, #4
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fda3 	bl	8007b90 <_calloc_r>
 800704a:	69e3      	ldr	r3, [r4, #28]
 800704c:	60f0      	str	r0, [r6, #12]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e4      	bne.n	800701e <_Balloc+0x2e>
 8007054:	2000      	movs	r0, #0
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	6802      	ldr	r2, [r0, #0]
 800705a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800705e:	2300      	movs	r3, #0
 8007060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007064:	e7f7      	b.n	8007056 <_Balloc+0x66>
 8007066:	bf00      	nop
 8007068:	0800a355 	.word	0x0800a355
 800706c:	0800a3d5 	.word	0x0800a3d5

08007070 <_Bfree>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	69c6      	ldr	r6, [r0, #28]
 8007074:	4605      	mov	r5, r0
 8007076:	460c      	mov	r4, r1
 8007078:	b976      	cbnz	r6, 8007098 <_Bfree+0x28>
 800707a:	2010      	movs	r0, #16
 800707c:	f7ff ff04 	bl	8006e88 <malloc>
 8007080:	4602      	mov	r2, r0
 8007082:	61e8      	str	r0, [r5, #28]
 8007084:	b920      	cbnz	r0, 8007090 <_Bfree+0x20>
 8007086:	218f      	movs	r1, #143	; 0x8f
 8007088:	4b08      	ldr	r3, [pc, #32]	; (80070ac <_Bfree+0x3c>)
 800708a:	4809      	ldr	r0, [pc, #36]	; (80070b0 <_Bfree+0x40>)
 800708c:	f000 fd62 	bl	8007b54 <__assert_func>
 8007090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007094:	6006      	str	r6, [r0, #0]
 8007096:	60c6      	str	r6, [r0, #12]
 8007098:	b13c      	cbz	r4, 80070aa <_Bfree+0x3a>
 800709a:	69eb      	ldr	r3, [r5, #28]
 800709c:	6862      	ldr	r2, [r4, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070a4:	6021      	str	r1, [r4, #0]
 80070a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	0800a355 	.word	0x0800a355
 80070b0:	0800a3d5 	.word	0x0800a3d5

080070b4 <__multadd>:
 80070b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b8:	4607      	mov	r7, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	461e      	mov	r6, r3
 80070be:	2000      	movs	r0, #0
 80070c0:	690d      	ldr	r5, [r1, #16]
 80070c2:	f101 0c14 	add.w	ip, r1, #20
 80070c6:	f8dc 3000 	ldr.w	r3, [ip]
 80070ca:	3001      	adds	r0, #1
 80070cc:	b299      	uxth	r1, r3
 80070ce:	fb02 6101 	mla	r1, r2, r1, r6
 80070d2:	0c1e      	lsrs	r6, r3, #16
 80070d4:	0c0b      	lsrs	r3, r1, #16
 80070d6:	fb02 3306 	mla	r3, r2, r6, r3
 80070da:	b289      	uxth	r1, r1
 80070dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070e0:	4285      	cmp	r5, r0
 80070e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070e6:	f84c 1b04 	str.w	r1, [ip], #4
 80070ea:	dcec      	bgt.n	80070c6 <__multadd+0x12>
 80070ec:	b30e      	cbz	r6, 8007132 <__multadd+0x7e>
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dc19      	bgt.n	8007128 <__multadd+0x74>
 80070f4:	6861      	ldr	r1, [r4, #4]
 80070f6:	4638      	mov	r0, r7
 80070f8:	3101      	adds	r1, #1
 80070fa:	f7ff ff79 	bl	8006ff0 <_Balloc>
 80070fe:	4680      	mov	r8, r0
 8007100:	b928      	cbnz	r0, 800710e <__multadd+0x5a>
 8007102:	4602      	mov	r2, r0
 8007104:	21ba      	movs	r1, #186	; 0xba
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <__multadd+0x84>)
 8007108:	480c      	ldr	r0, [pc, #48]	; (800713c <__multadd+0x88>)
 800710a:	f000 fd23 	bl	8007b54 <__assert_func>
 800710e:	6922      	ldr	r2, [r4, #16]
 8007110:	f104 010c 	add.w	r1, r4, #12
 8007114:	3202      	adds	r2, #2
 8007116:	0092      	lsls	r2, r2, #2
 8007118:	300c      	adds	r0, #12
 800711a:	f000 fd0d 	bl	8007b38 <memcpy>
 800711e:	4621      	mov	r1, r4
 8007120:	4638      	mov	r0, r7
 8007122:	f7ff ffa5 	bl	8007070 <_Bfree>
 8007126:	4644      	mov	r4, r8
 8007128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800712c:	3501      	adds	r5, #1
 800712e:	615e      	str	r6, [r3, #20]
 8007130:	6125      	str	r5, [r4, #16]
 8007132:	4620      	mov	r0, r4
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007138:	0800a3c4 	.word	0x0800a3c4
 800713c:	0800a3d5 	.word	0x0800a3d5

08007140 <__hi0bits>:
 8007140:	0c02      	lsrs	r2, r0, #16
 8007142:	0412      	lsls	r2, r2, #16
 8007144:	4603      	mov	r3, r0
 8007146:	b9ca      	cbnz	r2, 800717c <__hi0bits+0x3c>
 8007148:	0403      	lsls	r3, r0, #16
 800714a:	2010      	movs	r0, #16
 800714c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007150:	bf04      	itt	eq
 8007152:	021b      	lsleq	r3, r3, #8
 8007154:	3008      	addeq	r0, #8
 8007156:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800715a:	bf04      	itt	eq
 800715c:	011b      	lsleq	r3, r3, #4
 800715e:	3004      	addeq	r0, #4
 8007160:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007164:	bf04      	itt	eq
 8007166:	009b      	lsleq	r3, r3, #2
 8007168:	3002      	addeq	r0, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	db05      	blt.n	800717a <__hi0bits+0x3a>
 800716e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007172:	f100 0001 	add.w	r0, r0, #1
 8007176:	bf08      	it	eq
 8007178:	2020      	moveq	r0, #32
 800717a:	4770      	bx	lr
 800717c:	2000      	movs	r0, #0
 800717e:	e7e5      	b.n	800714c <__hi0bits+0xc>

08007180 <__lo0bits>:
 8007180:	6803      	ldr	r3, [r0, #0]
 8007182:	4602      	mov	r2, r0
 8007184:	f013 0007 	ands.w	r0, r3, #7
 8007188:	d00b      	beq.n	80071a2 <__lo0bits+0x22>
 800718a:	07d9      	lsls	r1, r3, #31
 800718c:	d421      	bmi.n	80071d2 <__lo0bits+0x52>
 800718e:	0798      	lsls	r0, r3, #30
 8007190:	bf49      	itett	mi
 8007192:	085b      	lsrmi	r3, r3, #1
 8007194:	089b      	lsrpl	r3, r3, #2
 8007196:	2001      	movmi	r0, #1
 8007198:	6013      	strmi	r3, [r2, #0]
 800719a:	bf5c      	itt	pl
 800719c:	2002      	movpl	r0, #2
 800719e:	6013      	strpl	r3, [r2, #0]
 80071a0:	4770      	bx	lr
 80071a2:	b299      	uxth	r1, r3
 80071a4:	b909      	cbnz	r1, 80071aa <__lo0bits+0x2a>
 80071a6:	2010      	movs	r0, #16
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	b2d9      	uxtb	r1, r3
 80071ac:	b909      	cbnz	r1, 80071b2 <__lo0bits+0x32>
 80071ae:	3008      	adds	r0, #8
 80071b0:	0a1b      	lsrs	r3, r3, #8
 80071b2:	0719      	lsls	r1, r3, #28
 80071b4:	bf04      	itt	eq
 80071b6:	091b      	lsreq	r3, r3, #4
 80071b8:	3004      	addeq	r0, #4
 80071ba:	0799      	lsls	r1, r3, #30
 80071bc:	bf04      	itt	eq
 80071be:	089b      	lsreq	r3, r3, #2
 80071c0:	3002      	addeq	r0, #2
 80071c2:	07d9      	lsls	r1, r3, #31
 80071c4:	d403      	bmi.n	80071ce <__lo0bits+0x4e>
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	f100 0001 	add.w	r0, r0, #1
 80071cc:	d003      	beq.n	80071d6 <__lo0bits+0x56>
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	4770      	bx	lr
 80071d2:	2000      	movs	r0, #0
 80071d4:	4770      	bx	lr
 80071d6:	2020      	movs	r0, #32
 80071d8:	4770      	bx	lr
	...

080071dc <__i2b>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	460c      	mov	r4, r1
 80071e0:	2101      	movs	r1, #1
 80071e2:	f7ff ff05 	bl	8006ff0 <_Balloc>
 80071e6:	4602      	mov	r2, r0
 80071e8:	b928      	cbnz	r0, 80071f6 <__i2b+0x1a>
 80071ea:	f240 1145 	movw	r1, #325	; 0x145
 80071ee:	4b04      	ldr	r3, [pc, #16]	; (8007200 <__i2b+0x24>)
 80071f0:	4804      	ldr	r0, [pc, #16]	; (8007204 <__i2b+0x28>)
 80071f2:	f000 fcaf 	bl	8007b54 <__assert_func>
 80071f6:	2301      	movs	r3, #1
 80071f8:	6144      	str	r4, [r0, #20]
 80071fa:	6103      	str	r3, [r0, #16]
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	0800a3c4 	.word	0x0800a3c4
 8007204:	0800a3d5 	.word	0x0800a3d5

08007208 <__multiply>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	4691      	mov	r9, r2
 800720e:	690a      	ldr	r2, [r1, #16]
 8007210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007214:	460c      	mov	r4, r1
 8007216:	429a      	cmp	r2, r3
 8007218:	bfbe      	ittt	lt
 800721a:	460b      	movlt	r3, r1
 800721c:	464c      	movlt	r4, r9
 800721e:	4699      	movlt	r9, r3
 8007220:	6927      	ldr	r7, [r4, #16]
 8007222:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007226:	68a3      	ldr	r3, [r4, #8]
 8007228:	6861      	ldr	r1, [r4, #4]
 800722a:	eb07 060a 	add.w	r6, r7, sl
 800722e:	42b3      	cmp	r3, r6
 8007230:	b085      	sub	sp, #20
 8007232:	bfb8      	it	lt
 8007234:	3101      	addlt	r1, #1
 8007236:	f7ff fedb 	bl	8006ff0 <_Balloc>
 800723a:	b930      	cbnz	r0, 800724a <__multiply+0x42>
 800723c:	4602      	mov	r2, r0
 800723e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007242:	4b43      	ldr	r3, [pc, #268]	; (8007350 <__multiply+0x148>)
 8007244:	4843      	ldr	r0, [pc, #268]	; (8007354 <__multiply+0x14c>)
 8007246:	f000 fc85 	bl	8007b54 <__assert_func>
 800724a:	f100 0514 	add.w	r5, r0, #20
 800724e:	462b      	mov	r3, r5
 8007250:	2200      	movs	r2, #0
 8007252:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007256:	4543      	cmp	r3, r8
 8007258:	d321      	bcc.n	800729e <__multiply+0x96>
 800725a:	f104 0314 	add.w	r3, r4, #20
 800725e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007262:	f109 0314 	add.w	r3, r9, #20
 8007266:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800726a:	9202      	str	r2, [sp, #8]
 800726c:	1b3a      	subs	r2, r7, r4
 800726e:	3a15      	subs	r2, #21
 8007270:	f022 0203 	bic.w	r2, r2, #3
 8007274:	3204      	adds	r2, #4
 8007276:	f104 0115 	add.w	r1, r4, #21
 800727a:	428f      	cmp	r7, r1
 800727c:	bf38      	it	cc
 800727e:	2204      	movcc	r2, #4
 8007280:	9201      	str	r2, [sp, #4]
 8007282:	9a02      	ldr	r2, [sp, #8]
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	429a      	cmp	r2, r3
 8007288:	d80c      	bhi.n	80072a4 <__multiply+0x9c>
 800728a:	2e00      	cmp	r6, #0
 800728c:	dd03      	ble.n	8007296 <__multiply+0x8e>
 800728e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007292:	2b00      	cmp	r3, #0
 8007294:	d05a      	beq.n	800734c <__multiply+0x144>
 8007296:	6106      	str	r6, [r0, #16]
 8007298:	b005      	add	sp, #20
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	f843 2b04 	str.w	r2, [r3], #4
 80072a2:	e7d8      	b.n	8007256 <__multiply+0x4e>
 80072a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80072a8:	f1ba 0f00 	cmp.w	sl, #0
 80072ac:	d023      	beq.n	80072f6 <__multiply+0xee>
 80072ae:	46a9      	mov	r9, r5
 80072b0:	f04f 0c00 	mov.w	ip, #0
 80072b4:	f104 0e14 	add.w	lr, r4, #20
 80072b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072bc:	f8d9 1000 	ldr.w	r1, [r9]
 80072c0:	fa1f fb82 	uxth.w	fp, r2
 80072c4:	b289      	uxth	r1, r1
 80072c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80072ca:	4461      	add	r1, ip
 80072cc:	f8d9 c000 	ldr.w	ip, [r9]
 80072d0:	0c12      	lsrs	r2, r2, #16
 80072d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80072d6:	fb0a c202 	mla	r2, sl, r2, ip
 80072da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072de:	b289      	uxth	r1, r1
 80072e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072e4:	4577      	cmp	r7, lr
 80072e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072ea:	f849 1b04 	str.w	r1, [r9], #4
 80072ee:	d8e3      	bhi.n	80072b8 <__multiply+0xb0>
 80072f0:	9a01      	ldr	r2, [sp, #4]
 80072f2:	f845 c002 	str.w	ip, [r5, r2]
 80072f6:	9a03      	ldr	r2, [sp, #12]
 80072f8:	3304      	adds	r3, #4
 80072fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072fe:	f1b9 0f00 	cmp.w	r9, #0
 8007302:	d021      	beq.n	8007348 <__multiply+0x140>
 8007304:	46ae      	mov	lr, r5
 8007306:	f04f 0a00 	mov.w	sl, #0
 800730a:	6829      	ldr	r1, [r5, #0]
 800730c:	f104 0c14 	add.w	ip, r4, #20
 8007310:	f8bc b000 	ldrh.w	fp, [ip]
 8007314:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007318:	b289      	uxth	r1, r1
 800731a:	fb09 220b 	mla	r2, r9, fp, r2
 800731e:	4452      	add	r2, sl
 8007320:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007324:	f84e 1b04 	str.w	r1, [lr], #4
 8007328:	f85c 1b04 	ldr.w	r1, [ip], #4
 800732c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007330:	f8be 1000 	ldrh.w	r1, [lr]
 8007334:	4567      	cmp	r7, ip
 8007336:	fb09 110a 	mla	r1, r9, sl, r1
 800733a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800733e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007342:	d8e5      	bhi.n	8007310 <__multiply+0x108>
 8007344:	9a01      	ldr	r2, [sp, #4]
 8007346:	50a9      	str	r1, [r5, r2]
 8007348:	3504      	adds	r5, #4
 800734a:	e79a      	b.n	8007282 <__multiply+0x7a>
 800734c:	3e01      	subs	r6, #1
 800734e:	e79c      	b.n	800728a <__multiply+0x82>
 8007350:	0800a3c4 	.word	0x0800a3c4
 8007354:	0800a3d5 	.word	0x0800a3d5

08007358 <__pow5mult>:
 8007358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800735c:	4615      	mov	r5, r2
 800735e:	f012 0203 	ands.w	r2, r2, #3
 8007362:	4606      	mov	r6, r0
 8007364:	460f      	mov	r7, r1
 8007366:	d007      	beq.n	8007378 <__pow5mult+0x20>
 8007368:	4c25      	ldr	r4, [pc, #148]	; (8007400 <__pow5mult+0xa8>)
 800736a:	3a01      	subs	r2, #1
 800736c:	2300      	movs	r3, #0
 800736e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007372:	f7ff fe9f 	bl	80070b4 <__multadd>
 8007376:	4607      	mov	r7, r0
 8007378:	10ad      	asrs	r5, r5, #2
 800737a:	d03d      	beq.n	80073f8 <__pow5mult+0xa0>
 800737c:	69f4      	ldr	r4, [r6, #28]
 800737e:	b97c      	cbnz	r4, 80073a0 <__pow5mult+0x48>
 8007380:	2010      	movs	r0, #16
 8007382:	f7ff fd81 	bl	8006e88 <malloc>
 8007386:	4602      	mov	r2, r0
 8007388:	61f0      	str	r0, [r6, #28]
 800738a:	b928      	cbnz	r0, 8007398 <__pow5mult+0x40>
 800738c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <__pow5mult+0xac>)
 8007392:	481d      	ldr	r0, [pc, #116]	; (8007408 <__pow5mult+0xb0>)
 8007394:	f000 fbde 	bl	8007b54 <__assert_func>
 8007398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800739c:	6004      	str	r4, [r0, #0]
 800739e:	60c4      	str	r4, [r0, #12]
 80073a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80073a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073a8:	b94c      	cbnz	r4, 80073be <__pow5mult+0x66>
 80073aa:	f240 2171 	movw	r1, #625	; 0x271
 80073ae:	4630      	mov	r0, r6
 80073b0:	f7ff ff14 	bl	80071dc <__i2b>
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	f04f 0900 	mov.w	r9, #0
 80073c2:	07eb      	lsls	r3, r5, #31
 80073c4:	d50a      	bpl.n	80073dc <__pow5mult+0x84>
 80073c6:	4639      	mov	r1, r7
 80073c8:	4622      	mov	r2, r4
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ff1c 	bl	8007208 <__multiply>
 80073d0:	4680      	mov	r8, r0
 80073d2:	4639      	mov	r1, r7
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff fe4b 	bl	8007070 <_Bfree>
 80073da:	4647      	mov	r7, r8
 80073dc:	106d      	asrs	r5, r5, #1
 80073de:	d00b      	beq.n	80073f8 <__pow5mult+0xa0>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	b938      	cbnz	r0, 80073f4 <__pow5mult+0x9c>
 80073e4:	4622      	mov	r2, r4
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7ff ff0d 	bl	8007208 <__multiply>
 80073ee:	6020      	str	r0, [r4, #0]
 80073f0:	f8c0 9000 	str.w	r9, [r0]
 80073f4:	4604      	mov	r4, r0
 80073f6:	e7e4      	b.n	80073c2 <__pow5mult+0x6a>
 80073f8:	4638      	mov	r0, r7
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	bf00      	nop
 8007400:	0800a520 	.word	0x0800a520
 8007404:	0800a355 	.word	0x0800a355
 8007408:	0800a3d5 	.word	0x0800a3d5

0800740c <__lshift>:
 800740c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007410:	460c      	mov	r4, r1
 8007412:	4607      	mov	r7, r0
 8007414:	4691      	mov	r9, r2
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	6849      	ldr	r1, [r1, #4]
 800741a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800741e:	68a3      	ldr	r3, [r4, #8]
 8007420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007424:	f108 0601 	add.w	r6, r8, #1
 8007428:	42b3      	cmp	r3, r6
 800742a:	db0b      	blt.n	8007444 <__lshift+0x38>
 800742c:	4638      	mov	r0, r7
 800742e:	f7ff fddf 	bl	8006ff0 <_Balloc>
 8007432:	4605      	mov	r5, r0
 8007434:	b948      	cbnz	r0, 800744a <__lshift+0x3e>
 8007436:	4602      	mov	r2, r0
 8007438:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800743c:	4b27      	ldr	r3, [pc, #156]	; (80074dc <__lshift+0xd0>)
 800743e:	4828      	ldr	r0, [pc, #160]	; (80074e0 <__lshift+0xd4>)
 8007440:	f000 fb88 	bl	8007b54 <__assert_func>
 8007444:	3101      	adds	r1, #1
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	e7ee      	b.n	8007428 <__lshift+0x1c>
 800744a:	2300      	movs	r3, #0
 800744c:	f100 0114 	add.w	r1, r0, #20
 8007450:	f100 0210 	add.w	r2, r0, #16
 8007454:	4618      	mov	r0, r3
 8007456:	4553      	cmp	r3, sl
 8007458:	db33      	blt.n	80074c2 <__lshift+0xb6>
 800745a:	6920      	ldr	r0, [r4, #16]
 800745c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007460:	f104 0314 	add.w	r3, r4, #20
 8007464:	f019 091f 	ands.w	r9, r9, #31
 8007468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800746c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007470:	d02b      	beq.n	80074ca <__lshift+0xbe>
 8007472:	468a      	mov	sl, r1
 8007474:	2200      	movs	r2, #0
 8007476:	f1c9 0e20 	rsb	lr, r9, #32
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	fa00 f009 	lsl.w	r0, r0, r9
 8007480:	4310      	orrs	r0, r2
 8007482:	f84a 0b04 	str.w	r0, [sl], #4
 8007486:	f853 2b04 	ldr.w	r2, [r3], #4
 800748a:	459c      	cmp	ip, r3
 800748c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007490:	d8f3      	bhi.n	800747a <__lshift+0x6e>
 8007492:	ebac 0304 	sub.w	r3, ip, r4
 8007496:	3b15      	subs	r3, #21
 8007498:	f023 0303 	bic.w	r3, r3, #3
 800749c:	3304      	adds	r3, #4
 800749e:	f104 0015 	add.w	r0, r4, #21
 80074a2:	4584      	cmp	ip, r0
 80074a4:	bf38      	it	cc
 80074a6:	2304      	movcc	r3, #4
 80074a8:	50ca      	str	r2, [r1, r3]
 80074aa:	b10a      	cbz	r2, 80074b0 <__lshift+0xa4>
 80074ac:	f108 0602 	add.w	r6, r8, #2
 80074b0:	3e01      	subs	r6, #1
 80074b2:	4638      	mov	r0, r7
 80074b4:	4621      	mov	r1, r4
 80074b6:	612e      	str	r6, [r5, #16]
 80074b8:	f7ff fdda 	bl	8007070 <_Bfree>
 80074bc:	4628      	mov	r0, r5
 80074be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074c6:	3301      	adds	r3, #1
 80074c8:	e7c5      	b.n	8007456 <__lshift+0x4a>
 80074ca:	3904      	subs	r1, #4
 80074cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d0:	459c      	cmp	ip, r3
 80074d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80074d6:	d8f9      	bhi.n	80074cc <__lshift+0xc0>
 80074d8:	e7ea      	b.n	80074b0 <__lshift+0xa4>
 80074da:	bf00      	nop
 80074dc:	0800a3c4 	.word	0x0800a3c4
 80074e0:	0800a3d5 	.word	0x0800a3d5

080074e4 <__mcmp>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	690a      	ldr	r2, [r1, #16]
 80074e8:	6900      	ldr	r0, [r0, #16]
 80074ea:	b530      	push	{r4, r5, lr}
 80074ec:	1a80      	subs	r0, r0, r2
 80074ee:	d10d      	bne.n	800750c <__mcmp+0x28>
 80074f0:	3314      	adds	r3, #20
 80074f2:	3114      	adds	r1, #20
 80074f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007504:	4295      	cmp	r5, r2
 8007506:	d002      	beq.n	800750e <__mcmp+0x2a>
 8007508:	d304      	bcc.n	8007514 <__mcmp+0x30>
 800750a:	2001      	movs	r0, #1
 800750c:	bd30      	pop	{r4, r5, pc}
 800750e:	42a3      	cmp	r3, r4
 8007510:	d3f4      	bcc.n	80074fc <__mcmp+0x18>
 8007512:	e7fb      	b.n	800750c <__mcmp+0x28>
 8007514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007518:	e7f8      	b.n	800750c <__mcmp+0x28>
	...

0800751c <__mdiff>:
 800751c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	460d      	mov	r5, r1
 8007522:	4607      	mov	r7, r0
 8007524:	4611      	mov	r1, r2
 8007526:	4628      	mov	r0, r5
 8007528:	4614      	mov	r4, r2
 800752a:	f7ff ffdb 	bl	80074e4 <__mcmp>
 800752e:	1e06      	subs	r6, r0, #0
 8007530:	d111      	bne.n	8007556 <__mdiff+0x3a>
 8007532:	4631      	mov	r1, r6
 8007534:	4638      	mov	r0, r7
 8007536:	f7ff fd5b 	bl	8006ff0 <_Balloc>
 800753a:	4602      	mov	r2, r0
 800753c:	b928      	cbnz	r0, 800754a <__mdiff+0x2e>
 800753e:	f240 2137 	movw	r1, #567	; 0x237
 8007542:	4b3a      	ldr	r3, [pc, #232]	; (800762c <__mdiff+0x110>)
 8007544:	483a      	ldr	r0, [pc, #232]	; (8007630 <__mdiff+0x114>)
 8007546:	f000 fb05 	bl	8007b54 <__assert_func>
 800754a:	2301      	movs	r3, #1
 800754c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007550:	4610      	mov	r0, r2
 8007552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	bfa4      	itt	ge
 8007558:	4623      	movge	r3, r4
 800755a:	462c      	movge	r4, r5
 800755c:	4638      	mov	r0, r7
 800755e:	6861      	ldr	r1, [r4, #4]
 8007560:	bfa6      	itte	ge
 8007562:	461d      	movge	r5, r3
 8007564:	2600      	movge	r6, #0
 8007566:	2601      	movlt	r6, #1
 8007568:	f7ff fd42 	bl	8006ff0 <_Balloc>
 800756c:	4602      	mov	r2, r0
 800756e:	b918      	cbnz	r0, 8007578 <__mdiff+0x5c>
 8007570:	f240 2145 	movw	r1, #581	; 0x245
 8007574:	4b2d      	ldr	r3, [pc, #180]	; (800762c <__mdiff+0x110>)
 8007576:	e7e5      	b.n	8007544 <__mdiff+0x28>
 8007578:	f102 0814 	add.w	r8, r2, #20
 800757c:	46c2      	mov	sl, r8
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	6927      	ldr	r7, [r4, #16]
 8007584:	60c6      	str	r6, [r0, #12]
 8007586:	692e      	ldr	r6, [r5, #16]
 8007588:	f104 0014 	add.w	r0, r4, #20
 800758c:	f105 0914 	add.w	r9, r5, #20
 8007590:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007594:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007598:	3410      	adds	r4, #16
 800759a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800759e:	f859 3b04 	ldr.w	r3, [r9], #4
 80075a2:	fa1f f18b 	uxth.w	r1, fp
 80075a6:	4461      	add	r1, ip
 80075a8:	fa1f fc83 	uxth.w	ip, r3
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	eba1 010c 	sub.w	r1, r1, ip
 80075b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80075ba:	b289      	uxth	r1, r1
 80075bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80075c0:	454e      	cmp	r6, r9
 80075c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80075c6:	f84a 1b04 	str.w	r1, [sl], #4
 80075ca:	d8e6      	bhi.n	800759a <__mdiff+0x7e>
 80075cc:	1b73      	subs	r3, r6, r5
 80075ce:	3b15      	subs	r3, #21
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	3515      	adds	r5, #21
 80075d6:	3304      	adds	r3, #4
 80075d8:	42ae      	cmp	r6, r5
 80075da:	bf38      	it	cc
 80075dc:	2304      	movcc	r3, #4
 80075de:	4418      	add	r0, r3
 80075e0:	4443      	add	r3, r8
 80075e2:	461e      	mov	r6, r3
 80075e4:	4605      	mov	r5, r0
 80075e6:	4575      	cmp	r5, lr
 80075e8:	d30e      	bcc.n	8007608 <__mdiff+0xec>
 80075ea:	f10e 0103 	add.w	r1, lr, #3
 80075ee:	1a09      	subs	r1, r1, r0
 80075f0:	f021 0103 	bic.w	r1, r1, #3
 80075f4:	3803      	subs	r0, #3
 80075f6:	4586      	cmp	lr, r0
 80075f8:	bf38      	it	cc
 80075fa:	2100      	movcc	r1, #0
 80075fc:	440b      	add	r3, r1
 80075fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007602:	b189      	cbz	r1, 8007628 <__mdiff+0x10c>
 8007604:	6117      	str	r7, [r2, #16]
 8007606:	e7a3      	b.n	8007550 <__mdiff+0x34>
 8007608:	f855 8b04 	ldr.w	r8, [r5], #4
 800760c:	fa1f f188 	uxth.w	r1, r8
 8007610:	4461      	add	r1, ip
 8007612:	140c      	asrs	r4, r1, #16
 8007614:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007618:	b289      	uxth	r1, r1
 800761a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800761e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007622:	f846 1b04 	str.w	r1, [r6], #4
 8007626:	e7de      	b.n	80075e6 <__mdiff+0xca>
 8007628:	3f01      	subs	r7, #1
 800762a:	e7e8      	b.n	80075fe <__mdiff+0xe2>
 800762c:	0800a3c4 	.word	0x0800a3c4
 8007630:	0800a3d5 	.word	0x0800a3d5

08007634 <__d2b>:
 8007634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007636:	2101      	movs	r1, #1
 8007638:	4617      	mov	r7, r2
 800763a:	461c      	mov	r4, r3
 800763c:	9e08      	ldr	r6, [sp, #32]
 800763e:	f7ff fcd7 	bl	8006ff0 <_Balloc>
 8007642:	4605      	mov	r5, r0
 8007644:	b930      	cbnz	r0, 8007654 <__d2b+0x20>
 8007646:	4602      	mov	r2, r0
 8007648:	f240 310f 	movw	r1, #783	; 0x30f
 800764c:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <__d2b+0xa4>)
 800764e:	4823      	ldr	r0, [pc, #140]	; (80076dc <__d2b+0xa8>)
 8007650:	f000 fa80 	bl	8007b54 <__assert_func>
 8007654:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007658:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800765c:	bb24      	cbnz	r4, 80076a8 <__d2b+0x74>
 800765e:	2f00      	cmp	r7, #0
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	d026      	beq.n	80076b2 <__d2b+0x7e>
 8007664:	4668      	mov	r0, sp
 8007666:	9700      	str	r7, [sp, #0]
 8007668:	f7ff fd8a 	bl	8007180 <__lo0bits>
 800766c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007670:	b1e8      	cbz	r0, 80076ae <__d2b+0x7a>
 8007672:	f1c0 0320 	rsb	r3, r0, #32
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	430b      	orrs	r3, r1
 800767c:	40c2      	lsrs	r2, r0
 800767e:	616b      	str	r3, [r5, #20]
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	bf14      	ite	ne
 8007688:	2102      	movne	r1, #2
 800768a:	2101      	moveq	r1, #1
 800768c:	61ab      	str	r3, [r5, #24]
 800768e:	6129      	str	r1, [r5, #16]
 8007690:	b1bc      	cbz	r4, 80076c2 <__d2b+0x8e>
 8007692:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007696:	4404      	add	r4, r0
 8007698:	6034      	str	r4, [r6, #0]
 800769a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800769e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a0:	6018      	str	r0, [r3, #0]
 80076a2:	4628      	mov	r0, r5
 80076a4:	b003      	add	sp, #12
 80076a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ac:	e7d7      	b.n	800765e <__d2b+0x2a>
 80076ae:	6169      	str	r1, [r5, #20]
 80076b0:	e7e7      	b.n	8007682 <__d2b+0x4e>
 80076b2:	a801      	add	r0, sp, #4
 80076b4:	f7ff fd64 	bl	8007180 <__lo0bits>
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	2101      	movs	r1, #1
 80076bc:	616b      	str	r3, [r5, #20]
 80076be:	3020      	adds	r0, #32
 80076c0:	e7e5      	b.n	800768e <__d2b+0x5a>
 80076c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80076ca:	6030      	str	r0, [r6, #0]
 80076cc:	6918      	ldr	r0, [r3, #16]
 80076ce:	f7ff fd37 	bl	8007140 <__hi0bits>
 80076d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80076d6:	e7e2      	b.n	800769e <__d2b+0x6a>
 80076d8:	0800a3c4 	.word	0x0800a3c4
 80076dc:	0800a3d5 	.word	0x0800a3d5

080076e0 <__ssputs_r>:
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	461f      	mov	r7, r3
 80076e6:	688e      	ldr	r6, [r1, #8]
 80076e8:	4682      	mov	sl, r0
 80076ea:	42be      	cmp	r6, r7
 80076ec:	460c      	mov	r4, r1
 80076ee:	4690      	mov	r8, r2
 80076f0:	680b      	ldr	r3, [r1, #0]
 80076f2:	d82c      	bhi.n	800774e <__ssputs_r+0x6e>
 80076f4:	898a      	ldrh	r2, [r1, #12]
 80076f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076fa:	d026      	beq.n	800774a <__ssputs_r+0x6a>
 80076fc:	6965      	ldr	r5, [r4, #20]
 80076fe:	6909      	ldr	r1, [r1, #16]
 8007700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007704:	eba3 0901 	sub.w	r9, r3, r1
 8007708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800770c:	1c7b      	adds	r3, r7, #1
 800770e:	444b      	add	r3, r9
 8007710:	106d      	asrs	r5, r5, #1
 8007712:	429d      	cmp	r5, r3
 8007714:	bf38      	it	cc
 8007716:	461d      	movcc	r5, r3
 8007718:	0553      	lsls	r3, r2, #21
 800771a:	d527      	bpl.n	800776c <__ssputs_r+0x8c>
 800771c:	4629      	mov	r1, r5
 800771e:	f7ff fbdb 	bl	8006ed8 <_malloc_r>
 8007722:	4606      	mov	r6, r0
 8007724:	b360      	cbz	r0, 8007780 <__ssputs_r+0xa0>
 8007726:	464a      	mov	r2, r9
 8007728:	6921      	ldr	r1, [r4, #16]
 800772a:	f000 fa05 	bl	8007b38 <memcpy>
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	6126      	str	r6, [r4, #16]
 800773c:	444e      	add	r6, r9
 800773e:	6026      	str	r6, [r4, #0]
 8007740:	463e      	mov	r6, r7
 8007742:	6165      	str	r5, [r4, #20]
 8007744:	eba5 0509 	sub.w	r5, r5, r9
 8007748:	60a5      	str	r5, [r4, #8]
 800774a:	42be      	cmp	r6, r7
 800774c:	d900      	bls.n	8007750 <__ssputs_r+0x70>
 800774e:	463e      	mov	r6, r7
 8007750:	4632      	mov	r2, r6
 8007752:	4641      	mov	r1, r8
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	f000 f9c5 	bl	8007ae4 <memmove>
 800775a:	2000      	movs	r0, #0
 800775c:	68a3      	ldr	r3, [r4, #8]
 800775e:	1b9b      	subs	r3, r3, r6
 8007760:	60a3      	str	r3, [r4, #8]
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	4433      	add	r3, r6
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776c:	462a      	mov	r2, r5
 800776e:	f000 fa35 	bl	8007bdc <_realloc_r>
 8007772:	4606      	mov	r6, r0
 8007774:	2800      	cmp	r0, #0
 8007776:	d1e0      	bne.n	800773a <__ssputs_r+0x5a>
 8007778:	4650      	mov	r0, sl
 800777a:	6921      	ldr	r1, [r4, #16]
 800777c:	f7ff fb3c 	bl	8006df8 <_free_r>
 8007780:	230c      	movs	r3, #12
 8007782:	f8ca 3000 	str.w	r3, [sl]
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	e7e9      	b.n	8007768 <__ssputs_r+0x88>

08007794 <_svfiprintf_r>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4698      	mov	r8, r3
 800779a:	898b      	ldrh	r3, [r1, #12]
 800779c:	4607      	mov	r7, r0
 800779e:	061b      	lsls	r3, r3, #24
 80077a0:	460d      	mov	r5, r1
 80077a2:	4614      	mov	r4, r2
 80077a4:	b09d      	sub	sp, #116	; 0x74
 80077a6:	d50e      	bpl.n	80077c6 <_svfiprintf_r+0x32>
 80077a8:	690b      	ldr	r3, [r1, #16]
 80077aa:	b963      	cbnz	r3, 80077c6 <_svfiprintf_r+0x32>
 80077ac:	2140      	movs	r1, #64	; 0x40
 80077ae:	f7ff fb93 	bl	8006ed8 <_malloc_r>
 80077b2:	6028      	str	r0, [r5, #0]
 80077b4:	6128      	str	r0, [r5, #16]
 80077b6:	b920      	cbnz	r0, 80077c2 <_svfiprintf_r+0x2e>
 80077b8:	230c      	movs	r3, #12
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c0:	e0d0      	b.n	8007964 <_svfiprintf_r+0x1d0>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	616b      	str	r3, [r5, #20]
 80077c6:	2300      	movs	r3, #0
 80077c8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ca:	2320      	movs	r3, #32
 80077cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d0:	2330      	movs	r3, #48	; 0x30
 80077d2:	f04f 0901 	mov.w	r9, #1
 80077d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800797c <_svfiprintf_r+0x1e8>
 80077de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e2:	4623      	mov	r3, r4
 80077e4:	469a      	mov	sl, r3
 80077e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ea:	b10a      	cbz	r2, 80077f0 <_svfiprintf_r+0x5c>
 80077ec:	2a25      	cmp	r2, #37	; 0x25
 80077ee:	d1f9      	bne.n	80077e4 <_svfiprintf_r+0x50>
 80077f0:	ebba 0b04 	subs.w	fp, sl, r4
 80077f4:	d00b      	beq.n	800780e <_svfiprintf_r+0x7a>
 80077f6:	465b      	mov	r3, fp
 80077f8:	4622      	mov	r2, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff ff6f 	bl	80076e0 <__ssputs_r>
 8007802:	3001      	adds	r0, #1
 8007804:	f000 80a9 	beq.w	800795a <_svfiprintf_r+0x1c6>
 8007808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780a:	445a      	add	r2, fp
 800780c:	9209      	str	r2, [sp, #36]	; 0x24
 800780e:	f89a 3000 	ldrb.w	r3, [sl]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80a1 	beq.w	800795a <_svfiprintf_r+0x1c6>
 8007818:	2300      	movs	r3, #0
 800781a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800781e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007822:	f10a 0a01 	add.w	sl, sl, #1
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800782e:	931a      	str	r3, [sp, #104]	; 0x68
 8007830:	4654      	mov	r4, sl
 8007832:	2205      	movs	r2, #5
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	4850      	ldr	r0, [pc, #320]	; (800797c <_svfiprintf_r+0x1e8>)
 800783a:	f7fe fc5f 	bl	80060fc <memchr>
 800783e:	9a04      	ldr	r2, [sp, #16]
 8007840:	b9d8      	cbnz	r0, 800787a <_svfiprintf_r+0xe6>
 8007842:	06d0      	lsls	r0, r2, #27
 8007844:	bf44      	itt	mi
 8007846:	2320      	movmi	r3, #32
 8007848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784c:	0711      	lsls	r1, r2, #28
 800784e:	bf44      	itt	mi
 8007850:	232b      	movmi	r3, #43	; 0x2b
 8007852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007856:	f89a 3000 	ldrb.w	r3, [sl]
 800785a:	2b2a      	cmp	r3, #42	; 0x2a
 800785c:	d015      	beq.n	800788a <_svfiprintf_r+0xf6>
 800785e:	4654      	mov	r4, sl
 8007860:	2000      	movs	r0, #0
 8007862:	f04f 0c0a 	mov.w	ip, #10
 8007866:	9a07      	ldr	r2, [sp, #28]
 8007868:	4621      	mov	r1, r4
 800786a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800786e:	3b30      	subs	r3, #48	; 0x30
 8007870:	2b09      	cmp	r3, #9
 8007872:	d94d      	bls.n	8007910 <_svfiprintf_r+0x17c>
 8007874:	b1b0      	cbz	r0, 80078a4 <_svfiprintf_r+0x110>
 8007876:	9207      	str	r2, [sp, #28]
 8007878:	e014      	b.n	80078a4 <_svfiprintf_r+0x110>
 800787a:	eba0 0308 	sub.w	r3, r0, r8
 800787e:	fa09 f303 	lsl.w	r3, r9, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	46a2      	mov	sl, r4
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	e7d2      	b.n	8007830 <_svfiprintf_r+0x9c>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	1d19      	adds	r1, r3, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	9103      	str	r1, [sp, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfbb      	ittet	lt
 8007896:	425b      	neglt	r3, r3
 8007898:	f042 0202 	orrlt.w	r2, r2, #2
 800789c:	9307      	strge	r3, [sp, #28]
 800789e:	9307      	strlt	r3, [sp, #28]
 80078a0:	bfb8      	it	lt
 80078a2:	9204      	strlt	r2, [sp, #16]
 80078a4:	7823      	ldrb	r3, [r4, #0]
 80078a6:	2b2e      	cmp	r3, #46	; 0x2e
 80078a8:	d10c      	bne.n	80078c4 <_svfiprintf_r+0x130>
 80078aa:	7863      	ldrb	r3, [r4, #1]
 80078ac:	2b2a      	cmp	r3, #42	; 0x2a
 80078ae:	d134      	bne.n	800791a <_svfiprintf_r+0x186>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	3402      	adds	r4, #2
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	9203      	str	r2, [sp, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007980 <_svfiprintf_r+0x1ec>
 80078c8:	2203      	movs	r2, #3
 80078ca:	4650      	mov	r0, sl
 80078cc:	7821      	ldrb	r1, [r4, #0]
 80078ce:	f7fe fc15 	bl	80060fc <memchr>
 80078d2:	b138      	cbz	r0, 80078e4 <_svfiprintf_r+0x150>
 80078d4:	2240      	movs	r2, #64	; 0x40
 80078d6:	9b04      	ldr	r3, [sp, #16]
 80078d8:	eba0 000a 	sub.w	r0, r0, sl
 80078dc:	4082      	lsls	r2, r0
 80078de:	4313      	orrs	r3, r2
 80078e0:	3401      	adds	r4, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	2206      	movs	r2, #6
 80078ea:	4826      	ldr	r0, [pc, #152]	; (8007984 <_svfiprintf_r+0x1f0>)
 80078ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f0:	f7fe fc04 	bl	80060fc <memchr>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d038      	beq.n	800796a <_svfiprintf_r+0x1d6>
 80078f8:	4b23      	ldr	r3, [pc, #140]	; (8007988 <_svfiprintf_r+0x1f4>)
 80078fa:	bb1b      	cbnz	r3, 8007944 <_svfiprintf_r+0x1b0>
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	3307      	adds	r3, #7
 8007900:	f023 0307 	bic.w	r3, r3, #7
 8007904:	3308      	adds	r3, #8
 8007906:	9303      	str	r3, [sp, #12]
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	4433      	add	r3, r6
 800790c:	9309      	str	r3, [sp, #36]	; 0x24
 800790e:	e768      	b.n	80077e2 <_svfiprintf_r+0x4e>
 8007910:	460c      	mov	r4, r1
 8007912:	2001      	movs	r0, #1
 8007914:	fb0c 3202 	mla	r2, ip, r2, r3
 8007918:	e7a6      	b.n	8007868 <_svfiprintf_r+0xd4>
 800791a:	2300      	movs	r3, #0
 800791c:	f04f 0c0a 	mov.w	ip, #10
 8007920:	4619      	mov	r1, r3
 8007922:	3401      	adds	r4, #1
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	4620      	mov	r0, r4
 8007928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800792c:	3a30      	subs	r2, #48	; 0x30
 800792e:	2a09      	cmp	r2, #9
 8007930:	d903      	bls.n	800793a <_svfiprintf_r+0x1a6>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0c6      	beq.n	80078c4 <_svfiprintf_r+0x130>
 8007936:	9105      	str	r1, [sp, #20]
 8007938:	e7c4      	b.n	80078c4 <_svfiprintf_r+0x130>
 800793a:	4604      	mov	r4, r0
 800793c:	2301      	movs	r3, #1
 800793e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007942:	e7f0      	b.n	8007926 <_svfiprintf_r+0x192>
 8007944:	ab03      	add	r3, sp, #12
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	462a      	mov	r2, r5
 800794a:	4638      	mov	r0, r7
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <_svfiprintf_r+0x1f8>)
 800794e:	a904      	add	r1, sp, #16
 8007950:	f7fd fe80 	bl	8005654 <_printf_float>
 8007954:	1c42      	adds	r2, r0, #1
 8007956:	4606      	mov	r6, r0
 8007958:	d1d6      	bne.n	8007908 <_svfiprintf_r+0x174>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	065b      	lsls	r3, r3, #25
 800795e:	f53f af2d 	bmi.w	80077bc <_svfiprintf_r+0x28>
 8007962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007964:	b01d      	add	sp, #116	; 0x74
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	ab03      	add	r3, sp, #12
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	462a      	mov	r2, r5
 8007970:	4638      	mov	r0, r7
 8007972:	4b06      	ldr	r3, [pc, #24]	; (800798c <_svfiprintf_r+0x1f8>)
 8007974:	a904      	add	r1, sp, #16
 8007976:	f7fe f90d 	bl	8005b94 <_printf_i>
 800797a:	e7eb      	b.n	8007954 <_svfiprintf_r+0x1c0>
 800797c:	0800a52c 	.word	0x0800a52c
 8007980:	0800a532 	.word	0x0800a532
 8007984:	0800a536 	.word	0x0800a536
 8007988:	08005655 	.word	0x08005655
 800798c:	080076e1 	.word	0x080076e1

08007990 <__sflush_r>:
 8007990:	898a      	ldrh	r2, [r1, #12]
 8007992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007994:	4605      	mov	r5, r0
 8007996:	0710      	lsls	r0, r2, #28
 8007998:	460c      	mov	r4, r1
 800799a:	d457      	bmi.n	8007a4c <__sflush_r+0xbc>
 800799c:	684b      	ldr	r3, [r1, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dc04      	bgt.n	80079ac <__sflush_r+0x1c>
 80079a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dc01      	bgt.n	80079ac <__sflush_r+0x1c>
 80079a8:	2000      	movs	r0, #0
 80079aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ae:	2e00      	cmp	r6, #0
 80079b0:	d0fa      	beq.n	80079a8 <__sflush_r+0x18>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079b8:	682f      	ldr	r7, [r5, #0]
 80079ba:	6a21      	ldr	r1, [r4, #32]
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	d032      	beq.n	8007a26 <__sflush_r+0x96>
 80079c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	075a      	lsls	r2, r3, #29
 80079c6:	d505      	bpl.n	80079d4 <__sflush_r+0x44>
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	1ac0      	subs	r0, r0, r3
 80079cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ce:	b10b      	cbz	r3, 80079d4 <__sflush_r+0x44>
 80079d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079d2:	1ac0      	subs	r0, r0, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	4602      	mov	r2, r0
 80079d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079da:	4628      	mov	r0, r5
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	47b0      	blx	r6
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	d106      	bne.n	80079f4 <__sflush_r+0x64>
 80079e6:	6829      	ldr	r1, [r5, #0]
 80079e8:	291d      	cmp	r1, #29
 80079ea:	d82b      	bhi.n	8007a44 <__sflush_r+0xb4>
 80079ec:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <__sflush_r+0x100>)
 80079ee:	410a      	asrs	r2, r1
 80079f0:	07d6      	lsls	r6, r2, #31
 80079f2:	d427      	bmi.n	8007a44 <__sflush_r+0xb4>
 80079f4:	2200      	movs	r2, #0
 80079f6:	6062      	str	r2, [r4, #4]
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	04d9      	lsls	r1, r3, #19
 80079fc:	6022      	str	r2, [r4, #0]
 80079fe:	d504      	bpl.n	8007a0a <__sflush_r+0x7a>
 8007a00:	1c42      	adds	r2, r0, #1
 8007a02:	d101      	bne.n	8007a08 <__sflush_r+0x78>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b903      	cbnz	r3, 8007a0a <__sflush_r+0x7a>
 8007a08:	6560      	str	r0, [r4, #84]	; 0x54
 8007a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a0c:	602f      	str	r7, [r5, #0]
 8007a0e:	2900      	cmp	r1, #0
 8007a10:	d0ca      	beq.n	80079a8 <__sflush_r+0x18>
 8007a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d002      	beq.n	8007a20 <__sflush_r+0x90>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff f9ec 	bl	8006df8 <_free_r>
 8007a20:	2000      	movs	r0, #0
 8007a22:	6360      	str	r0, [r4, #52]	; 0x34
 8007a24:	e7c1      	b.n	80079aa <__sflush_r+0x1a>
 8007a26:	2301      	movs	r3, #1
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b0      	blx	r6
 8007a2c:	1c41      	adds	r1, r0, #1
 8007a2e:	d1c8      	bne.n	80079c2 <__sflush_r+0x32>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c5      	beq.n	80079c2 <__sflush_r+0x32>
 8007a36:	2b1d      	cmp	r3, #29
 8007a38:	d001      	beq.n	8007a3e <__sflush_r+0xae>
 8007a3a:	2b16      	cmp	r3, #22
 8007a3c:	d101      	bne.n	8007a42 <__sflush_r+0xb2>
 8007a3e:	602f      	str	r7, [r5, #0]
 8007a40:	e7b2      	b.n	80079a8 <__sflush_r+0x18>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	e7ae      	b.n	80079aa <__sflush_r+0x1a>
 8007a4c:	690f      	ldr	r7, [r1, #16]
 8007a4e:	2f00      	cmp	r7, #0
 8007a50:	d0aa      	beq.n	80079a8 <__sflush_r+0x18>
 8007a52:	0793      	lsls	r3, r2, #30
 8007a54:	bf18      	it	ne
 8007a56:	2300      	movne	r3, #0
 8007a58:	680e      	ldr	r6, [r1, #0]
 8007a5a:	bf08      	it	eq
 8007a5c:	694b      	ldreq	r3, [r1, #20]
 8007a5e:	1bf6      	subs	r6, r6, r7
 8007a60:	600f      	str	r7, [r1, #0]
 8007a62:	608b      	str	r3, [r1, #8]
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	dd9f      	ble.n	80079a8 <__sflush_r+0x18>
 8007a68:	4633      	mov	r3, r6
 8007a6a:	463a      	mov	r2, r7
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	6a21      	ldr	r1, [r4, #32]
 8007a70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a74:	47e0      	blx	ip
 8007a76:	2800      	cmp	r0, #0
 8007a78:	dc06      	bgt.n	8007a88 <__sflush_r+0xf8>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e790      	b.n	80079aa <__sflush_r+0x1a>
 8007a88:	4407      	add	r7, r0
 8007a8a:	1a36      	subs	r6, r6, r0
 8007a8c:	e7ea      	b.n	8007a64 <__sflush_r+0xd4>
 8007a8e:	bf00      	nop
 8007a90:	dfbffffe 	.word	0xdfbffffe

08007a94 <_fflush_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	4605      	mov	r5, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	b913      	cbnz	r3, 8007aa4 <_fflush_r+0x10>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	b118      	cbz	r0, 8007aae <_fflush_r+0x1a>
 8007aa6:	6a03      	ldr	r3, [r0, #32]
 8007aa8:	b90b      	cbnz	r3, 8007aae <_fflush_r+0x1a>
 8007aaa:	f7fe fa0f 	bl	8005ecc <__sinit>
 8007aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f3      	beq.n	8007a9e <_fflush_r+0xa>
 8007ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ab8:	07d0      	lsls	r0, r2, #31
 8007aba:	d404      	bmi.n	8007ac6 <_fflush_r+0x32>
 8007abc:	0599      	lsls	r1, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_fflush_r+0x32>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac2:	f7fe fb19 	bl	80060f8 <__retarget_lock_acquire_recursive>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	4621      	mov	r1, r4
 8007aca:	f7ff ff61 	bl	8007990 <__sflush_r>
 8007ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	07da      	lsls	r2, r3, #31
 8007ad4:	d4e4      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	059b      	lsls	r3, r3, #22
 8007ada:	d4e1      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ade:	f7fe fb0c 	bl	80060fa <__retarget_lock_release_recursive>
 8007ae2:	e7dd      	b.n	8007aa0 <_fflush_r+0xc>

08007ae4 <memmove>:
 8007ae4:	4288      	cmp	r0, r1
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	eb01 0402 	add.w	r4, r1, r2
 8007aec:	d902      	bls.n	8007af4 <memmove+0x10>
 8007aee:	4284      	cmp	r4, r0
 8007af0:	4623      	mov	r3, r4
 8007af2:	d807      	bhi.n	8007b04 <memmove+0x20>
 8007af4:	1e43      	subs	r3, r0, #1
 8007af6:	42a1      	cmp	r1, r4
 8007af8:	d008      	beq.n	8007b0c <memmove+0x28>
 8007afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b02:	e7f8      	b.n	8007af6 <memmove+0x12>
 8007b04:	4601      	mov	r1, r0
 8007b06:	4402      	add	r2, r0
 8007b08:	428a      	cmp	r2, r1
 8007b0a:	d100      	bne.n	8007b0e <memmove+0x2a>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b16:	e7f7      	b.n	8007b08 <memmove+0x24>

08007b18 <_sbrk_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4d05      	ldr	r5, [pc, #20]	; (8007b34 <_sbrk_r+0x1c>)
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7f9 fea4 	bl	8001870 <_sbrk>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_sbrk_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_sbrk_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20001b8c 	.word	0x20001b8c

08007b38 <memcpy>:
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b40:	d100      	bne.n	8007b44 <memcpy+0xc>
 8007b42:	4770      	bx	lr
 8007b44:	b510      	push	{r4, lr}
 8007b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4a:	4291      	cmp	r1, r2
 8007b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b50:	d1f9      	bne.n	8007b46 <memcpy+0xe>
 8007b52:	bd10      	pop	{r4, pc}

08007b54 <__assert_func>:
 8007b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b56:	4614      	mov	r4, r2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <__assert_func+0x2c>)
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68d8      	ldr	r0, [r3, #12]
 8007b62:	b14c      	cbz	r4, 8007b78 <__assert_func+0x24>
 8007b64:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <__assert_func+0x30>)
 8007b66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b6a:	9100      	str	r1, [sp, #0]
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	4906      	ldr	r1, [pc, #24]	; (8007b88 <__assert_func+0x34>)
 8007b70:	f000 f870 	bl	8007c54 <fiprintf>
 8007b74:	f000 f880 	bl	8007c78 <abort>
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <__assert_func+0x38>)
 8007b7a:	461c      	mov	r4, r3
 8007b7c:	e7f3      	b.n	8007b66 <__assert_func+0x12>
 8007b7e:	bf00      	nop
 8007b80:	200001e4 	.word	0x200001e4
 8007b84:	0800a547 	.word	0x0800a547
 8007b88:	0800a554 	.word	0x0800a554
 8007b8c:	0800a582 	.word	0x0800a582

08007b90 <_calloc_r>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	fba1 5402 	umull	r5, r4, r1, r2
 8007b96:	b934      	cbnz	r4, 8007ba6 <_calloc_r+0x16>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7ff f99d 	bl	8006ed8 <_malloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <_calloc_r+0x1e>
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	220c      	movs	r2, #12
 8007ba8:	2600      	movs	r6, #0
 8007baa:	6002      	str	r2, [r0, #0]
 8007bac:	e7f9      	b.n	8007ba2 <_calloc_r+0x12>
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7fe fa24 	bl	8005ffe <memset>
 8007bb6:	e7f4      	b.n	8007ba2 <_calloc_r+0x12>

08007bb8 <__ascii_mbtowc>:
 8007bb8:	b082      	sub	sp, #8
 8007bba:	b901      	cbnz	r1, 8007bbe <__ascii_mbtowc+0x6>
 8007bbc:	a901      	add	r1, sp, #4
 8007bbe:	b142      	cbz	r2, 8007bd2 <__ascii_mbtowc+0x1a>
 8007bc0:	b14b      	cbz	r3, 8007bd6 <__ascii_mbtowc+0x1e>
 8007bc2:	7813      	ldrb	r3, [r2, #0]
 8007bc4:	600b      	str	r3, [r1, #0]
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	1e10      	subs	r0, r2, #0
 8007bca:	bf18      	it	ne
 8007bcc:	2001      	movne	r0, #1
 8007bce:	b002      	add	sp, #8
 8007bd0:	4770      	bx	lr
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	e7fb      	b.n	8007bce <__ascii_mbtowc+0x16>
 8007bd6:	f06f 0001 	mvn.w	r0, #1
 8007bda:	e7f8      	b.n	8007bce <__ascii_mbtowc+0x16>

08007bdc <_realloc_r>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	4680      	mov	r8, r0
 8007be2:	4614      	mov	r4, r2
 8007be4:	460e      	mov	r6, r1
 8007be6:	b921      	cbnz	r1, 8007bf2 <_realloc_r+0x16>
 8007be8:	4611      	mov	r1, r2
 8007bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	f7ff b973 	b.w	8006ed8 <_malloc_r>
 8007bf2:	b92a      	cbnz	r2, 8007c00 <_realloc_r+0x24>
 8007bf4:	f7ff f900 	bl	8006df8 <_free_r>
 8007bf8:	4625      	mov	r5, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	f000 f841 	bl	8007c86 <_malloc_usable_size_r>
 8007c04:	4284      	cmp	r4, r0
 8007c06:	4607      	mov	r7, r0
 8007c08:	d802      	bhi.n	8007c10 <_realloc_r+0x34>
 8007c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c0e:	d812      	bhi.n	8007c36 <_realloc_r+0x5a>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7ff f960 	bl	8006ed8 <_malloc_r>
 8007c18:	4605      	mov	r5, r0
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d0ed      	beq.n	8007bfa <_realloc_r+0x1e>
 8007c1e:	42bc      	cmp	r4, r7
 8007c20:	4622      	mov	r2, r4
 8007c22:	4631      	mov	r1, r6
 8007c24:	bf28      	it	cs
 8007c26:	463a      	movcs	r2, r7
 8007c28:	f7ff ff86 	bl	8007b38 <memcpy>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7ff f8e2 	bl	8006df8 <_free_r>
 8007c34:	e7e1      	b.n	8007bfa <_realloc_r+0x1e>
 8007c36:	4635      	mov	r5, r6
 8007c38:	e7df      	b.n	8007bfa <_realloc_r+0x1e>

08007c3a <__ascii_wctomb>:
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	b141      	cbz	r1, 8007c52 <__ascii_wctomb+0x18>
 8007c40:	2aff      	cmp	r2, #255	; 0xff
 8007c42:	d904      	bls.n	8007c4e <__ascii_wctomb+0x14>
 8007c44:	228a      	movs	r2, #138	; 0x8a
 8007c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	4770      	bx	lr
 8007c4e:	2001      	movs	r0, #1
 8007c50:	700a      	strb	r2, [r1, #0]
 8007c52:	4770      	bx	lr

08007c54 <fiprintf>:
 8007c54:	b40e      	push	{r1, r2, r3}
 8007c56:	b503      	push	{r0, r1, lr}
 8007c58:	4601      	mov	r1, r0
 8007c5a:	ab03      	add	r3, sp, #12
 8007c5c:	4805      	ldr	r0, [pc, #20]	; (8007c74 <fiprintf+0x20>)
 8007c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f000 f83d 	bl	8007ce4 <_vfiprintf_r>
 8007c6a:	b002      	add	sp, #8
 8007c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c70:	b003      	add	sp, #12
 8007c72:	4770      	bx	lr
 8007c74:	200001e4 	.word	0x200001e4

08007c78 <abort>:
 8007c78:	2006      	movs	r0, #6
 8007c7a:	b508      	push	{r3, lr}
 8007c7c:	f000 fa0a 	bl	8008094 <raise>
 8007c80:	2001      	movs	r0, #1
 8007c82:	f7f9 fdc7 	bl	8001814 <_exit>

08007c86 <_malloc_usable_size_r>:
 8007c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8a:	1f18      	subs	r0, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfbc      	itt	lt
 8007c90:	580b      	ldrlt	r3, [r1, r0]
 8007c92:	18c0      	addlt	r0, r0, r3
 8007c94:	4770      	bx	lr

08007c96 <__sfputc_r>:
 8007c96:	6893      	ldr	r3, [r2, #8]
 8007c98:	b410      	push	{r4}
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	6093      	str	r3, [r2, #8]
 8007ca0:	da07      	bge.n	8007cb2 <__sfputc_r+0x1c>
 8007ca2:	6994      	ldr	r4, [r2, #24]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	db01      	blt.n	8007cac <__sfputc_r+0x16>
 8007ca8:	290a      	cmp	r1, #10
 8007caa:	d102      	bne.n	8007cb2 <__sfputc_r+0x1c>
 8007cac:	bc10      	pop	{r4}
 8007cae:	f000 b933 	b.w	8007f18 <__swbuf_r>
 8007cb2:	6813      	ldr	r3, [r2, #0]
 8007cb4:	1c58      	adds	r0, r3, #1
 8007cb6:	6010      	str	r0, [r2, #0]
 8007cb8:	7019      	strb	r1, [r3, #0]
 8007cba:	4608      	mov	r0, r1
 8007cbc:	bc10      	pop	{r4}
 8007cbe:	4770      	bx	lr

08007cc0 <__sfputs_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	18d5      	adds	r5, r2, r3
 8007cca:	42ac      	cmp	r4, r5
 8007ccc:	d101      	bne.n	8007cd2 <__sfputs_r+0x12>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	e007      	b.n	8007ce2 <__sfputs_r+0x22>
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	f7ff ffdc 	bl	8007c96 <__sfputc_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d1f3      	bne.n	8007cca <__sfputs_r+0xa>
 8007ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ce4 <_vfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	460d      	mov	r5, r1
 8007cea:	4614      	mov	r4, r2
 8007cec:	4698      	mov	r8, r3
 8007cee:	4606      	mov	r6, r0
 8007cf0:	b09d      	sub	sp, #116	; 0x74
 8007cf2:	b118      	cbz	r0, 8007cfc <_vfiprintf_r+0x18>
 8007cf4:	6a03      	ldr	r3, [r0, #32]
 8007cf6:	b90b      	cbnz	r3, 8007cfc <_vfiprintf_r+0x18>
 8007cf8:	f7fe f8e8 	bl	8005ecc <__sinit>
 8007cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_vfiprintf_r+0x2a>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_vfiprintf_r+0x2a>
 8007d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d0a:	f7fe f9f5 	bl	80060f8 <__retarget_lock_acquire_recursive>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	071b      	lsls	r3, r3, #28
 8007d12:	d501      	bpl.n	8007d18 <_vfiprintf_r+0x34>
 8007d14:	692b      	ldr	r3, [r5, #16]
 8007d16:	b99b      	cbnz	r3, 8007d40 <_vfiprintf_r+0x5c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 f93a 	bl	8007f94 <__swsetup_r>
 8007d20:	b170      	cbz	r0, 8007d40 <_vfiprintf_r+0x5c>
 8007d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d24:	07dc      	lsls	r4, r3, #31
 8007d26:	d504      	bpl.n	8007d32 <_vfiprintf_r+0x4e>
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d2c:	b01d      	add	sp, #116	; 0x74
 8007d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d32:	89ab      	ldrh	r3, [r5, #12]
 8007d34:	0598      	lsls	r0, r3, #22
 8007d36:	d4f7      	bmi.n	8007d28 <_vfiprintf_r+0x44>
 8007d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3a:	f7fe f9de 	bl	80060fa <__retarget_lock_release_recursive>
 8007d3e:	e7f3      	b.n	8007d28 <_vfiprintf_r+0x44>
 8007d40:	2300      	movs	r3, #0
 8007d42:	9309      	str	r3, [sp, #36]	; 0x24
 8007d44:	2320      	movs	r3, #32
 8007d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d4a:	2330      	movs	r3, #48	; 0x30
 8007d4c:	f04f 0901 	mov.w	r9, #1
 8007d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007f04 <_vfiprintf_r+0x220>
 8007d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	469a      	mov	sl, r3
 8007d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d64:	b10a      	cbz	r2, 8007d6a <_vfiprintf_r+0x86>
 8007d66:	2a25      	cmp	r2, #37	; 0x25
 8007d68:	d1f9      	bne.n	8007d5e <_vfiprintf_r+0x7a>
 8007d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d6e:	d00b      	beq.n	8007d88 <_vfiprintf_r+0xa4>
 8007d70:	465b      	mov	r3, fp
 8007d72:	4622      	mov	r2, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ffa2 	bl	8007cc0 <__sfputs_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	f000 80a9 	beq.w	8007ed4 <_vfiprintf_r+0x1f0>
 8007d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d84:	445a      	add	r2, fp
 8007d86:	9209      	str	r2, [sp, #36]	; 0x24
 8007d88:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 80a1 	beq.w	8007ed4 <_vfiprintf_r+0x1f0>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d9c:	f10a 0a01 	add.w	sl, sl, #1
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	9307      	str	r3, [sp, #28]
 8007da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007da8:	931a      	str	r3, [sp, #104]	; 0x68
 8007daa:	4654      	mov	r4, sl
 8007dac:	2205      	movs	r2, #5
 8007dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db2:	4854      	ldr	r0, [pc, #336]	; (8007f04 <_vfiprintf_r+0x220>)
 8007db4:	f7fe f9a2 	bl	80060fc <memchr>
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	b9d8      	cbnz	r0, 8007df4 <_vfiprintf_r+0x110>
 8007dbc:	06d1      	lsls	r1, r2, #27
 8007dbe:	bf44      	itt	mi
 8007dc0:	2320      	movmi	r3, #32
 8007dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc6:	0713      	lsls	r3, r2, #28
 8007dc8:	bf44      	itt	mi
 8007dca:	232b      	movmi	r3, #43	; 0x2b
 8007dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd6:	d015      	beq.n	8007e04 <_vfiprintf_r+0x120>
 8007dd8:	4654      	mov	r4, sl
 8007dda:	2000      	movs	r0, #0
 8007ddc:	f04f 0c0a 	mov.w	ip, #10
 8007de0:	9a07      	ldr	r2, [sp, #28]
 8007de2:	4621      	mov	r1, r4
 8007de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de8:	3b30      	subs	r3, #48	; 0x30
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d94d      	bls.n	8007e8a <_vfiprintf_r+0x1a6>
 8007dee:	b1b0      	cbz	r0, 8007e1e <_vfiprintf_r+0x13a>
 8007df0:	9207      	str	r2, [sp, #28]
 8007df2:	e014      	b.n	8007e1e <_vfiprintf_r+0x13a>
 8007df4:	eba0 0308 	sub.w	r3, r0, r8
 8007df8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	46a2      	mov	sl, r4
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	e7d2      	b.n	8007daa <_vfiprintf_r+0xc6>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	1d19      	adds	r1, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	9103      	str	r1, [sp, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bfbb      	ittet	lt
 8007e10:	425b      	neglt	r3, r3
 8007e12:	f042 0202 	orrlt.w	r2, r2, #2
 8007e16:	9307      	strge	r3, [sp, #28]
 8007e18:	9307      	strlt	r3, [sp, #28]
 8007e1a:	bfb8      	it	lt
 8007e1c:	9204      	strlt	r2, [sp, #16]
 8007e1e:	7823      	ldrb	r3, [r4, #0]
 8007e20:	2b2e      	cmp	r3, #46	; 0x2e
 8007e22:	d10c      	bne.n	8007e3e <_vfiprintf_r+0x15a>
 8007e24:	7863      	ldrb	r3, [r4, #1]
 8007e26:	2b2a      	cmp	r3, #42	; 0x2a
 8007e28:	d134      	bne.n	8007e94 <_vfiprintf_r+0x1b0>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	3402      	adds	r4, #2
 8007e2e:	1d1a      	adds	r2, r3, #4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	9203      	str	r2, [sp, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfb8      	it	lt
 8007e38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f08 <_vfiprintf_r+0x224>
 8007e42:	2203      	movs	r2, #3
 8007e44:	4650      	mov	r0, sl
 8007e46:	7821      	ldrb	r1, [r4, #0]
 8007e48:	f7fe f958 	bl	80060fc <memchr>
 8007e4c:	b138      	cbz	r0, 8007e5e <_vfiprintf_r+0x17a>
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	9b04      	ldr	r3, [sp, #16]
 8007e52:	eba0 000a 	sub.w	r0, r0, sl
 8007e56:	4082      	lsls	r2, r0
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e62:	2206      	movs	r2, #6
 8007e64:	4829      	ldr	r0, [pc, #164]	; (8007f0c <_vfiprintf_r+0x228>)
 8007e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e6a:	f7fe f947 	bl	80060fc <memchr>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d03f      	beq.n	8007ef2 <_vfiprintf_r+0x20e>
 8007e72:	4b27      	ldr	r3, [pc, #156]	; (8007f10 <_vfiprintf_r+0x22c>)
 8007e74:	bb1b      	cbnz	r3, 8007ebe <_vfiprintf_r+0x1da>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	3307      	adds	r3, #7
 8007e7a:	f023 0307 	bic.w	r3, r3, #7
 8007e7e:	3308      	adds	r3, #8
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e84:	443b      	add	r3, r7
 8007e86:	9309      	str	r3, [sp, #36]	; 0x24
 8007e88:	e768      	b.n	8007d5c <_vfiprintf_r+0x78>
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e92:	e7a6      	b.n	8007de2 <_vfiprintf_r+0xfe>
 8007e94:	2300      	movs	r3, #0
 8007e96:	f04f 0c0a 	mov.w	ip, #10
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	3401      	adds	r4, #1
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea6:	3a30      	subs	r2, #48	; 0x30
 8007ea8:	2a09      	cmp	r2, #9
 8007eaa:	d903      	bls.n	8007eb4 <_vfiprintf_r+0x1d0>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0c6      	beq.n	8007e3e <_vfiprintf_r+0x15a>
 8007eb0:	9105      	str	r1, [sp, #20]
 8007eb2:	e7c4      	b.n	8007e3e <_vfiprintf_r+0x15a>
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebc:	e7f0      	b.n	8007ea0 <_vfiprintf_r+0x1bc>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <_vfiprintf_r+0x230>)
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	f7fd fbc3 	bl	8005654 <_printf_float>
 8007ece:	4607      	mov	r7, r0
 8007ed0:	1c78      	adds	r0, r7, #1
 8007ed2:	d1d6      	bne.n	8007e82 <_vfiprintf_r+0x19e>
 8007ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_vfiprintf_r+0x202>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_vfiprintf_r+0x202>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee2:	f7fe f90a 	bl	80060fa <__retarget_lock_release_recursive>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	065b      	lsls	r3, r3, #25
 8007eea:	f53f af1d 	bmi.w	8007d28 <_vfiprintf_r+0x44>
 8007eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef0:	e71c      	b.n	8007d2c <_vfiprintf_r+0x48>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4630      	mov	r0, r6
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <_vfiprintf_r+0x230>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	f7fd fe49 	bl	8005b94 <_printf_i>
 8007f02:	e7e4      	b.n	8007ece <_vfiprintf_r+0x1ea>
 8007f04:	0800a52c 	.word	0x0800a52c
 8007f08:	0800a532 	.word	0x0800a532
 8007f0c:	0800a536 	.word	0x0800a536
 8007f10:	08005655 	.word	0x08005655
 8007f14:	08007cc1 	.word	0x08007cc1

08007f18 <__swbuf_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	460e      	mov	r6, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b118      	cbz	r0, 8007f2a <__swbuf_r+0x12>
 8007f22:	6a03      	ldr	r3, [r0, #32]
 8007f24:	b90b      	cbnz	r3, 8007f2a <__swbuf_r+0x12>
 8007f26:	f7fd ffd1 	bl	8005ecc <__sinit>
 8007f2a:	69a3      	ldr	r3, [r4, #24]
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	071a      	lsls	r2, r3, #28
 8007f32:	d525      	bpl.n	8007f80 <__swbuf_r+0x68>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	b31b      	cbz	r3, 8007f80 <__swbuf_r+0x68>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	b2f6      	uxtb	r6, r6
 8007f3e:	1a98      	subs	r0, r3, r2
 8007f40:	6963      	ldr	r3, [r4, #20]
 8007f42:	4637      	mov	r7, r6
 8007f44:	4283      	cmp	r3, r0
 8007f46:	dc04      	bgt.n	8007f52 <__swbuf_r+0x3a>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f7ff fda2 	bl	8007a94 <_fflush_r>
 8007f50:	b9e0      	cbnz	r0, 8007f8c <__swbuf_r+0x74>
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	60a3      	str	r3, [r4, #8]
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	701e      	strb	r6, [r3, #0]
 8007f60:	6962      	ldr	r2, [r4, #20]
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d004      	beq.n	8007f72 <__swbuf_r+0x5a>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	07db      	lsls	r3, r3, #31
 8007f6c:	d506      	bpl.n	8007f7c <__swbuf_r+0x64>
 8007f6e:	2e0a      	cmp	r6, #10
 8007f70:	d104      	bne.n	8007f7c <__swbuf_r+0x64>
 8007f72:	4621      	mov	r1, r4
 8007f74:	4628      	mov	r0, r5
 8007f76:	f7ff fd8d 	bl	8007a94 <_fflush_r>
 8007f7a:	b938      	cbnz	r0, 8007f8c <__swbuf_r+0x74>
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f806 	bl	8007f94 <__swsetup_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0d5      	beq.n	8007f38 <__swbuf_r+0x20>
 8007f8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f90:	e7f4      	b.n	8007f7c <__swbuf_r+0x64>
	...

08007f94 <__swsetup_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <__swsetup_r+0xac>)
 8007f98:	4605      	mov	r5, r0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	b118      	cbz	r0, 8007fa8 <__swsetup_r+0x14>
 8007fa0:	6a03      	ldr	r3, [r0, #32]
 8007fa2:	b90b      	cbnz	r3, 8007fa8 <__swsetup_r+0x14>
 8007fa4:	f7fd ff92 	bl	8005ecc <__sinit>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fae:	0718      	lsls	r0, r3, #28
 8007fb0:	d422      	bmi.n	8007ff8 <__swsetup_r+0x64>
 8007fb2:	06d9      	lsls	r1, r3, #27
 8007fb4:	d407      	bmi.n	8007fc6 <__swsetup_r+0x32>
 8007fb6:	2309      	movs	r3, #9
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	e034      	b.n	8008030 <__swsetup_r+0x9c>
 8007fc6:	0758      	lsls	r0, r3, #29
 8007fc8:	d512      	bpl.n	8007ff0 <__swsetup_r+0x5c>
 8007fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fcc:	b141      	cbz	r1, 8007fe0 <__swsetup_r+0x4c>
 8007fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d002      	beq.n	8007fdc <__swsetup_r+0x48>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f7fe ff0e 	bl	8006df8 <_free_r>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6363      	str	r3, [r4, #52]	; 0x34
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6063      	str	r3, [r4, #4]
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f043 0308 	orr.w	r3, r3, #8
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	b94b      	cbnz	r3, 8008010 <__swsetup_r+0x7c>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008006:	d003      	beq.n	8008010 <__swsetup_r+0x7c>
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f883 	bl	8008116 <__smakebuf_r>
 8008010:	89a0      	ldrh	r0, [r4, #12]
 8008012:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008016:	f010 0301 	ands.w	r3, r0, #1
 800801a:	d00a      	beq.n	8008032 <__swsetup_r+0x9e>
 800801c:	2300      	movs	r3, #0
 800801e:	60a3      	str	r3, [r4, #8]
 8008020:	6963      	ldr	r3, [r4, #20]
 8008022:	425b      	negs	r3, r3
 8008024:	61a3      	str	r3, [r4, #24]
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	b943      	cbnz	r3, 800803c <__swsetup_r+0xa8>
 800802a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800802e:	d1c4      	bne.n	8007fba <__swsetup_r+0x26>
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	0781      	lsls	r1, r0, #30
 8008034:	bf58      	it	pl
 8008036:	6963      	ldrpl	r3, [r4, #20]
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	e7f4      	b.n	8008026 <__swsetup_r+0x92>
 800803c:	2000      	movs	r0, #0
 800803e:	e7f7      	b.n	8008030 <__swsetup_r+0x9c>
 8008040:	200001e4 	.word	0x200001e4

08008044 <_raise_r>:
 8008044:	291f      	cmp	r1, #31
 8008046:	b538      	push	{r3, r4, r5, lr}
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	d904      	bls.n	8008058 <_raise_r+0x14>
 800804e:	2316      	movs	r3, #22
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800805a:	b112      	cbz	r2, 8008062 <_raise_r+0x1e>
 800805c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008060:	b94b      	cbnz	r3, 8008076 <_raise_r+0x32>
 8008062:	4620      	mov	r0, r4
 8008064:	f000 f830 	bl	80080c8 <_getpid_r>
 8008068:	462a      	mov	r2, r5
 800806a:	4601      	mov	r1, r0
 800806c:	4620      	mov	r0, r4
 800806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008072:	f000 b817 	b.w	80080a4 <_kill_r>
 8008076:	2b01      	cmp	r3, #1
 8008078:	d00a      	beq.n	8008090 <_raise_r+0x4c>
 800807a:	1c59      	adds	r1, r3, #1
 800807c:	d103      	bne.n	8008086 <_raise_r+0x42>
 800807e:	2316      	movs	r3, #22
 8008080:	6003      	str	r3, [r0, #0]
 8008082:	2001      	movs	r0, #1
 8008084:	e7e7      	b.n	8008056 <_raise_r+0x12>
 8008086:	2400      	movs	r4, #0
 8008088:	4628      	mov	r0, r5
 800808a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800808e:	4798      	blx	r3
 8008090:	2000      	movs	r0, #0
 8008092:	e7e0      	b.n	8008056 <_raise_r+0x12>

08008094 <raise>:
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <raise+0xc>)
 8008096:	4601      	mov	r1, r0
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f7ff bfd3 	b.w	8008044 <_raise_r>
 800809e:	bf00      	nop
 80080a0:	200001e4 	.word	0x200001e4

080080a4 <_kill_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	2300      	movs	r3, #0
 80080a8:	4d06      	ldr	r5, [pc, #24]	; (80080c4 <_kill_r+0x20>)
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	f7f9 fba7 	bl	8001804 <_kill>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	d102      	bne.n	80080c0 <_kill_r+0x1c>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	b103      	cbz	r3, 80080c0 <_kill_r+0x1c>
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
 80080c2:	bf00      	nop
 80080c4:	20001b8c 	.word	0x20001b8c

080080c8 <_getpid_r>:
 80080c8:	f7f9 bb9a 	b.w	8001800 <_getpid>

080080cc <__swhatbuf_r>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	460c      	mov	r4, r1
 80080d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d4:	4615      	mov	r5, r2
 80080d6:	2900      	cmp	r1, #0
 80080d8:	461e      	mov	r6, r3
 80080da:	b096      	sub	sp, #88	; 0x58
 80080dc:	da0c      	bge.n	80080f8 <__swhatbuf_r+0x2c>
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	2100      	movs	r1, #0
 80080e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080e6:	bf0c      	ite	eq
 80080e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080ec:	2340      	movne	r3, #64	; 0x40
 80080ee:	2000      	movs	r0, #0
 80080f0:	6031      	str	r1, [r6, #0]
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	b016      	add	sp, #88	; 0x58
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	466a      	mov	r2, sp
 80080fa:	f000 f849 	bl	8008190 <_fstat_r>
 80080fe:	2800      	cmp	r0, #0
 8008100:	dbed      	blt.n	80080de <__swhatbuf_r+0x12>
 8008102:	9901      	ldr	r1, [sp, #4]
 8008104:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008108:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800810c:	4259      	negs	r1, r3
 800810e:	4159      	adcs	r1, r3
 8008110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008114:	e7eb      	b.n	80080ee <__swhatbuf_r+0x22>

08008116 <__smakebuf_r>:
 8008116:	898b      	ldrh	r3, [r1, #12]
 8008118:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800811a:	079d      	lsls	r5, r3, #30
 800811c:	4606      	mov	r6, r0
 800811e:	460c      	mov	r4, r1
 8008120:	d507      	bpl.n	8008132 <__smakebuf_r+0x1c>
 8008122:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	2301      	movs	r3, #1
 800812c:	6163      	str	r3, [r4, #20]
 800812e:	b002      	add	sp, #8
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	466a      	mov	r2, sp
 8008134:	ab01      	add	r3, sp, #4
 8008136:	f7ff ffc9 	bl	80080cc <__swhatbuf_r>
 800813a:	9900      	ldr	r1, [sp, #0]
 800813c:	4605      	mov	r5, r0
 800813e:	4630      	mov	r0, r6
 8008140:	f7fe feca 	bl	8006ed8 <_malloc_r>
 8008144:	b948      	cbnz	r0, 800815a <__smakebuf_r+0x44>
 8008146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814a:	059a      	lsls	r2, r3, #22
 800814c:	d4ef      	bmi.n	800812e <__smakebuf_r+0x18>
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	f043 0302 	orr.w	r3, r3, #2
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	e7e3      	b.n	8008122 <__smakebuf_r+0xc>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	6020      	str	r0, [r4, #0]
 800815e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	9b00      	ldr	r3, [sp, #0]
 8008166:	6120      	str	r0, [r4, #16]
 8008168:	6163      	str	r3, [r4, #20]
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	b15b      	cbz	r3, 8008186 <__smakebuf_r+0x70>
 800816e:	4630      	mov	r0, r6
 8008170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008174:	f000 f81e 	bl	80081b4 <_isatty_r>
 8008178:	b128      	cbz	r0, 8008186 <__smakebuf_r+0x70>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	f043 0301 	orr.w	r3, r3, #1
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	431d      	orrs	r5, r3
 800818a:	81a5      	strh	r5, [r4, #12]
 800818c:	e7cf      	b.n	800812e <__smakebuf_r+0x18>
	...

08008190 <_fstat_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	2300      	movs	r3, #0
 8008194:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_fstat_r+0x20>)
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	4611      	mov	r1, r2
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	f7f9 fb5e 	bl	800185e <_fstat>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d102      	bne.n	80081ac <_fstat_r+0x1c>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	b103      	cbz	r3, 80081ac <_fstat_r+0x1c>
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
 80081ae:	bf00      	nop
 80081b0:	20001b8c 	.word	0x20001b8c

080081b4 <_isatty_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	2300      	movs	r3, #0
 80081b8:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_isatty_r+0x1c>)
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7f9 fb52 	bl	8001868 <_isatty>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_isatty_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_isatty_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	20001b8c 	.word	0x20001b8c

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr
