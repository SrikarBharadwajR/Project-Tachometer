
Firmware_Tachometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024a4  080090c8  080090c8  000190c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b56c  0800b56c  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800b56c  0800b56c  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b56c  0800b56c  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800b574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000184c  20000358  0800b8c8  00020358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ba4  0800b8c8  00021ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024fdc  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e27  00000000  00000000  0004539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000141d0  00000000  00000000  0004a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b0  00000000  00000000  0005e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002898  00000000  00000000  0005f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bef3  00000000  00000000  00061de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028d27  00000000  00000000  0007dcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00093c5c  00000000  00000000  000a69fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e10  00000000  00000000  0013a658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	080090b0 	.word	0x080090b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	080090b0 	.word	0x080090b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001030:	b470      	push	{r4, r5, r6}
	if (state == IDLE) {
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	b962      	cbnz	r2, 8001052 <HAL_TIM_IC_CaptureCallback+0x22>
		T1 = TIM2->CCR1;
 8001038:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800103c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
		TIM4_OVC = 0;
		state = DONE;
 8001040:	2201      	movs	r2, #1
		T1 = TIM2->CCR1;
 8001042:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8001044:	4c0f      	ldr	r4, [pc, #60]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x54>)
		TIM4_OVC = 0;
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x58>)
		T1 = TIM2->CCR1;
 8001048:	6025      	str	r5, [r4, #0]
		TIM4_OVC = 0;
 800104a:	6001      	str	r1, [r0, #0]
		state = DONE;
 800104c:	701a      	strb	r2, [r3, #0]
	} else if (state == DONE) {
		T2 = TIM2->CCR1;
		ticks = (T2 + (TIM4_OVC * 65536)) - T1;
		state = IDLE;
	}
}
 800104e:	bc70      	pop	{r4, r5, r6}
 8001050:	4770      	bx	lr
	} else if (state == DONE) {
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	2a01      	cmp	r2, #1
 8001056:	d1fa      	bne.n	800104e <HAL_TIM_IC_CaptureCallback+0x1e>
		T2 = TIM2->CCR1;
 8001058:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
		state = IDLE;
 800105c:	2100      	movs	r1, #0
		T2 = TIM2->CCR1;
 800105e:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_TIM_IC_CaptureCallback+0x5c>)
		ticks = (T2 + (TIM4_OVC * 65536)) - T1;
 8001062:	4c09      	ldr	r4, [pc, #36]	; (8001088 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001064:	4e07      	ldr	r6, [pc, #28]	; (8001084 <HAL_TIM_IC_CaptureCallback+0x54>)
		T2 = TIM2->CCR1;
 8001066:	6015      	str	r5, [r2, #0]
		ticks = (T2 + (TIM4_OVC * 65536)) - T1;
 8001068:	6825      	ldr	r5, [r4, #0]
 800106a:	6814      	ldr	r4, [r2, #0]
 800106c:	6832      	ldr	r2, [r6, #0]
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001070:	ebc2 4205 	rsb	r2, r2, r5, lsl #16
 8001074:	4422      	add	r2, r4
 8001076:	6002      	str	r2, [r0, #0]
		state = IDLE;
 8001078:	7019      	strb	r1, [r3, #0]
}
 800107a:	bc70      	pop	{r4, r5, r6}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000464 	.word	0x20000464
 8001084:	20000374 	.word	0x20000374
 8001088:	2000037c 	.word	0x2000037c
 800108c:	20000378 	.word	0x20000378
 8001090:	20000468 	.word	0x20000468

08001094 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	TIM4_OVC++;
 8001094:	4a02      	ldr	r2, [pc, #8]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000037c 	.word	0x2000037c

080010a4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a4:	2300      	movs	r3, #0
{
 80010a6:	b5d0      	push	{r4, r6, r7, lr}
 80010a8:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010aa:	2601      	movs	r6, #1
 80010ac:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80010c0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ca:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f002 fafe 	bl	80036e4 <HAL_RCC_OscConfig>
 80010e8:	b108      	cbz	r0, 80010ee <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010ec:	e7fe      	b.n	80010ec <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	4603      	mov	r3, r0
 80010f0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fa:	4621      	mov	r1, r4
 80010fc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001104:	f002 fcde 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	b108      	cbz	r0, 8001110 <SystemClock_Config+0x6c>
 800110c:	b672      	cpsid	i
	while (1) {
 800110e:	e7fe      	b.n	800110e <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001110:	2210      	movs	r2, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001112:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001114:	9304      	str	r3, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001116:	9201      	str	r2, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f002 fdb6 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	b108      	cbz	r0, 8001122 <SystemClock_Config+0x7e>
 800111e:	b672      	cpsid	i
	while (1) {
 8001120:	e7fe      	b.n	8001120 <SystemClock_Config+0x7c>
}
 8001122:	b014      	add	sp, #80	; 0x50
 8001124:	bdd0      	pop	{r4, r6, r7, pc}
 8001126:	bf00      	nop

08001128 <main>:
{
 8001128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112c:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800112e:	f000 fddd 	bl	8001cec <HAL_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001132:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  SystemClock_Config();
 8001136:	f7ff ffb5 	bl	80010a4 <SystemClock_Config>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b72      	ldr	r3, [pc, #456]	; (8001308 <main+0x1e0>)
  hi2c1.Instance = I2C1;
 800113e:	4873      	ldr	r0, [pc, #460]	; (800130c <main+0x1e4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	6999      	ldr	r1, [r3, #24]
 8001142:	f041 0120 	orr.w	r1, r1, #32
 8001146:	6199      	str	r1, [r3, #24]
 8001148:	6999      	ldr	r1, [r3, #24]
 800114a:	f001 0120 	and.w	r1, r1, #32
 800114e:	9101      	str	r1, [sp, #4]
 8001150:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	6999      	ldr	r1, [r3, #24]
 8001154:	f041 0104 	orr.w	r1, r1, #4
 8001158:	6199      	str	r1, [r3, #24]
 800115a:	6999      	ldr	r1, [r3, #24]
 800115c:	f001 0104 	and.w	r1, r1, #4
 8001160:	9102      	str	r1, [sp, #8]
 8001162:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	6999      	ldr	r1, [r3, #24]
 8001166:	f041 0108 	orr.w	r1, r1, #8
 800116a:	6199      	str	r1, [r3, #24]
 800116c:	699b      	ldr	r3, [r3, #24]
  hi2c1.Instance = I2C1;
 800116e:	4968      	ldr	r1, [pc, #416]	; (8001310 <main+0x1e8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	9303      	str	r3, [sp, #12]
  hi2c1.Init.ClockSpeed = 400000;
 8001176:	4b67      	ldr	r3, [pc, #412]	; (8001314 <main+0x1ec>)
  hi2c1.Init.OwnAddress1 = 0;
 8001178:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800117c:	e9c0 1300 	strd	r1, r3, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	e9c0 4204 	strd	r4, r2, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	e9c0 2206 	strd	r2, r2, [r0, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	9d03      	ldr	r5, [sp, #12]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	f000 fffc 	bl	8002188 <HAL_I2C_Init>
 8001190:	b108      	cbz	r0, 8001196 <main+0x6e>
 8001192:	b672      	cpsid	i
	while (1) {
 8001194:	e7fe      	b.n	8001194 <main+0x6c>
  huart2.Instance = USART2;
 8001196:	4603      	mov	r3, r0
  huart2.Init.BaudRate = 115200;
 8001198:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 800119e:	485e      	ldr	r0, [pc, #376]	; (8001318 <main+0x1f0>)
 80011a0:	4c5e      	ldr	r4, [pc, #376]	; (800131c <main+0x1f4>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Instance = USART2;
 80011a6:	6004      	str	r4, [r0, #0]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ac:	6083      	str	r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80011ae:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	6142      	str	r2, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	f003 f9f1 	bl	8004598 <HAL_UART_Init>
 80011b6:	4604      	mov	r4, r0
 80011b8:	b108      	cbz	r0, 80011be <main+0x96>
 80011ba:	b672      	cpsid	i
	while (1) {
 80011bc:	e7fe      	b.n	80011bc <main+0x94>
  MX_USB_DEVICE_Init();
 80011be:	f004 fe95 	bl	8005eec <MX_USB_DEVICE_Init>
  htim2.Instance = TIM2;
 80011c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 65535;
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ca:	2380      	movs	r3, #128	; 0x80
  htim2.Instance = TIM2;
 80011cc:	4d54      	ldr	r5, [pc, #336]	; (8001320 <main+0x1f8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d2:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011d8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011dc:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	9404      	str	r4, [sp, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011e0:	940a      	str	r4, [sp, #40]	; 0x28
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	612c      	str	r4, [r5, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e4:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e6:	9405      	str	r4, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011e8:	940d      	str	r4, [sp, #52]	; 0x34
  htim2.Instance = TIM2;
 80011ea:	6029      	str	r1, [r5, #0]
  htim2.Init.Period = 65535;
 80011ec:	60ea      	str	r2, [r5, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ee:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f0:	f002 fdcc 	bl	8003d8c <HAL_TIM_Base_Init>
 80011f4:	b108      	cbz	r0, 80011fa <main+0xd2>
 80011f6:	b672      	cpsid	i
	while (1) {
 80011f8:	e7fe      	b.n	80011f8 <main+0xd0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fe:	4628      	mov	r0, r5
 8001200:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001204:	f003 f832 	bl	800426c <HAL_TIM_ConfigClockSource>
 8001208:	b108      	cbz	r0, 800120e <main+0xe6>
 800120a:	b672      	cpsid	i
	while (1) {
 800120c:	e7fe      	b.n	800120c <main+0xe4>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800120e:	4628      	mov	r0, r5
 8001210:	f002 fe58 	bl	8003ec4 <HAL_TIM_IC_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	b108      	cbz	r0, 800121c <main+0xf4>
 8001218:	b672      	cpsid	i
	while (1) {
 800121a:	e7fe      	b.n	800121a <main+0xf2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121c:	4628      	mov	r0, r5
 800121e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001224:	f003 f982 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4602      	mov	r2, r0
 800122a:	b108      	cbz	r0, 8001230 <main+0x108>
 800122c:	b672      	cpsid	i
	while (1) {
 800122e:	e7fe      	b.n	800122e <main+0x106>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
  sConfigIC.ICFilter = 0;
 8001232:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001236:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001238:	a90a      	add	r1, sp, #40	; 0x28
 800123a:	4628      	mov	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800123c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800123e:	f002 ff47 	bl	80040d0 <HAL_TIM_IC_ConfigChannel>
 8001242:	4604      	mov	r4, r0
 8001244:	b108      	cbz	r0, 800124a <main+0x122>
 8001246:	b672      	cpsid	i
	while (1) {
 8001248:	e7fe      	b.n	8001248 <main+0x120>
	HAL_TIM_Base_Start_IT(&htim2);
 800124a:	4628      	mov	r0, r5
 800124c:	f002 fe0c 	bl	8003e68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001250:	4621      	mov	r1, r4
 8001252:	4628      	mov	r0, r5
 8001254:	f002 fea4 	bl	8003fa0 <HAL_TIM_IC_Start_IT>
	SSD1306_Init();
 8001258:	4c32      	ldr	r4, [pc, #200]	; (8001324 <main+0x1fc>)
 800125a:	f000 f8c7 	bl	80013ec <SSD1306_Init>
 800125e:	4f32      	ldr	r7, [pc, #200]	; (8001328 <main+0x200>)
 8001260:	4e32      	ldr	r6, [pc, #200]	; (800132c <main+0x204>)
		if (RPM <= 100000) {
 8001262:	4d33      	ldr	r5, [pc, #204]	; (8001330 <main+0x208>)
			message[0] = 'N';
 8001264:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001334 <main+0x20c>
 8001268:	e02f      	b.n	80012ca <main+0x1a2>
			sprintf(message, "%.3f", RPM);
 800126a:	4640      	mov	r0, r8
 800126c:	f7ff f8dc 	bl	8000428 <__aeabi_f2d>
 8001270:	460b      	mov	r3, r1
 8001272:	4602      	mov	r2, r0
 8001274:	4930      	ldr	r1, [pc, #192]	; (8001338 <main+0x210>)
 8001276:	a80a      	add	r0, sp, #40	; 0x28
 8001278:	f005 fdce 	bl	8006e18 <siprintf>
			SSD1306_GotoXY(0, 0);
 800127c:	2100      	movs	r1, #0
 800127e:	4608      	mov	r0, r1
 8001280:	f000 fa10 	bl	80016a4 <SSD1306_GotoXY>
			SSD1306_Puts(message, &Font_16x26, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	492d      	ldr	r1, [pc, #180]	; (800133c <main+0x214>)
 8001288:	a80a      	add	r0, sp, #40	; 0x28
 800128a:	f000 fb75 	bl	8001978 <SSD1306_Puts>
			SSD1306_GotoXY(90, 40);
 800128e:	2128      	movs	r1, #40	; 0x28
 8001290:	205a      	movs	r0, #90	; 0x5a
 8001292:	f000 fa07 	bl	80016a4 <SSD1306_GotoXY>
			SSD1306_Puts("RPM", &Font_11x18, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	4929      	ldr	r1, [pc, #164]	; (8001340 <main+0x218>)
 800129a:	482a      	ldr	r0, [pc, #168]	; (8001344 <main+0x21c>)
 800129c:	f000 fb6c 	bl	8001978 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80012a0:	f000 f86c 	bl	800137c <SSD1306_UpdateScreen>
		ticks = 1.0;
 80012a4:	2301      	movs	r3, #1
		CDC_Transmit_FS((uint8_t *)strcat(message,"\n"), strlen(message));
 80012a6:	a80a      	add	r0, sp, #40	; 0x28
		ticks = 1.0;
 80012a8:	6023      	str	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t *)strcat(message,"\n"), strlen(message));
 80012aa:	f7fe ff51 	bl	8000150 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	883a      	ldrh	r2, [r7, #0]
 80012b2:	a80a      	add	r0, sp, #40	; 0x28
 80012b4:	52c2      	strh	r2, [r0, r3]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b299      	uxth	r1, r3
 80012ba:	f004 fe77 	bl	8005fac <CDC_Transmit_FS>
		HAL_Delay(1000);
 80012be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c2:	f000 fd37 	bl	8001d34 <HAL_Delay>
		SSD1306_Clear();
 80012c6:	f000 fb6b 	bl	80019a0 <SSD1306_Clear>
		float RPM = ((F_CLK / (float) ticks)) * 60.0;
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f7ff fc92 	bl	8000bf4 <__aeabi_ui2f>
 80012d0:	4601      	mov	r1, r0
 80012d2:	4630      	mov	r0, r6
 80012d4:	f7ff fd9a 	bl	8000e0c <__aeabi_fdiv>
		if (RPM <= 100000) {
 80012d8:	4629      	mov	r1, r5
 80012da:	4680      	mov	r8, r0
 80012dc:	f7ff fe8a 	bl	8000ff4 <__aeabi_fcmple>
 80012e0:	4601      	mov	r1, r0
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d1c1      	bne.n	800126a <main+0x142>
			message[4] = 'P';
 80012e6:	f644 5350 	movw	r3, #19792	; 0x4d50
			message[6] = '\0';
 80012ea:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
			message[0] = 'N';
 80012ee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
			message[4] = 'P';
 80012f2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
			SSD1306_GotoXY(0, 0);
 80012f6:	f000 f9d5 	bl	80016a4 <SSD1306_GotoXY>
			SSD1306_Puts(message, &Font_16x26, 1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	490f      	ldr	r1, [pc, #60]	; (800133c <main+0x214>)
 80012fe:	a80a      	add	r0, sp, #40	; 0x28
 8001300:	f000 fb3a 	bl	8001978 <SSD1306_Puts>
 8001304:	e7cc      	b.n	80012a0 <main+0x178>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	20000380 	.word	0x20000380
 8001310:	40005400 	.word	0x40005400
 8001314:	00061a80 	.word	0x00061a80
 8001318:	2000041c 	.word	0x2000041c
 800131c:	40004400 	.word	0x40004400
 8001320:	200003d4 	.word	0x200003d4
 8001324:	20000468 	.word	0x20000468
 8001328:	0800b17c 	.word	0x0800b17c
 800132c:	4f80befc 	.word	0x4f80befc
 8001330:	47c35000 	.word	0x47c35000
 8001334:	52206f4e 	.word	0x52206f4e
 8001338:	0800b170 	.word	0x0800b170
 800133c:	20000008 	.word	0x20000008
 8001340:	20000000 	.word	0x20000000
 8001344:	0800b178 	.word	0x0800b178

08001348 <Error_Handler>:
 8001348:	b672      	cpsid	i
	while (1) {
 800134a:	e7fe      	b.n	800134a <Error_Handler+0x2>

0800134c <ssd1306_I2C_WriteMulti.constprop.0>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800134c:	b510      	push	{r4, lr}
uint8_t dt[256];
dt[0] = reg;
 800134e:	2340      	movs	r3, #64	; 0x40
uint8_t i;
for(i = 0; i < count; i++)
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001350:	240a      	movs	r4, #10
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001352:	b0c2      	sub	sp, #264	; 0x108
 8001354:	4601      	mov	r1, r0
dt[i+1] = data[i];
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	f10d 0009 	add.w	r0, sp, #9
dt[0] = reg;
 800135c:	f88d 3008 	strb.w	r3, [sp, #8]
dt[i+1] = data[i];
 8001360:	f005 fe4a 	bl	8006ff8 <memcpy>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001364:	2381      	movs	r3, #129	; 0x81
 8001366:	2178      	movs	r1, #120	; 0x78
 8001368:	aa02      	add	r2, sp, #8
 800136a:	9400      	str	r4, [sp, #0]
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <ssd1306_I2C_WriteMulti.constprop.0+0x2c>)
 800136e:	f000 ffd1 	bl	8002314 <HAL_I2C_Master_Transmit>
}
 8001372:	b042      	add	sp, #264	; 0x108
 8001374:	bd10      	pop	{r4, pc}
 8001376:	bf00      	nop
 8001378:	20000380 	.word	0x20000380

0800137c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001380:	24b0      	movs	r4, #176	; 0xb0
 8001382:	4f18      	ldr	r7, [pc, #96]	; (80013e4 <SSD1306_UpdateScreen+0x68>)

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001384:	4e18      	ldr	r6, [pc, #96]	; (80013e8 <SSD1306_UpdateScreen+0x6c>)
void SSD1306_UpdateScreen(void) {
 8001386:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001388:	250a      	movs	r5, #10
	dt[0] = reg;
 800138a:	f04f 0800 	mov.w	r8, #0
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800138e:	2302      	movs	r3, #2
 8001390:	2178      	movs	r1, #120	; 0x78
 8001392:	aa03      	add	r2, sp, #12
 8001394:	4630      	mov	r0, r6
 8001396:	9500      	str	r5, [sp, #0]
	dt[1] = data;
 8001398:	f88d 400d 	strb.w	r4, [sp, #13]
	dt[0] = reg;
 800139c:	f88d 800c 	strb.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013a0:	f000 ffb8 	bl	8002314 <HAL_I2C_Master_Transmit>
 80013a4:	2302      	movs	r3, #2
 80013a6:	2178      	movs	r1, #120	; 0x78
 80013a8:	aa03      	add	r2, sp, #12
 80013aa:	4630      	mov	r0, r6
 80013ac:	9500      	str	r5, [sp, #0]
	dt[0] = reg;
 80013ae:	f8ad 800c 	strh.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013b2:	f000 ffaf 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80013b6:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013ba:	2302      	movs	r3, #2
 80013bc:	2178      	movs	r1, #120	; 0x78
 80013be:	aa03      	add	r2, sp, #12
 80013c0:	4630      	mov	r0, r6
 80013c2:	9500      	str	r5, [sp, #0]
	for (m = 0; m < 8; m++) {
 80013c4:	3401      	adds	r4, #1
	dt[0] = reg;
 80013c6:	f8ad c00c 	strh.w	ip, [sp, #12]
	for (m = 0; m < 8; m++) {
 80013ca:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013cc:	f000 ffa2 	bl	8002314 <HAL_I2C_Master_Transmit>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80013d0:	4638      	mov	r0, r7
 80013d2:	f7ff ffbb 	bl	800134c <ssd1306_I2C_WriteMulti.constprop.0>
	for (m = 0; m < 8; m++) {
 80013d6:	2cb8      	cmp	r4, #184	; 0xb8
 80013d8:	f107 0780 	add.w	r7, r7, #128	; 0x80
 80013dc:	d1d4      	bne.n	8001388 <SSD1306_UpdateScreen+0xc>
}
 80013de:	b004      	add	sp, #16
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013e4:	20000474 	.word	0x20000474
 80013e8:	20000380 	.word	0x20000380

080013ec <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013ee:	f644 6320 	movw	r3, #20000	; 0x4e20
uint8_t SSD1306_Init(void) {
 80013f2:	b085      	sub	sp, #20
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013f4:	2201      	movs	r2, #1
 80013f6:	2178      	movs	r1, #120	; 0x78
 80013f8:	48a7      	ldr	r0, [pc, #668]	; (8001698 <SSD1306_Init+0x2ac>)
 80013fa:	f001 f8df 	bl	80025bc <HAL_I2C_IsDeviceReady>
 80013fe:	b110      	cbz	r0, 8001406 <SSD1306_Init+0x1a>
		return 0;
 8001400:	2000      	movs	r0, #0
}
 8001402:	b005      	add	sp, #20
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001406:	240a      	movs	r4, #10
	dt[0] = reg;
 8001408:	f44f 4c2e 	mov.w	ip, #44544	; 0xae00
 800140c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001410:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001414:	4605      	mov	r5, r0
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001416:	aa03      	add	r2, sp, #12
 8001418:	2302      	movs	r3, #2
 800141a:	2178      	movs	r1, #120	; 0x78
 800141c:	9400      	str	r4, [sp, #0]
 800141e:	489e      	ldr	r0, [pc, #632]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001420:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001424:	f000 ff76 	bl	8002314 <HAL_I2C_Master_Transmit>
 8001428:	aa03      	add	r2, sp, #12
 800142a:	2302      	movs	r3, #2
 800142c:	2178      	movs	r1, #120	; 0x78
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	4899      	ldr	r0, [pc, #612]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001432:	f8ad 600c 	strh.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001436:	f000 ff6d 	bl	8002314 <HAL_I2C_Master_Transmit>
 800143a:	aa03      	add	r2, sp, #12
 800143c:	2302      	movs	r3, #2
 800143e:	2178      	movs	r1, #120	; 0x78
 8001440:	9400      	str	r4, [sp, #0]
 8001442:	4895      	ldr	r0, [pc, #596]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001444:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001448:	f000 ff64 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800144c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001450:	aa03      	add	r2, sp, #12
	dt[0] = reg;
 8001452:	f8ad 300c 	strh.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001456:	2178      	movs	r1, #120	; 0x78
 8001458:	2302      	movs	r3, #2
 800145a:	9400      	str	r4, [sp, #0]
 800145c:	488e      	ldr	r0, [pc, #568]	; (8001698 <SSD1306_Init+0x2ac>)
 800145e:	f000 ff59 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 8001462:	f44f 4348 	mov.w	r3, #51200	; 0xc800
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001466:	aa03      	add	r2, sp, #12
	dt[0] = reg;
 8001468:	f8ad 300c 	strh.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800146c:	2178      	movs	r1, #120	; 0x78
 800146e:	2302      	movs	r3, #2
 8001470:	9400      	str	r4, [sp, #0]
 8001472:	4889      	ldr	r0, [pc, #548]	; (8001698 <SSD1306_Init+0x2ac>)
 8001474:	f000 ff4e 	bl	8002314 <HAL_I2C_Master_Transmit>
 8001478:	aa03      	add	r2, sp, #12
 800147a:	2302      	movs	r3, #2
 800147c:	2178      	movs	r1, #120	; 0x78
 800147e:	9400      	str	r4, [sp, #0]
 8001480:	4885      	ldr	r0, [pc, #532]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001482:	f8ad 500c 	strh.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001486:	f000 ff45 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800148a:	f8ad 700c 	strh.w	r7, [sp, #12]
 800148e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001492:	aa03      	add	r2, sp, #12
 8001494:	2302      	movs	r3, #2
 8001496:	2178      	movs	r1, #120	; 0x78
 8001498:	9400      	str	r4, [sp, #0]
 800149a:	487f      	ldr	r0, [pc, #508]	; (8001698 <SSD1306_Init+0x2ac>)
 800149c:	f000 ff3a 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80014a0:	f8ad 700c 	strh.w	r7, [sp, #12]
 80014a4:	f44f 4701 	mov.w	r7, #33024	; 0x8100
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014a8:	aa03      	add	r2, sp, #12
 80014aa:	2302      	movs	r3, #2
 80014ac:	2178      	movs	r1, #120	; 0x78
 80014ae:	9400      	str	r4, [sp, #0]
 80014b0:	4879      	ldr	r0, [pc, #484]	; (8001698 <SSD1306_Init+0x2ac>)
 80014b2:	f000 ff2f 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80014b6:	f8ad 700c 	strh.w	r7, [sp, #12]
 80014ba:	f44f 477f 	mov.w	r7, #65280	; 0xff00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014be:	aa03      	add	r2, sp, #12
 80014c0:	2302      	movs	r3, #2
 80014c2:	2178      	movs	r1, #120	; 0x78
 80014c4:	9400      	str	r4, [sp, #0]
 80014c6:	4874      	ldr	r0, [pc, #464]	; (8001698 <SSD1306_Init+0x2ac>)
 80014c8:	f000 ff24 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80014cc:	f8ad 700c 	strh.w	r7, [sp, #12]
 80014d0:	f44f 4721 	mov.w	r7, #41216	; 0xa100
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014d4:	aa03      	add	r2, sp, #12
 80014d6:	2302      	movs	r3, #2
 80014d8:	2178      	movs	r1, #120	; 0x78
 80014da:	9400      	str	r4, [sp, #0]
 80014dc:	486e      	ldr	r0, [pc, #440]	; (8001698 <SSD1306_Init+0x2ac>)
 80014de:	f000 ff19 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80014e2:	f8ad 700c 	strh.w	r7, [sp, #12]
 80014e6:	f44f 4726 	mov.w	r7, #42496	; 0xa600
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014ea:	aa03      	add	r2, sp, #12
 80014ec:	2302      	movs	r3, #2
 80014ee:	2178      	movs	r1, #120	; 0x78
 80014f0:	9400      	str	r4, [sp, #0]
 80014f2:	4869      	ldr	r0, [pc, #420]	; (8001698 <SSD1306_Init+0x2ac>)
 80014f4:	f000 ff0e 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80014f8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80014fc:	f44f 4728 	mov.w	r7, #43008	; 0xa800
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001500:	aa03      	add	r2, sp, #12
 8001502:	2302      	movs	r3, #2
 8001504:	2178      	movs	r1, #120	; 0x78
 8001506:	9400      	str	r4, [sp, #0]
 8001508:	4863      	ldr	r0, [pc, #396]	; (8001698 <SSD1306_Init+0x2ac>)
 800150a:	f000 ff03 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800150e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8001512:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001516:	aa03      	add	r2, sp, #12
 8001518:	2302      	movs	r3, #2
 800151a:	2178      	movs	r1, #120	; 0x78
 800151c:	9400      	str	r4, [sp, #0]
 800151e:	485e      	ldr	r0, [pc, #376]	; (8001698 <SSD1306_Init+0x2ac>)
 8001520:	f000 fef8 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 8001524:	f8ad 700c 	strh.w	r7, [sp, #12]
 8001528:	f44f 4724 	mov.w	r7, #41984	; 0xa400
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800152c:	aa03      	add	r2, sp, #12
 800152e:	2302      	movs	r3, #2
 8001530:	2178      	movs	r1, #120	; 0x78
 8001532:	9400      	str	r4, [sp, #0]
 8001534:	4858      	ldr	r0, [pc, #352]	; (8001698 <SSD1306_Init+0x2ac>)
 8001536:	f000 feed 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800153a:	f8ad 700c 	strh.w	r7, [sp, #12]
 800153e:	f44f 4753 	mov.w	r7, #54016	; 0xd300
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001542:	aa03      	add	r2, sp, #12
 8001544:	2302      	movs	r3, #2
 8001546:	2178      	movs	r1, #120	; 0x78
 8001548:	9400      	str	r4, [sp, #0]
 800154a:	4853      	ldr	r0, [pc, #332]	; (8001698 <SSD1306_Init+0x2ac>)
 800154c:	f000 fee2 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 8001550:	f8ad 700c 	strh.w	r7, [sp, #12]
 8001554:	f44f 4755 	mov.w	r7, #54528	; 0xd500
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001558:	aa03      	add	r2, sp, #12
 800155a:	2302      	movs	r3, #2
 800155c:	2178      	movs	r1, #120	; 0x78
 800155e:	9400      	str	r4, [sp, #0]
 8001560:	484d      	ldr	r0, [pc, #308]	; (8001698 <SSD1306_Init+0x2ac>)
 8001562:	f000 fed7 	bl	8002314 <HAL_I2C_Master_Transmit>
 8001566:	aa03      	add	r2, sp, #12
 8001568:	2302      	movs	r3, #2
 800156a:	2178      	movs	r1, #120	; 0x78
 800156c:	9400      	str	r4, [sp, #0]
 800156e:	484a      	ldr	r0, [pc, #296]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001570:	f8ad 500c 	strh.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001574:	f000 fece 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 8001578:	f8ad 700c 	strh.w	r7, [sp, #12]
 800157c:	f44f 4770 	mov.w	r7, #61440	; 0xf000
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001580:	aa03      	add	r2, sp, #12
 8001582:	2302      	movs	r3, #2
 8001584:	2178      	movs	r1, #120	; 0x78
 8001586:	9400      	str	r4, [sp, #0]
 8001588:	4843      	ldr	r0, [pc, #268]	; (8001698 <SSD1306_Init+0x2ac>)
 800158a:	f000 fec3 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800158e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8001592:	f44f 4759 	mov.w	r7, #55552	; 0xd900
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001596:	aa03      	add	r2, sp, #12
 8001598:	2302      	movs	r3, #2
 800159a:	2178      	movs	r1, #120	; 0x78
 800159c:	9400      	str	r4, [sp, #0]
 800159e:	483e      	ldr	r0, [pc, #248]	; (8001698 <SSD1306_Init+0x2ac>)
 80015a0:	f000 feb8 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80015a4:	f8ad 700c 	strh.w	r7, [sp, #12]
 80015a8:	f44f 5708 	mov.w	r7, #8704	; 0x2200
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015ac:	aa03      	add	r2, sp, #12
 80015ae:	2302      	movs	r3, #2
 80015b0:	2178      	movs	r1, #120	; 0x78
 80015b2:	9400      	str	r4, [sp, #0]
 80015b4:	4838      	ldr	r0, [pc, #224]	; (8001698 <SSD1306_Init+0x2ac>)
 80015b6:	f000 fead 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80015ba:	f8ad 700c 	strh.w	r7, [sp, #12]
 80015be:	f44f 475a 	mov.w	r7, #55808	; 0xda00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015c2:	aa03      	add	r2, sp, #12
 80015c4:	2302      	movs	r3, #2
 80015c6:	2178      	movs	r1, #120	; 0x78
 80015c8:	9400      	str	r4, [sp, #0]
 80015ca:	4833      	ldr	r0, [pc, #204]	; (8001698 <SSD1306_Init+0x2ac>)
 80015cc:	f000 fea2 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80015d0:	f8ad 700c 	strh.w	r7, [sp, #12]
 80015d4:	f44f 5790 	mov.w	r7, #4608	; 0x1200
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015d8:	aa03      	add	r2, sp, #12
 80015da:	2302      	movs	r3, #2
 80015dc:	2178      	movs	r1, #120	; 0x78
 80015de:	9400      	str	r4, [sp, #0]
 80015e0:	482d      	ldr	r0, [pc, #180]	; (8001698 <SSD1306_Init+0x2ac>)
 80015e2:	f000 fe97 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 80015e6:	f8ad 700c 	strh.w	r7, [sp, #12]
 80015ea:	f44f 475b 	mov.w	r7, #56064	; 0xdb00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015ee:	aa03      	add	r2, sp, #12
 80015f0:	2302      	movs	r3, #2
 80015f2:	2178      	movs	r1, #120	; 0x78
 80015f4:	9400      	str	r4, [sp, #0]
 80015f6:	4828      	ldr	r0, [pc, #160]	; (8001698 <SSD1306_Init+0x2ac>)
 80015f8:	f000 fe8c 	bl	8002314 <HAL_I2C_Master_Transmit>
 80015fc:	aa03      	add	r2, sp, #12
 80015fe:	2302      	movs	r3, #2
 8001600:	2178      	movs	r1, #120	; 0x78
 8001602:	9400      	str	r4, [sp, #0]
 8001604:	4824      	ldr	r0, [pc, #144]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001606:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800160a:	f000 fe83 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800160e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8001612:	f44f 460d 	mov.w	r6, #36096	; 0x8d00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001616:	aa03      	add	r2, sp, #12
 8001618:	2302      	movs	r3, #2
 800161a:	2178      	movs	r1, #120	; 0x78
 800161c:	9400      	str	r4, [sp, #0]
 800161e:	481e      	ldr	r0, [pc, #120]	; (8001698 <SSD1306_Init+0x2ac>)
 8001620:	f000 fe78 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 8001624:	f8ad 600c 	strh.w	r6, [sp, #12]
 8001628:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800162c:	aa03      	add	r2, sp, #12
 800162e:	2302      	movs	r3, #2
 8001630:	2178      	movs	r1, #120	; 0x78
 8001632:	9400      	str	r4, [sp, #0]
 8001634:	4818      	ldr	r0, [pc, #96]	; (8001698 <SSD1306_Init+0x2ac>)
 8001636:	f000 fe6d 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 800163a:	f8ad 600c 	strh.w	r6, [sp, #12]
 800163e:	f44f 462f 	mov.w	r6, #44800	; 0xaf00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001642:	aa03      	add	r2, sp, #12
 8001644:	2302      	movs	r3, #2
 8001646:	2178      	movs	r1, #120	; 0x78
 8001648:	9400      	str	r4, [sp, #0]
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <SSD1306_Init+0x2ac>)
 800164c:	f000 fe62 	bl	8002314 <HAL_I2C_Master_Transmit>
	dt[0] = reg;
 8001650:	f8ad 600c 	strh.w	r6, [sp, #12]
 8001654:	f44f 5638 	mov.w	r6, #11776	; 0x2e00
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001658:	aa03      	add	r2, sp, #12
 800165a:	2302      	movs	r3, #2
 800165c:	2178      	movs	r1, #120	; 0x78
 800165e:	9400      	str	r4, [sp, #0]
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <SSD1306_Init+0x2ac>)
 8001662:	f000 fe57 	bl	8002314 <HAL_I2C_Master_Transmit>
 8001666:	2302      	movs	r3, #2
 8001668:	aa03      	add	r2, sp, #12
 800166a:	2178      	movs	r1, #120	; 0x78
 800166c:	9400      	str	r4, [sp, #0]
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <SSD1306_Init+0x2ac>)
	dt[0] = reg;
 8001670:	f8ad 600c 	strh.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001674:	f000 fe4e 	bl	8002314 <HAL_I2C_Master_Transmit>
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	4629      	mov	r1, r5
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <SSD1306_Init+0x2b0>)
 8001680:	f005 fc2d 	bl	8006ede <memset>
	SSD1306_UpdateScreen();
 8001684:	f7ff fe7a 	bl	800137c <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001688:	2201      	movs	r2, #1
	return 1;
 800168a:	4610      	mov	r0, r2
	SSD1306.CurrentX = 0;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SSD1306_Init+0x2b4>)
 800168e:	601d      	str	r5, [r3, #0]
	SSD1306.Initialized = 1;
 8001690:	715a      	strb	r2, [r3, #5]
}
 8001692:	b005      	add	sp, #20
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001696:	bf00      	nop
 8001698:	20000380 	.word	0x20000380
 800169c:	20000474 	.word	0x20000474
 80016a0:	2000046c 	.word	0x2000046c

080016a4 <SSD1306_GotoXY>:
	SSD1306.CurrentX = x;
 80016a4:	4b01      	ldr	r3, [pc, #4]	; (80016ac <SSD1306_GotoXY+0x8>)
 80016a6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80016a8:	8059      	strh	r1, [r3, #2]
}
 80016aa:	4770      	bx	lr
 80016ac:	2000046c 	.word	0x2000046c

080016b0 <SSD1306_Putc>:
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016b4:	4cae      	ldr	r4, [pc, #696]	; (8001970 <SSD1306_Putc+0x2c0>)
 80016b6:	780b      	ldrb	r3, [r1, #0]
 80016b8:	f8b4 9000 	ldrh.w	r9, [r4]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016bc:	4690      	mov	r8, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016be:	eb09 0203 	add.w	r2, r9, r3
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016c2:	b085      	sub	sp, #20
	if (
 80016c4:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016c6:	9003      	str	r0, [sp, #12]
	if (
 80016c8:	dc5c      	bgt.n	8001784 <SSD1306_Putc+0xd4>
 80016ca:	4684      	mov	ip, r0
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016cc:	784e      	ldrb	r6, [r1, #1]
 80016ce:	8860      	ldrh	r0, [r4, #2]
 80016d0:	4625      	mov	r5, r4
 80016d2:	1984      	adds	r4, r0, r6
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016d4:	2c3f      	cmp	r4, #63	; 0x3f
 80016d6:	dc55      	bgt.n	8001784 <SSD1306_Putc+0xd4>
	for (i = 0; i < Font->FontHeight; i++) {
 80016d8:	2e00      	cmp	r6, #0
 80016da:	f000 80dd 	beq.w	8001898 <SSD1306_Putc+0x1e8>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016de:	f1b8 0f00 	cmp.w	r8, #0
		color = (SSD1306_COLOR_t)!color;
 80016e2:	bf13      	iteet	ne
 80016e4:	2201      	movne	r2, #1
 80016e6:	2200      	moveq	r2, #0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016e8:	2401      	moveq	r4, #1
 80016ea:	2400      	movne	r4, #0
	if (SSD1306.Inverted) {
 80016ec:	792d      	ldrb	r5, [r5, #4]
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ee:	4fa1      	ldr	r7, [pc, #644]	; (8001974 <SSD1306_Putc+0x2c4>)
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	bf18      	it	ne
 80016f4:	4614      	movne	r4, r2
 80016f6:	9402      	str	r4, [sp, #8]
	for (i = 0; i < Font->FontHeight; i++) {
 80016f8:	2400      	movs	r4, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016fa:	f1ac 0220 	sub.w	r2, ip, #32
	if (SSD1306.Inverted) {
 80016fe:	9501      	str	r5, [sp, #4]
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	9a00      	ldr	r2, [sp, #0]
 8001704:	fb02 4506 	mla	r5, r2, r6, r4
 8001708:	684a      	ldr	r2, [r1, #4]
 800170a:	f832 b015 	ldrh.w	fp, [r2, r5, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80c1 	beq.w	8001896 <SSD1306_Putc+0x1e6>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001714:	2201      	movs	r2, #1
 8001716:	f000 0507 	and.w	r5, r0, #7
 800171a:	fa02 f505 	lsl.w	r5, r2, r5
 800171e:	ea6f 0e05 	mvn.w	lr, r5
 8001722:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
 8001726:	9a01      	ldr	r2, [sp, #4]
 8001728:	b2ed      	uxtb	r5, r5
 800172a:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 800172e:	fa5f fe8e 	uxtb.w	lr, lr
 8001732:	f1b8 0f00 	cmp.w	r8, #0
 8001736:	d041      	beq.n	80017bc <SSD1306_Putc+0x10c>
 8001738:	2a00      	cmp	r2, #0
 800173a:	d16c      	bne.n	8001816 <SSD1306_Putc+0x166>
 800173c:	283f      	cmp	r0, #63	; 0x3f
 800173e:	d837      	bhi.n	80017b0 <SSD1306_Putc+0x100>
 8001740:	f1b8 0f01 	cmp.w	r8, #1
 8001744:	f000 80db 	beq.w	80018fe <SSD1306_Putc+0x24e>
		for (j = 0; j < Font->FontWidth; j++) {
 8001748:	4616      	mov	r6, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800174a:	464d      	mov	r5, r9
		for (j = 0; j < Font->FontWidth; j++) {
 800174c:	465a      	mov	r2, fp
 800174e:	e00f      	b.n	8001770 <SSD1306_Putc+0xc0>
	if (
 8001750:	2d7f      	cmp	r5, #127	; 0x7f
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001752:	eb05 0a0c 	add.w	sl, r5, ip
	if (
 8001756:	d806      	bhi.n	8001766 <SSD1306_Putc+0xb6>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001758:	f817 300a 	ldrb.w	r3, [r7, sl]
 800175c:	ea0e 0303 	and.w	r3, lr, r3
 8001760:	f807 300a 	strb.w	r3, [r7, sl]
		for (j = 0; j < Font->FontWidth; j++) {
 8001764:	780b      	ldrb	r3, [r1, #0]
 8001766:	3601      	adds	r6, #1
 8001768:	3501      	adds	r5, #1
 800176a:	429e      	cmp	r6, r3
 800176c:	b2ad      	uxth	r5, r5
 800176e:	d21e      	bcs.n	80017ae <SSD1306_Putc+0xfe>
			if ((b << j) & 0x8000) {
 8001770:	fa02 fa06 	lsl.w	sl, r2, r6
 8001774:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 8001778:	d1ea      	bne.n	8001750 <SSD1306_Putc+0xa0>
	if (
 800177a:	2d7f      	cmp	r5, #127	; 0x7f
 800177c:	d8f3      	bhi.n	8001766 <SSD1306_Putc+0xb6>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800177e:	eb05 0a0c 	add.w	sl, r5, ip
 8001782:	e7e9      	b.n	8001758 <SSD1306_Putc+0xa8>
		return 0;
 8001784:	2000      	movs	r0, #0
}
 8001786:	b005      	add	sp, #20
 8001788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (
 800178c:	2e7f      	cmp	r6, #127	; 0x7f
 800178e:	d808      	bhi.n	80017a2 <SSD1306_Putc+0xf2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001790:	eb06 0b0c 	add.w	fp, r6, ip
 8001794:	f817 300b 	ldrb.w	r3, [r7, fp]
 8001798:	ea0e 0303 	and.w	r3, lr, r3
 800179c:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 80017a0:	780b      	ldrb	r3, [r1, #0]
 80017a2:	f10a 0a01 	add.w	sl, sl, #1
 80017a6:	3601      	adds	r6, #1
 80017a8:	459a      	cmp	sl, r3
 80017aa:	b2b6      	uxth	r6, r6
 80017ac:	d35d      	bcc.n	800186a <SSD1306_Putc+0x1ba>
 80017ae:	784e      	ldrb	r6, [r1, #1]
	for (i = 0; i < Font->FontHeight; i++) {
 80017b0:	3401      	adds	r4, #1
 80017b2:	42a6      	cmp	r6, r4
 80017b4:	d976      	bls.n	80018a4 <SSD1306_Putc+0x1f4>
 80017b6:	3001      	adds	r0, #1
 80017b8:	b280      	uxth	r0, r0
 80017ba:	e7a2      	b.n	8001702 <SSD1306_Putc+0x52>
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d14c      	bne.n	800185a <SSD1306_Putc+0x1aa>
 80017c0:	283f      	cmp	r0, #63	; 0x3f
 80017c2:	d8f5      	bhi.n	80017b0 <SSD1306_Putc+0x100>
		for (j = 0; j < Font->FontWidth; j++) {
 80017c4:	4692      	mov	sl, r2
 80017c6:	465a      	mov	r2, fp
			if ((b << j) & 0x8000) {
 80017c8:	fa02 fb0a 	lsl.w	fp, r2, sl
 80017cc:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017d0:	464e      	mov	r6, r9
			if ((b << j) & 0x8000) {
 80017d2:	d015      	beq.n	8001800 <SSD1306_Putc+0x150>
	if (
 80017d4:	2e7f      	cmp	r6, #127	; 0x7f
 80017d6:	d808      	bhi.n	80017ea <SSD1306_Putc+0x13a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017d8:	eb06 0b0c 	add.w	fp, r6, ip
 80017dc:	f817 300b 	ldrb.w	r3, [r7, fp]
 80017e0:	ea0e 0303 	and.w	r3, lr, r3
 80017e4:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 80017e8:	780b      	ldrb	r3, [r1, #0]
 80017ea:	f10a 0a01 	add.w	sl, sl, #1
 80017ee:	3601      	adds	r6, #1
 80017f0:	459a      	cmp	sl, r3
 80017f2:	b2b6      	uxth	r6, r6
 80017f4:	d2db      	bcs.n	80017ae <SSD1306_Putc+0xfe>
			if ((b << j) & 0x8000) {
 80017f6:	fa02 fb0a 	lsl.w	fp, r2, sl
 80017fa:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 80017fe:	d1e9      	bne.n	80017d4 <SSD1306_Putc+0x124>
	if (
 8001800:	2e7f      	cmp	r6, #127	; 0x7f
 8001802:	d8f2      	bhi.n	80017ea <SSD1306_Putc+0x13a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001804:	eb06 0b0c 	add.w	fp, r6, ip
 8001808:	f817 300b 	ldrb.w	r3, [r7, fp]
 800180c:	432b      	orrs	r3, r5
 800180e:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 8001812:	780b      	ldrb	r3, [r1, #0]
 8001814:	e7e9      	b.n	80017ea <SSD1306_Putc+0x13a>
 8001816:	283f      	cmp	r0, #63	; 0x3f
 8001818:	d8ca      	bhi.n	80017b0 <SSD1306_Putc+0x100>
 800181a:	9e02      	ldr	r6, [sp, #8]
 800181c:	2e00      	cmp	r6, #0
 800181e:	d147      	bne.n	80018b0 <SSD1306_Putc+0x200>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001820:	464d      	mov	r5, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8001822:	465a      	mov	r2, fp
 8001824:	e00f      	b.n	8001846 <SSD1306_Putc+0x196>
	if (
 8001826:	2d7f      	cmp	r5, #127	; 0x7f
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001828:	eb05 0a0c 	add.w	sl, r5, ip
	if (
 800182c:	d806      	bhi.n	800183c <SSD1306_Putc+0x18c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800182e:	f817 300a 	ldrb.w	r3, [r7, sl]
 8001832:	ea0e 0303 	and.w	r3, lr, r3
 8001836:	f807 300a 	strb.w	r3, [r7, sl]
		for (j = 0; j < Font->FontWidth; j++) {
 800183a:	780b      	ldrb	r3, [r1, #0]
 800183c:	3601      	adds	r6, #1
 800183e:	3501      	adds	r5, #1
 8001840:	429e      	cmp	r6, r3
 8001842:	b2ad      	uxth	r5, r5
 8001844:	d2b3      	bcs.n	80017ae <SSD1306_Putc+0xfe>
			if ((b << j) & 0x8000) {
 8001846:	fa02 fa06 	lsl.w	sl, r2, r6
 800184a:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 800184e:	d0ea      	beq.n	8001826 <SSD1306_Putc+0x176>
	if (
 8001850:	2d7f      	cmp	r5, #127	; 0x7f
 8001852:	d8f3      	bhi.n	800183c <SSD1306_Putc+0x18c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001854:	eb05 0a0c 	add.w	sl, r5, ip
 8001858:	e7e9      	b.n	800182e <SSD1306_Putc+0x17e>
 800185a:	283f      	cmp	r0, #63	; 0x3f
 800185c:	d8a8      	bhi.n	80017b0 <SSD1306_Putc+0x100>
 800185e:	9a02      	ldr	r2, [sp, #8]
 8001860:	464e      	mov	r6, r9
 8001862:	2a00      	cmp	r2, #0
 8001864:	d171      	bne.n	800194a <SSD1306_Putc+0x29a>
		for (j = 0; j < Font->FontWidth; j++) {
 8001866:	4692      	mov	sl, r2
 8001868:	465a      	mov	r2, fp
			if ((b << j) & 0x8000) {
 800186a:	fa02 fb0a 	lsl.w	fp, r2, sl
 800186e:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 8001872:	d08b      	beq.n	800178c <SSD1306_Putc+0xdc>
	if (
 8001874:	2e7f      	cmp	r6, #127	; 0x7f
 8001876:	d894      	bhi.n	80017a2 <SSD1306_Putc+0xf2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001878:	eb06 0b0c 	add.w	fp, r6, ip
 800187c:	f817 300b 	ldrb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 8001880:	f10a 0a01 	add.w	sl, sl, #1
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001884:	432b      	orrs	r3, r5
 8001886:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 800188a:	780b      	ldrb	r3, [r1, #0]
 800188c:	3601      	adds	r6, #1
 800188e:	459a      	cmp	sl, r3
 8001890:	b2b6      	uxth	r6, r6
 8001892:	d3ea      	bcc.n	800186a <SSD1306_Putc+0x1ba>
 8001894:	e78b      	b.n	80017ae <SSD1306_Putc+0xfe>
 8001896:	464a      	mov	r2, r9
	SSD1306.CurrentX += Font->FontWidth;
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <SSD1306_Putc+0x2c0>)
 800189a:	9803      	ldr	r0, [sp, #12]
 800189c:	801a      	strh	r2, [r3, #0]
}
 800189e:	b005      	add	sp, #20
 80018a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018a4:	eb09 0203 	add.w	r2, r9, r3
	SSD1306.CurrentX += Font->FontWidth;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <SSD1306_Putc+0x2c0>)
 80018aa:	9803      	ldr	r0, [sp, #12]
 80018ac:	801a      	strh	r2, [r3, #0]
	return ch;
 80018ae:	e7f6      	b.n	800189e <SSD1306_Putc+0x1ee>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018b0:	464e      	mov	r6, r9
		for (j = 0; j < Font->FontWidth; j++) {
 80018b2:	f04f 0a00 	mov.w	sl, #0
 80018b6:	465a      	mov	r2, fp
 80018b8:	e011      	b.n	80018de <SSD1306_Putc+0x22e>
	if (
 80018ba:	2e7f      	cmp	r6, #127	; 0x7f
 80018bc:	d808      	bhi.n	80018d0 <SSD1306_Putc+0x220>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018be:	eb06 0b0c 	add.w	fp, r6, ip
 80018c2:	f817 300b 	ldrb.w	r3, [r7, fp]
 80018c6:	ea0e 0303 	and.w	r3, lr, r3
 80018ca:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 80018ce:	780b      	ldrb	r3, [r1, #0]
 80018d0:	f10a 0a01 	add.w	sl, sl, #1
 80018d4:	3601      	adds	r6, #1
 80018d6:	459a      	cmp	sl, r3
 80018d8:	b2b6      	uxth	r6, r6
 80018da:	f4bf af68 	bcs.w	80017ae <SSD1306_Putc+0xfe>
			if ((b << j) & 0x8000) {
 80018de:	fa02 fb0a 	lsl.w	fp, r2, sl
 80018e2:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 80018e6:	d1e8      	bne.n	80018ba <SSD1306_Putc+0x20a>
	if (
 80018e8:	2e7f      	cmp	r6, #127	; 0x7f
 80018ea:	d8f1      	bhi.n	80018d0 <SSD1306_Putc+0x220>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018ec:	eb06 0b0c 	add.w	fp, r6, ip
 80018f0:	f817 300b 	ldrb.w	r3, [r7, fp]
 80018f4:	432b      	orrs	r3, r5
 80018f6:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 80018fa:	780b      	ldrb	r3, [r1, #0]
 80018fc:	e7e8      	b.n	80018d0 <SSD1306_Putc+0x220>
 80018fe:	4692      	mov	sl, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001900:	464e      	mov	r6, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8001902:	465a      	mov	r2, fp
 8001904:	e011      	b.n	800192a <SSD1306_Putc+0x27a>
	if (
 8001906:	2e7f      	cmp	r6, #127	; 0x7f
 8001908:	d808      	bhi.n	800191c <SSD1306_Putc+0x26c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800190a:	eb06 0b0c 	add.w	fp, r6, ip
 800190e:	f817 300b 	ldrb.w	r3, [r7, fp]
 8001912:	ea0e 0303 	and.w	r3, lr, r3
 8001916:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 800191a:	780b      	ldrb	r3, [r1, #0]
 800191c:	f10a 0a01 	add.w	sl, sl, #1
 8001920:	3601      	adds	r6, #1
 8001922:	459a      	cmp	sl, r3
 8001924:	b2b6      	uxth	r6, r6
 8001926:	f4bf af42 	bcs.w	80017ae <SSD1306_Putc+0xfe>
			if ((b << j) & 0x8000) {
 800192a:	fa02 fb0a 	lsl.w	fp, r2, sl
 800192e:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 8001932:	d0e8      	beq.n	8001906 <SSD1306_Putc+0x256>
	if (
 8001934:	2e7f      	cmp	r6, #127	; 0x7f
 8001936:	d8f1      	bhi.n	800191c <SSD1306_Putc+0x26c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001938:	eb06 0b0c 	add.w	fp, r6, ip
 800193c:	f817 300b 	ldrb.w	r3, [r7, fp]
 8001940:	432b      	orrs	r3, r5
 8001942:	f807 300b 	strb.w	r3, [r7, fp]
		for (j = 0; j < Font->FontWidth; j++) {
 8001946:	780b      	ldrb	r3, [r1, #0]
 8001948:	e7e8      	b.n	800191c <SSD1306_Putc+0x26c>
 800194a:	46c6      	mov	lr, r8
	if (
 800194c:	2e7f      	cmp	r6, #127	; 0x7f
 800194e:	d807      	bhi.n	8001960 <SSD1306_Putc+0x2b0>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001950:	eb06 0a0c 	add.w	sl, r6, ip
 8001954:	f817 300a 	ldrb.w	r3, [r7, sl]
 8001958:	432b      	orrs	r3, r5
 800195a:	f807 300a 	strb.w	r3, [r7, sl]
		for (j = 0; j < Font->FontWidth; j++) {
 800195e:	780b      	ldrb	r3, [r1, #0]
 8001960:	f10e 0e01 	add.w	lr, lr, #1
 8001964:	3601      	adds	r6, #1
 8001966:	459e      	cmp	lr, r3
 8001968:	b2b6      	uxth	r6, r6
 800196a:	d3ef      	bcc.n	800194c <SSD1306_Putc+0x29c>
 800196c:	784e      	ldrb	r6, [r1, #1]
 800196e:	e71f      	b.n	80017b0 <SSD1306_Putc+0x100>
 8001970:	2000046c 	.word	0x2000046c
 8001974:	20000474 	.word	0x20000474

08001978 <SSD1306_Puts>:
char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001978:	b538      	push	{r3, r4, r5, lr}
 800197a:	4604      	mov	r4, r0
	while (*str) {
 800197c:	7800      	ldrb	r0, [r0, #0]
 800197e:	b160      	cbz	r0, 800199a <SSD1306_Puts+0x22>
 8001980:	4615      	mov	r5, r2
 8001982:	e002      	b.n	800198a <SSD1306_Puts+0x12>
 8001984:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001988:	b138      	cbz	r0, 800199a <SSD1306_Puts+0x22>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800198a:	462a      	mov	r2, r5
 800198c:	f7ff fe90 	bl	80016b0 <SSD1306_Putc>
 8001990:	7823      	ldrb	r3, [r4, #0]
 8001992:	4298      	cmp	r0, r3
 8001994:	d0f6      	beq.n	8001984 <SSD1306_Puts+0xc>
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd38      	pop	{r3, r4, r5, pc}
	return *str;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd38      	pop	{r3, r4, r5, pc}

080019a0 <SSD1306_Clear>:
{
 80019a0:	b508      	push	{r3, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	2100      	movs	r1, #0
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <SSD1306_Clear+0x18>)
 80019aa:	f005 fa98 	bl	8006ede <memset>
}
 80019ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 80019b2:	f7ff bce3 	b.w	800137c <SSD1306_UpdateScreen>
 80019b6:	bf00      	nop
 80019b8:	20000474 	.word	0x20000474

080019bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_MspInit+0x3c>)
{
 80019be:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	619a      	str	r2, [r3, #24]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	f002 0201 	and.w	r2, r2, #1
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019da:	61da      	str	r2, [r3, #28]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019e6:	684b      	ldr	r3, [r1, #4]
 80019e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	b002      	add	sp, #8
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000

08001a00 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	2300      	movs	r3, #0
{
 8001a02:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_I2C_MspInit+0x58>)
 8001a06:	6801      	ldr	r1, [r0, #0]
{
 8001a08:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8001a0a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a10:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a16:	b006      	add	sp, #24
 8001a18:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a1c:	26c0      	movs	r6, #192	; 0xc0
 8001a1e:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4c0e      	ldr	r4, [pc, #56]	; (8001a5c <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	480f      	ldr	r0, [pc, #60]	; (8001a60 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	61a3      	str	r3, [r4, #24]
 8001a2e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a30:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f000 fa01 	bl	8001e44 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a42:	69e3      	ldr	r3, [r4, #28]
 8001a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a48:	61e3      	str	r3, [r4, #28]
 8001a4a:	69e3      	ldr	r3, [r4, #28]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	9b01      	ldr	r3, [sp, #4]
}
 8001a54:	b006      	add	sp, #24
 8001a56:	bdd0      	pop	{r4, r6, r7, pc}
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010c00 	.word	0x40010c00

08001a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM2)
 8001a68:	6803      	ldr	r3, [r0, #0]
{
 8001a6a:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001a74:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(htim_base->Instance==TIM2)
 8001a78:	d001      	beq.n	8001a7e <HAL_TIM_Base_MspInit+0x1a>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a7a:	b007      	add	sp, #28
 8001a7c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a7e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a82:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a86:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	61da      	str	r2, [r3, #28]
 8001a90:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	4812      	ldr	r0, [pc, #72]	; (8001adc <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a94:	f002 0201 	and.w	r2, r2, #1
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	f042 0204 	orr.w	r2, r2, #4
 8001aa2:	619a      	str	r2, [r3, #24]
 8001aa4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aa6:	9502      	str	r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	f003 0304 	and.w	r3, r3, #4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001aac:	4d0c      	ldr	r5, [pc, #48]	; (8001ae0 <HAL_TIM_Base_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f000 f9c7 	bl	8001e44 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ab6:	686b      	ldr	r3, [r5, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab8:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001abe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac6:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ac8:	606b      	str	r3, [r5, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aca:	201c      	movs	r0, #28
 8001acc:	f000 f956 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad0:	201c      	movs	r0, #28
 8001ad2:	f000 f991 	bl	8001df8 <HAL_NVIC_EnableIRQ>
}
 8001ad6:	b007      	add	sp, #28
 8001ad8:	bd30      	pop	{r4, r5, pc}
 8001ada:	bf00      	nop
 8001adc:	40010800 	.word	0x40010800
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_UART_MspInit+0x6c>)
 8001aea:	6802      	ldr	r2, [r0, #0]
{
 8001aec:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8001aee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001af4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART2)
 8001af8:	d001      	beq.n	8001afe <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afa:	b006      	add	sp, #24
 8001afc:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001afe:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001b02:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b04:	2604      	movs	r6, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b0a:	61da      	str	r2, [r3, #28]
 8001b0c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b0e:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b10:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b14:	9200      	str	r2, [sp, #0]
 8001b16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	619a      	str	r2, [r3, #24]
 8001b22:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b32:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f000 f985 	bl	8001e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_UART_MspInit+0x70>)
 8001b40:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f000 f97c 	bl	8001e44 <HAL_GPIO_Init>
}
 8001b4c:	b006      	add	sp, #24
 8001b4e:	bdd0      	pop	{r4, r6, r7, pc}
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40010800 	.word	0x40010800

08001b58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler>
 8001b5a:	bf00      	nop

08001b5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <HardFault_Handler>
 8001b5e:	bf00      	nop

08001b60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler>
 8001b62:	bf00      	nop

08001b64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <BusFault_Handler>
 8001b66:	bf00      	nop

08001b68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler>
 8001b6a:	bf00      	nop

08001b6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop

08001b70 <DebugMon_Handler>:
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <PendSV_Handler>:
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop

08001b78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f000 b8ca 	b.w	8001d10 <HAL_IncTick>

08001b7c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b7c:	4801      	ldr	r0, [pc, #4]	; (8001b84 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001b7e:	f000 becd 	b.w	800291c <HAL_PCD_IRQHandler>
 8001b82:	bf00      	nop
 8001b84:	20001548 	.word	0x20001548

08001b88 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b88:	4801      	ldr	r0, [pc, #4]	; (8001b90 <TIM2_IRQHandler+0x8>)
 8001b8a:	f002 bc25 	b.w	80043d8 <HAL_TIM_IRQHandler>
 8001b8e:	bf00      	nop
 8001b90:	200003d4 	.word	0x200003d4

08001b94 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001b94:	2001      	movs	r0, #1
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9a:	f005 f9f3 	bl	8006f84 <__errno>
 8001b9e:	2216      	movs	r2, #22
 8001ba0:	4603      	mov	r3, r0
  return -1;
}
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  errno = EINVAL;
 8001ba6:	601a      	str	r2, [r3, #0]
}
 8001ba8:	bd08      	pop	{r3, pc}
 8001baa:	bf00      	nop

08001bac <_exit>:

void _exit (int status)
{
 8001bac:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001bae:	f005 f9e9 	bl	8006f84 <__errno>
 8001bb2:	2316      	movs	r3, #22
 8001bb4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001bb6:	e7fe      	b.n	8001bb6 <_exit+0xa>

08001bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	1e16      	subs	r6, r2, #0
 8001bbc:	dd07      	ble.n	8001bce <_read+0x16>
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	42a5      	cmp	r5, r4
 8001bcc:	d1f9      	bne.n	8001bc2 <_read+0xa>
  }

  return len;
}
 8001bce:	4630      	mov	r0, r6
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
 8001bd2:	bf00      	nop

08001bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	1e16      	subs	r6, r2, #0
 8001bd8:	dd07      	ble.n	8001bea <_write+0x16>
 8001bda:	460c      	mov	r4, r1
 8001bdc:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001bde:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001be2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	42ac      	cmp	r4, r5
 8001be8:	d1f9      	bne.n	8001bde <_write+0xa>
  }
  return len;
}
 8001bea:	4630      	mov	r0, r6
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
 8001bee:	bf00      	nop

08001bf0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001bfc:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001bfe:	604b      	str	r3, [r1, #4]
}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001c04:	2001      	movs	r0, #1
 8001c06:	4770      	bx	lr

08001c08 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001c08:	2000      	movs	r0, #0
 8001c0a:	4770      	bx	lr

08001c0c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	490d      	ldr	r1, [pc, #52]	; (8001c44 <_sbrk+0x38>)
{
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <_sbrk+0x3c>)
 8001c14:	4c0d      	ldr	r4, [pc, #52]	; (8001c4c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001c16:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001c1a:	b120      	cbz	r0, 8001c26 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1c:	4403      	add	r3, r0
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d807      	bhi.n	8001c32 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c22:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001c24:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c26:	4c0a      	ldr	r4, [pc, #40]	; (8001c50 <_sbrk+0x44>)
 8001c28:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4403      	add	r3, r0
 8001c2c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001c2e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001c30:	d9f7      	bls.n	8001c22 <_sbrk+0x16>
    errno = ENOMEM;
 8001c32:	f005 f9a7 	bl	8006f84 <__errno>
 8001c36:	220c      	movs	r2, #12
 8001c38:	4603      	mov	r3, r0
    return (void *)-1;
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	bf00      	nop
 8001c44:	20000874 	.word	0x20000874
 8001c48:	20005000 	.word	0x20005000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20001ba8 	.word	0x20001ba8

08001c54 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop

08001c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c58:	f7ff fffc 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c5e:	490c      	ldr	r1, [pc, #48]	; (8001c90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c74:	4c09      	ldr	r4, [pc, #36]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c82:	f005 f985 	bl	8006f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c86:	f7ff fa4f 	bl	8001128 <main>
  bx lr
 8001c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001c94:	0800b574 	.word	0x0800b574
  ldr r2, =_sbss
 8001c98:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001c9c:	20001ba4 	.word	0x20001ba4

08001ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_2_IRQHandler>
	...

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_InitTick+0x3c>)
{
 8001cac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cae:	7811      	ldrb	r1, [r2, #0]
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_InitTick+0x40>)
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fbb2 f0f3 	udiv	r0, r2, r3
 8001cbc:	f000 f8aa 	bl	8001e14 <HAL_SYSTICK_Config>
 8001cc0:	b908      	cbnz	r0, 8001cc6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	2d0f      	cmp	r5, #15
 8001cc4:	d901      	bls.n	8001cca <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
 8001cca:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd4:	f000 f852 	bl	8001d7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_InitTick+0x44>)
 8001cda:	4620      	mov	r0, r4
 8001cdc:	601d      	str	r5, [r3, #0]
}
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
 8001ce0:	20000014 	.word	0x20000014
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	20000018 	.word	0x20000018

08001cec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_Init+0x20>)
{
 8001cee:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	f043 0310 	orr.w	r3, r3, #16
 8001cf8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfa:	f000 f82d 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f7ff ffd0 	bl	8001ca4 <HAL_InitTick>
  HAL_MspInit();
 8001d04:	f7ff fe5a 	bl	80019bc <HAL_MspInit>
}
 8001d08:	2000      	movs	r0, #0
 8001d0a:	bd08      	pop	{r3, pc}
 8001d0c:	40022000 	.word	0x40022000

08001d10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_IncTick+0x10>)
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_IncTick+0x14>)
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	440b      	add	r3, r1
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000878 	.word	0x20000878
 8001d24:	20000014 	.word	0x20000014

08001d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d28:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <HAL_GetTick+0x8>)
 8001d2a:	6818      	ldr	r0, [r3, #0]
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000878 	.word	0x20000878

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fff6 	bl	8001d28 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001d3e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001d40:	d002      	beq.n	8001d48 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_Delay+0x20>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	1b40      	subs	r0, r0, r5
 8001d4e:	42a0      	cmp	r0, r4
 8001d50:	d3fa      	bcc.n	8001d48 <HAL_Delay+0x14>
  {
  }
}
 8001d52:	bd38      	pop	{r3, r4, r5, pc}
 8001d54:	20000014 	.word	0x20000014

08001d58 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d58:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4906      	ldr	r1, [pc, #24]	; (8001d78 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d5e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001d74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b500      	push	{lr}
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d86:	f1c3 0e07 	rsb	lr, r3, #7
 8001d8a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d92:	bf28      	it	cs
 8001d94:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d98:	f1bc 0f06 	cmp.w	ip, #6
 8001d9c:	d91b      	bls.n	8001dd6 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	fa0c fc03 	lsl.w	ip, ip, r3
 8001da8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001db0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001db4:	ea21 010c 	bic.w	r1, r1, ip
 8001db8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001dba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	db0c      	blt.n	8001ddc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	0109      	lsls	r1, r1, #4
 8001dc4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001dc8:	b2c9      	uxtb	r1, r1
 8001dca:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001dce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dd6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd8:	4613      	mov	r3, r2
 8001dda:	e7e7      	b.n	8001dac <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_NVIC_SetPriority+0x78>)
 8001dde:	f000 000f 	and.w	r0, r0, #15
 8001de2:	0109      	lsls	r1, r1, #4
 8001de4:	b2c9      	uxtb	r1, r1
 8001de6:	4403      	add	r3, r0
 8001de8:	7619      	strb	r1, [r3, #24]
 8001dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00
 8001df4:	e000ecfc 	.word	0xe000ecfc

08001df8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	db07      	blt.n	8001e0c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f000 011f 	and.w	r1, r0, #31
 8001e02:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_NVIC_EnableIRQ+0x18>)
 8001e04:	0940      	lsrs	r0, r0, #5
 8001e06:	408b      	lsls	r3, r1
 8001e08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	3801      	subs	r0, #1
 8001e16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e1a:	d20f      	bcs.n	8001e3c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e28:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	4c05      	ldr	r4, [pc, #20]	; (8001e40 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e32:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001e36:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e38:	6119      	str	r1, [r3, #16]
 8001e3a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	680e      	ldr	r6, [r1, #0]
{
 8001e4a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	f000 80b5 	beq.w	8001fbc <HAL_GPIO_Init+0x178>
 8001e52:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e54:	4f7a      	ldr	r7, [pc, #488]	; (8002040 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8001e56:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8001e58:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e5a:	4d7a      	ldr	r5, [pc, #488]	; (8002044 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8001e5c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002048 <HAL_GPIO_Init+0x204>
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8001e62:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e64:	fa36 f403 	lsrs.w	r4, r6, r3
 8001e68:	f102 0204 	add.w	r2, r2, #4
 8001e6c:	f000 80a6 	beq.w	8001fbc <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8001e70:	2401      	movs	r4, #1
 8001e72:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001e74:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e78:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001e7c:	d1f1      	bne.n	8001e62 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001e7e:	684e      	ldr	r6, [r1, #4]
 8001e80:	2e12      	cmp	r6, #18
 8001e82:	f200 809e 	bhi.w	8001fc2 <HAL_GPIO_Init+0x17e>
 8001e86:	2e12      	cmp	r6, #18
 8001e88:	d81a      	bhi.n	8001ec0 <HAL_GPIO_Init+0x7c>
 8001e8a:	e8df f006 	tbb	[pc, r6]
 8001e8e:	b9a7      	.short	0xb9a7
 8001e90:	1919ceb5 	.word	0x1919ceb5
 8001e94:	19191919 	.word	0x19191919
 8001e98:	19191919 	.word	0x19191919
 8001e9c:	b1191919 	.word	0xb1191919
 8001ea0:	bc          	.byte	0xbc
 8001ea1:	00          	.byte	0x00
 8001ea2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800204c <HAL_GPIO_Init+0x208>
 8001ea6:	4576      	cmp	r6, lr
 8001ea8:	f000 8098 	beq.w	8001fdc <HAL_GPIO_Init+0x198>
 8001eac:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001eb0:	4576      	cmp	r6, lr
 8001eb2:	f000 8093 	beq.w	8001fdc <HAL_GPIO_Init+0x198>
 8001eb6:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8001eba:	4576      	cmp	r6, lr
 8001ebc:	f000 808e 	beq.w	8001fdc <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001ec4:	bf9c      	itt	ls
 8001ec6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eca:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ece:	bf84      	itt	hi
 8001ed0:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed4:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed8:	f8de 4000 	ldr.w	r4, [lr]
 8001edc:	fa0a f90b 	lsl.w	r9, sl, fp
 8001ee0:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001ee4:	ea24 040b 	bic.w	r4, r4, fp
 8001ee8:	ea44 0409 	orr.w	r4, r4, r9
 8001eec:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef0:	684c      	ldr	r4, [r1, #4]
 8001ef2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001ef6:	d079      	beq.n	8001fec <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001efc:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f00:	f04e 0e01 	orr.w	lr, lr, #1
 8001f04:	f8c7 e018 	str.w	lr, [r7, #24]
 8001f08:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f10:	f00e 0e01 	and.w	lr, lr, #1
 8001f14:	f8cd e004 	str.w	lr, [sp, #4]
 8001f18:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001f1c:	f023 0e03 	bic.w	lr, r3, #3
 8001f20:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001f24:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001f28:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f2c:	fa06 f609 	lsl.w	r6, r6, r9
 8001f30:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f34:	f8df b118 	ldr.w	fp, [pc, #280]	; 8002050 <HAL_GPIO_Init+0x20c>
 8001f38:	4558      	cmp	r0, fp
 8001f3a:	d013      	beq.n	8001f64 <HAL_GPIO_Init+0x120>
 8001f3c:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8001f40:	4558      	cmp	r0, fp
 8001f42:	d06b      	beq.n	800201c <HAL_GPIO_Init+0x1d8>
 8001f44:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002054 <HAL_GPIO_Init+0x210>
 8001f48:	4558      	cmp	r0, fp
 8001f4a:	d060      	beq.n	800200e <HAL_GPIO_Init+0x1ca>
 8001f4c:	f8df b108 	ldr.w	fp, [pc, #264]	; 8002058 <HAL_GPIO_Init+0x214>
 8001f50:	4558      	cmp	r0, fp
 8001f52:	bf0c      	ite	eq
 8001f54:	f04f 0b03 	moveq.w	fp, #3
 8001f58:	f04f 0b04 	movne.w	fp, #4
 8001f5c:	fa0b f909 	lsl.w	r9, fp, r9
 8001f60:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001f64:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f68:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	bf14      	ite	ne
 8001f70:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f74:	ea26 060c 	biceq.w	r6, r6, ip
 8001f78:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7a:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f80:	bf14      	ite	ne
 8001f82:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f86:	ea26 060c 	biceq.w	r6, r6, ip
 8001f8a:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001f8c:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001f92:	bf14      	ite	ne
 8001f94:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f98:	ea26 060c 	biceq.w	r6, r6, ip
 8001f9c:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa2:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa6:	ea44 040c 	orr.w	r4, r4, ip
 8001faa:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fac:	680e      	ldr	r6, [r1, #0]
	position++;
 8001fae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb0:	fa36 f403 	lsrs.w	r4, r6, r3
 8001fb4:	f102 0204 	add.w	r2, r2, #4
 8001fb8:	f47f af5a 	bne.w	8001e70 <HAL_GPIO_Init+0x2c>
  }
}
 8001fbc:	b003      	add	sp, #12
 8001fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001fc2:	4546      	cmp	r6, r8
 8001fc4:	d00a      	beq.n	8001fdc <HAL_GPIO_Init+0x198>
 8001fc6:	f67f af6c 	bls.w	8001ea2 <HAL_GPIO_Init+0x5e>
 8001fca:	f8df e090 	ldr.w	lr, [pc, #144]	; 800205c <HAL_GPIO_Init+0x218>
 8001fce:	4576      	cmp	r6, lr
 8001fd0:	d004      	beq.n	8001fdc <HAL_GPIO_Init+0x198>
 8001fd2:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001fd6:	4576      	cmp	r6, lr
 8001fd8:	f47f af72 	bne.w	8001ec0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fdc:	688e      	ldr	r6, [r1, #8]
 8001fde:	bb3e      	cbnz	r6, 8002030 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe0:	f04f 0a04 	mov.w	sl, #4
 8001fe4:	e76c      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe6:	ea24 040c 	bic.w	r4, r4, ip
 8001fea:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fec:	680e      	ldr	r6, [r1, #0]
 8001fee:	e738      	b.n	8001e62 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff0:	68cc      	ldr	r4, [r1, #12]
 8001ff2:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001ff6:	e763      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ff8:	68cc      	ldr	r4, [r1, #12]
 8001ffa:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001ffe:	e75f      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002000:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002004:	e75c      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002006:	68cc      	ldr	r4, [r1, #12]
 8002008:	f104 0a0c 	add.w	sl, r4, #12
          break;
 800200c:	e758      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800200e:	f04f 0b02 	mov.w	fp, #2
 8002012:	fa0b f909 	lsl.w	r9, fp, r9
 8002016:	ea46 0609 	orr.w	r6, r6, r9
 800201a:	e7a3      	b.n	8001f64 <HAL_GPIO_Init+0x120>
 800201c:	f04f 0b01 	mov.w	fp, #1
 8002020:	fa0b f909 	lsl.w	r9, fp, r9
 8002024:	ea46 0609 	orr.w	r6, r6, r9
 8002028:	e79c      	b.n	8001f64 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 800202a:	f04f 0a00 	mov.w	sl, #0
 800202e:	e747      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002030:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002032:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002036:	bf0c      	ite	eq
 8002038:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 800203a:	6144      	strne	r4, [r0, #20]
 800203c:	e740      	b.n	8001ec0 <HAL_GPIO_Init+0x7c>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40010400 	.word	0x40010400
 8002048:	10220000 	.word	0x10220000
 800204c:	10120000 	.word	0x10120000
 8002050:	40010800 	.word	0x40010800
 8002054:	40011000 	.word	0x40011000
 8002058:	40011400 	.word	0x40011400
 800205c:	10310000 	.word	0x10310000

08002060 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	4605      	mov	r5, r0
 8002064:	460e      	mov	r6, r1
 8002066:	4617      	mov	r7, r2
 8002068:	6804      	ldr	r4, [r0, #0]
 800206a:	1c72      	adds	r2, r6, #1
 800206c:	d003      	beq.n	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 800206e:	e009      	b.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002070:	6963      	ldr	r3, [r4, #20]
 8002072:	055b      	lsls	r3, r3, #21
 8002074:	d428      	bmi.n	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x68>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002076:	6963      	ldr	r3, [r4, #20]
 8002078:	43db      	mvns	r3, r3
 800207a:	f013 0302 	ands.w	r3, r3, #2
 800207e:	d1f7      	bne.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002080:	4618      	mov	r0, r3
}
 8002082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002084:	6963      	ldr	r3, [r4, #20]
 8002086:	43db      	mvns	r3, r3
 8002088:	f013 0302 	ands.w	r3, r3, #2
 800208c:	d0f8      	beq.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800208e:	6963      	ldr	r3, [r4, #20]
 8002090:	0558      	lsls	r0, r3, #21
 8002092:	d419      	bmi.n	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7ff fe48 	bl	8001d28 <HAL_GetTick>
 8002098:	1bc0      	subs	r0, r0, r7
 800209a:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800209c:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	d301      	bcc.n	80020a4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
 80020a0:	2e00      	cmp	r6, #0
 80020a2:	d1e2      	bne.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020a4:	6963      	ldr	r3, [r4, #20]
 80020a6:	0799      	lsls	r1, r3, #30
 80020a8:	d4df      	bmi.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xa>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020aa:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 80020ac:	2320      	movs	r3, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ae:	632a      	str	r2, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80020ba:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80020c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c8:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ca:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ce:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 80020d2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020da:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020dc:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020de:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80020e8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	642b      	str	r3, [r5, #64]	; 0x40
}
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	4605      	mov	r5, r0
 80020f8:	460e      	mov	r6, r1
 80020fa:	4617      	mov	r7, r2
 80020fc:	6804      	ldr	r4, [r0, #0]
 80020fe:	1c72      	adds	r2, r6, #1
 8002100:	d003      	beq.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8002102:	e009      	b.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002104:	6963      	ldr	r3, [r4, #20]
 8002106:	055b      	lsls	r3, r3, #21
 8002108:	d428      	bmi.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x68>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210a:	6963      	ldr	r3, [r4, #20]
 800210c:	43db      	mvns	r3, r3
 800210e:	f013 0308 	ands.w	r3, r3, #8
 8002112:	d1f7      	bne.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 8002114:	4618      	mov	r0, r3
}
 8002116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002118:	6963      	ldr	r3, [r4, #20]
 800211a:	43db      	mvns	r3, r3
 800211c:	f013 0308 	ands.w	r3, r3, #8
 8002120:	d0f8      	beq.n	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002122:	6963      	ldr	r3, [r4, #20]
 8002124:	0558      	lsls	r0, r3, #21
 8002126:	d419      	bmi.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002128:	f7ff fdfe 	bl	8001d28 <HAL_GetTick>
 800212c:	1bc0      	subs	r0, r0, r7
 800212e:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002130:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	d301      	bcc.n	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x44>
 8002134:	2e00      	cmp	r6, #0
 8002136:	d1e2      	bne.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002138:	6963      	ldr	r3, [r4, #20]
 800213a:	0719      	lsls	r1, r3, #28
 800213c:	d4df      	bmi.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0xa>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800213e:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002140:	2320      	movs	r3, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	632a      	str	r2, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002144:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002148:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800214e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002152:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8002156:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	642b      	str	r3, [r5, #64]	; 0x40
}
 800215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800215c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215e:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002162:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8002166:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216c:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216e:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002170:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002172:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002176:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800217a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800217c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002188 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002188:	2800      	cmp	r0, #0
 800218a:	f000 80b7 	beq.w	80022fc <HAL_I2C_Init+0x174>
{
 800218e:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002190:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002194:	4604      	mov	r4, r0
 8002196:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8096 	beq.w	80022cc <HAL_I2C_Init+0x144>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a0:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80021a2:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021be:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c0:	f001 fd42 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c4:	6865      	ldr	r5, [r4, #4]
 80021c6:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <HAL_I2C_Init+0x178>)
 80021c8:	429d      	cmp	r5, r3
 80021ca:	d84d      	bhi.n	8002268 <HAL_I2C_Init+0xe0>
 80021cc:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <HAL_I2C_Init+0x17c>)
 80021ce:	4298      	cmp	r0, r3
 80021d0:	d97a      	bls.n	80022c8 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d2:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80021d4:	4d4c      	ldr	r5, [pc, #304]	; (8002308 <HAL_I2C_Init+0x180>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d6:	f640 7cfc 	movw	ip, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021de:	1e43      	subs	r3, r0, #1
 80021e0:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80021e6:	0ca8      	lsrs	r0, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e8:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ea:	3001      	adds	r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ec:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80021f0:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80021f4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f6:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f8:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80021fe:	4301      	orrs	r1, r0
 8002200:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002202:	69d1      	ldr	r1, [r2, #28]
 8002204:	ea13 0f0c 	tst.w	r3, ip
 8002208:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800220c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002210:	d161      	bne.n	80022d6 <HAL_I2C_Init+0x14e>
 8002212:	2304      	movs	r3, #4
 8002214:	430b      	orrs	r3, r1
 8002216:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002218:	6811      	ldr	r1, [r2, #0]
 800221a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800221e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002222:	4303      	orrs	r3, r0
 8002224:	430b      	orrs	r3, r1
 8002226:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002228:	6891      	ldr	r1, [r2, #8]
 800222a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800222e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002232:	4303      	orrs	r3, r0
 8002234:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002238:	430b      	orrs	r3, r1
 800223a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800223c:	68d0      	ldr	r0, [r2, #12]
 800223e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002242:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002246:	430b      	orrs	r3, r1
 8002248:	4303      	orrs	r3, r0
 800224a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800224c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224e:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002256:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800225a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002264:	4608      	mov	r0, r1
}
 8002266:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_I2C_Init+0x184>)
 800226a:	4298      	cmp	r0, r3
 800226c:	d92c      	bls.n	80022c8 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_I2C_Init+0x180>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002274:	4926      	ldr	r1, [pc, #152]	; (8002310 <HAL_I2C_Init+0x188>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002276:	fba3 3c00 	umull	r3, ip, r3, r0
 800227a:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800227e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002282:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002284:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002288:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800228a:	099b      	lsrs	r3, r3, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800228c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002290:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8002294:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002296:	6a11      	ldr	r1, [r2, #32]
 8002298:	3301      	adds	r3, #1
 800229a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800229e:	430b      	orrs	r3, r1
 80022a0:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a2:	69d1      	ldr	r1, [r2, #28]
 80022a4:	68a3      	ldr	r3, [r4, #8]
 80022a6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80022aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022ae:	b9ab      	cbnz	r3, 80022dc <HAL_I2C_Init+0x154>
 80022b0:	1e43      	subs	r3, r0, #1
 80022b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022b6:	fbb3 f3f5 	udiv	r3, r3, r5
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	b1d3      	cbz	r3, 80022f8 <HAL_I2C_Init+0x170>
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c6:	e7a5      	b.n	8002214 <HAL_I2C_Init+0x8c>
    return HAL_ERROR;
 80022c8:	2001      	movs	r0, #1
}
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80022cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80022d0:	f7ff fb96 	bl	8001a00 <HAL_I2C_MspInit>
 80022d4:	e764      	b.n	80021a0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022da:	e79b      	b.n	8002214 <HAL_I2C_Init+0x8c>
 80022dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80022e0:	1e43      	subs	r3, r0, #1
 80022e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80022e6:	fbb3 f3f5 	udiv	r3, r3, r5
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	b113      	cbz	r3, 80022f8 <HAL_I2C_Init+0x170>
 80022f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f6:	e78d      	b.n	8002214 <HAL_I2C_Init+0x8c>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e78b      	b.n	8002214 <HAL_I2C_Init+0x8c>
    return HAL_ERROR;
 80022fc:	2001      	movs	r0, #1
}
 80022fe:	4770      	bx	lr
 8002300:	000186a0 	.word	0x000186a0
 8002304:	001e847f 	.word	0x001e847f
 8002308:	431bde83 	.word	0x431bde83
 800230c:	003d08ff 	.word	0x003d08ff
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <HAL_I2C_Master_Transmit>:
{
 8002314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002318:	4604      	mov	r4, r0
 800231a:	b082      	sub	sp, #8
 800231c:	4699      	mov	r9, r3
 800231e:	4688      	mov	r8, r1
 8002320:	4692      	mov	sl, r2
 8002322:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fd00 	bl	8001d28 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002328:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800232c:	2b20      	cmp	r3, #32
 800232e:	d004      	beq.n	800233a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8002330:	2502      	movs	r5, #2
}
 8002332:	4628      	mov	r0, r5
 8002334:	b002      	add	sp, #8
 8002336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233a:	4606      	mov	r6, r0
 800233c:	6825      	ldr	r5, [r4, #0]
 800233e:	69ab      	ldr	r3, [r5, #24]
 8002340:	0799      	lsls	r1, r3, #30
 8002342:	d51a      	bpl.n	800237a <HAL_I2C_Master_Transmit+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002344:	f7ff fcf0 	bl	8001d28 <HAL_GetTick>
 8002348:	1b80      	subs	r0, r0, r6
 800234a:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800234c:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	d9f6      	bls.n	800233e <HAL_I2C_Master_Transmit+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002350:	69ab      	ldr	r3, [r5, #24]
 8002352:	43db      	mvns	r3, r3
 8002354:	f013 0302 	ands.w	r3, r3, #2
 8002358:	d1f1      	bne.n	800233e <HAL_I2C_Master_Transmit+0x2a>
      return HAL_BUSY;
 800235a:	2502      	movs	r5, #2
          hi2c->State             = HAL_I2C_STATE_READY;
 800235c:	2220      	movs	r2, #32
}
 800235e:	4628      	mov	r0, r5
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002360:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002362:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002366:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          __HAL_UNLOCK(hi2c);
 800236a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800236e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002370:	4313      	orrs	r3, r2
 8002372:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002374:	b002      	add	sp, #8
 8002376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800237a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d0d6      	beq.n	8002330 <HAL_I2C_Master_Transmit+0x1c>
 8002382:	2301      	movs	r3, #1
 8002384:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	07da      	lsls	r2, r3, #31
 800238c:	f140 8085 	bpl.w	800249a <HAL_I2C_Master_Transmit+0x186>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002390:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002392:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002394:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800239c:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80023a8:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ae:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80023b2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80023b4:	8523      	strh	r3, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80023b8:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d006      	beq.n	80023ce <HAL_I2C_Master_Transmit+0xba>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d004      	beq.n	80023ce <HAL_I2C_Master_Transmit+0xba>
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d002      	beq.n	80023ce <HAL_I2C_Master_Transmit+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d103      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0xc2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	602b      	str	r3, [r5, #0]
 80023d6:	1c79      	adds	r1, r7, #1
 80023d8:	d13e      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023da:	696b      	ldr	r3, [r5, #20]
 80023dc:	07da      	lsls	r2, r3, #31
 80023de:	d5fc      	bpl.n	80023da <HAL_I2C_Master_Transmit+0xc6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e6:	d15d      	bne.n	80024a4 <HAL_I2C_Master_Transmit+0x190>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023e8:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 80023ec:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ee:	4632      	mov	r2, r6
 80023f0:	4639      	mov	r1, r7
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff fe34 	bl	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80023f8:	4605      	mov	r5, r0
 80023fa:	bb40      	cbnz	r0, 800244e <HAL_I2C_Master_Transmit+0x13a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	9001      	str	r0, [sp, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	9201      	str	r2, [sp, #4]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	9201      	str	r2, [sp, #4]
 8002408:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800240a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800240c:	2a00      	cmp	r2, #0
 800240e:	f000 808f 	beq.w	8002530 <HAL_I2C_Master_Transmit+0x21c>
 8002412:	1c79      	adds	r1, r7, #1
 8002414:	f040 8099 	bne.w	800254a <HAL_I2C_Master_Transmit+0x236>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	0612      	lsls	r2, r2, #24
 800241c:	d458      	bmi.n	80024d0 <HAL_I2C_Master_Transmit+0x1bc>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	0550      	lsls	r0, r2, #21
 8002422:	d5f9      	bpl.n	8002418 <HAL_I2C_Master_Transmit+0x104>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002424:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002426:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800242a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242c:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002434:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002438:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800243a:	f042 0204 	orr.w	r2, r2, #4
 800243e:	6422      	str	r2, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002444:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002448:	2a04      	cmp	r2, #4
 800244a:	f000 80b1 	beq.w	80025b0 <HAL_I2C_Master_Transmit+0x29c>
      return HAL_ERROR;
 800244e:	2501      	movs	r5, #1
}
 8002450:	4628      	mov	r0, r5
 8002452:	b002      	add	sp, #8
 8002454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	696b      	ldr	r3, [r5, #20]
 800245a:	07db      	lsls	r3, r3, #31
 800245c:	d4c0      	bmi.n	80023e0 <HAL_I2C_Master_Transmit+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7ff fc63 	bl	8001d28 <HAL_GetTick>
 8002462:	1b80      	subs	r0, r0, r6
 8002464:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002466:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002468:	d22f      	bcs.n	80024ca <HAL_I2C_Master_Transmit+0x1b6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800246a:	696b      	ldr	r3, [r5, #20]
 800246c:	07db      	lsls	r3, r3, #31
 800246e:	d4b2      	bmi.n	80023d6 <HAL_I2C_Master_Transmit+0xc2>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002470:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002472:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002474:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800247a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800247e:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002480:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800248a:	682b      	ldr	r3, [r5, #0]
 800248c:	05d8      	lsls	r0, r3, #23
 800248e:	d5de      	bpl.n	800244e <HAL_I2C_Master_Transmit+0x13a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002490:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8002494:	2501      	movs	r5, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002496:	6423      	str	r3, [r4, #64]	; 0x40
 8002498:	e74b      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1e>
      __HAL_I2C_ENABLE(hi2c);
 800249a:	682b      	ldr	r3, [r5, #0]
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	602b      	str	r3, [r5, #0]
 80024a2:	e775      	b.n	8002390 <HAL_I2C_Master_Transmit+0x7c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024a4:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80024a8:	f003 0306 	and.w	r3, r3, #6
 80024ac:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024b0:	4632      	mov	r2, r6
 80024b2:	4639      	mov	r1, r7
 80024b4:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024b6:	612b      	str	r3, [r5, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024b8:	f7ff fe1c 	bl	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d1c6      	bne.n	800244e <HAL_I2C_Master_Transmit+0x13a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	fa5f f388 	uxtb.w	r3, r8
 80024c6:	6113      	str	r3, [r2, #16]
 80024c8:	e791      	b.n	80023ee <HAL_I2C_Master_Transmit+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	2f00      	cmp	r7, #0
 80024cc:	d183      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0xc2>
 80024ce:	e7cc      	b.n	800246a <HAL_I2C_Master_Transmit+0x156>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80024d2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d6:	4602      	mov	r2, r0
 80024d8:	f812 eb01 	ldrb.w	lr, [r2], #1
      hi2c->XferSize--;
 80024dc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e0:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 80024e4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80024e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80024e8:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80024ea:	3a01      	subs	r2, #1
 80024ec:	b292      	uxth	r2, r2
 80024ee:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f0:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 80024f2:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f4:	0752      	lsls	r2, r2, #29
 80024f6:	d50c      	bpl.n	8002512 <HAL_I2C_Master_Transmit+0x1fe>
 80024f8:	b159      	cbz	r1, 8002512 <HAL_I2C_Master_Transmit+0x1fe>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80024fc:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002500:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002502:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8002504:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8002506:	3a01      	subs	r2, #1
 8002508:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800250a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800250e:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002510:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002512:	1c7a      	adds	r2, r7, #1
 8002514:	d138      	bne.n	8002588 <HAL_I2C_Master_Transmit+0x274>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	0750      	lsls	r0, r2, #29
 800251a:	d405      	bmi.n	8002528 <HAL_I2C_Master_Transmit+0x214>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	0551      	lsls	r1, r2, #21
 8002520:	d480      	bmi.n	8002424 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	0750      	lsls	r0, r2, #29
 8002526:	d5f9      	bpl.n	800251c <HAL_I2C_Master_Transmit+0x208>
    while (hi2c->XferSize > 0U)
 8002528:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800252a:	2a00      	cmp	r2, #0
 800252c:	f47f af71 	bne.w	8002412 <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002540:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8002548:	e6f3      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	0611      	lsls	r1, r2, #24
 800254e:	d4bf      	bmi.n	80024d0 <HAL_I2C_Master_Transmit+0x1bc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	0550      	lsls	r0, r2, #21
 8002554:	f53f af66 	bmi.w	8002424 <HAL_I2C_Master_Transmit+0x110>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002558:	f7ff fbe6 	bl	8001d28 <HAL_GetTick>
 800255c:	1b80      	subs	r0, r0, r6
 800255e:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002560:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	d302      	bcc.n	800256a <HAL_I2C_Master_Transmit+0x256>
 8002564:	2f00      	cmp	r7, #0
 8002566:	f47f af54 	bne.w	8002412 <HAL_I2C_Master_Transmit+0xfe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8002570:	f47f af4f 	bne.w	8002412 <HAL_I2C_Master_Transmit+0xfe>
          hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002582:	430a      	orrs	r2, r1
 8002584:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002586:	e75b      	b.n	8002440 <HAL_I2C_Master_Transmit+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	0752      	lsls	r2, r2, #29
 800258c:	d4cc      	bmi.n	8002528 <HAL_I2C_Master_Transmit+0x214>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	0551      	lsls	r1, r2, #21
 8002592:	f53f af47 	bmi.w	8002424 <HAL_I2C_Master_Transmit+0x110>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7ff fbc7 	bl	8001d28 <HAL_GetTick>
 800259a:	1b80      	subs	r0, r0, r6
 800259c:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800259e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a0:	d301      	bcc.n	80025a6 <HAL_I2C_Master_Transmit+0x292>
 80025a2:	2f00      	cmp	r7, #0
 80025a4:	d1b5      	bne.n	8002512 <HAL_I2C_Master_Transmit+0x1fe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	f012 0204 	ands.w	r2, r2, #4
 80025ac:	d1b1      	bne.n	8002512 <HAL_I2C_Master_Transmit+0x1fe>
 80025ae:	e7e1      	b.n	8002574 <HAL_I2C_Master_Transmit+0x260>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	681a      	ldr	r2, [r3, #0]
        return HAL_ERROR;
 80025b2:	2501      	movs	r5, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e6ba      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1e>

080025bc <HAL_I2C_IsDeviceReady>:
{
 80025bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c0:	4604      	mov	r4, r0
 80025c2:	b082      	sub	sp, #8
 80025c4:	461e      	mov	r6, r3
 80025c6:	4689      	mov	r9, r1
 80025c8:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80025ca:	f7ff fbad 	bl	8001d28 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d003      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 80025d6:	2002      	movs	r0, #2
}
 80025d8:	b002      	add	sp, #8
 80025da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025de:	4605      	mov	r5, r0
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	0792      	lsls	r2, r2, #30
 80025e6:	d50e      	bpl.n	8002606 <HAL_I2C_IsDeviceReady+0x4a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7ff fb9e 	bl	8001d28 <HAL_GetTick>
 80025ec:	1b40      	subs	r0, r0, r5
 80025ee:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025f0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	d9f6      	bls.n	80025e2 <HAL_I2C_IsDeviceReady+0x26>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	43d2      	mvns	r2, r2
 80025f8:	f012 0202 	ands.w	r2, r2, #2
 80025fc:	d1f1      	bne.n	80025e2 <HAL_I2C_IsDeviceReady+0x26>
          hi2c->State             = HAL_I2C_STATE_READY;
 80025fe:	2320      	movs	r3, #32
      return HAL_BUSY;
 8002600:	2002      	movs	r0, #2
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002602:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002604:	e06a      	b.n	80026dc <HAL_I2C_IsDeviceReady+0x120>
    __HAL_LOCK(hi2c);
 8002606:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800260a:	2a01      	cmp	r2, #1
 800260c:	d0e3      	beq.n	80025d6 <HAL_I2C_IsDeviceReady+0x1a>
 800260e:	2201      	movs	r2, #1
 8002610:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	07d7      	lsls	r7, r2, #31
 8002618:	f140 80af 	bpl.w	800277a <HAL_I2C_IsDeviceReady+0x1be>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800261e:	2024      	movs	r0, #36	; 0x24
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002620:	27a0      	movs	r7, #160	; 0xa0
  uint32_t I2C_Trials = 0U;
 8002622:	4688      	mov	r8, r1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002624:	681a      	ldr	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002626:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262e:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002630:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_I2C_IsDeviceReady+0x230>)
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002632:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002636:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002638:	62e2      	str	r2, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002640:	601a      	str	r2, [r3, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002642:	1c72      	adds	r2, r6, #1
 8002644:	d169      	bne.n	800271a <HAL_I2C_IsDeviceReady+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	07d0      	lsls	r0, r2, #31
 800264a:	d5fc      	bpl.n	8002646 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264c:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8002650:	f7ff fb6a 	bl	8001d28 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002654:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002656:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002658:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800265a:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800265c:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002660:	f002 0202 	and.w	r2, r2, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002664:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800266c:	d018      	beq.n	80026a0 <HAL_I2C_IsDeviceReady+0xe4>
 800266e:	430a      	orrs	r2, r1
 8002670:	d116      	bne.n	80026a0 <HAL_I2C_IsDeviceReady+0xe4>
 8002672:	2e00      	cmp	r6, #0
 8002674:	d041      	beq.n	80026fa <HAL_I2C_IsDeviceReady+0x13e>
 8002676:	e001      	b.n	800267c <HAL_I2C_IsDeviceReady+0xc0>
 8002678:	430a      	orrs	r2, r1
 800267a:	d111      	bne.n	80026a0 <HAL_I2C_IsDeviceReady+0xe4>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7ff fb54 	bl	8001d28 <HAL_GetTick>
 8002680:	1b40      	subs	r0, r0, r5
 8002682:	4286      	cmp	r6, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002684:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002686:	bf38      	it	cc
 8002688:	f884 703d 	strbcc.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800268c:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800268e:	695a      	ldr	r2, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002690:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002694:	f001 0102 	and.w	r1, r1, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002698:	28a0      	cmp	r0, #160	; 0xa0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800269a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800269e:	d1eb      	bne.n	8002678 <HAL_I2C_IsDeviceReady+0xbc>
      hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	2220      	movs	r2, #32
 80026a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	0792      	lsls	r2, r2, #30
 80026aa:	d46b      	bmi.n	8002784 <HAL_I2C_IsDeviceReady+0x1c8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ac:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b8:	6159      	str	r1, [r3, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	0792      	lsls	r2, r2, #30
 80026be:	d54f      	bpl.n	8002760 <HAL_I2C_IsDeviceReady+0x1a4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c0:	f7ff fb32 	bl	8001d28 <HAL_GetTick>
 80026c4:	1b40      	subs	r0, r0, r5
 80026c6:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026c8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	d9f6      	bls.n	80026ba <HAL_I2C_IsDeviceReady+0xfe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	43d2      	mvns	r2, r2
 80026d0:	f012 0202 	ands.w	r2, r2, #2
 80026d4:	d1f1      	bne.n	80026ba <HAL_I2C_IsDeviceReady+0xfe>
          hi2c->State             = HAL_I2C_STATE_READY;
 80026d6:	2320      	movs	r3, #32
          return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026da:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80026e6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ea:	f043 0320 	orr.w	r3, r3, #32
 80026ee:	6423      	str	r3, [r4, #64]	; 0x40
}
 80026f0:	b002      	add	sp, #8
 80026f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026f6:	430a      	orrs	r2, r1
 80026f8:	d1d2      	bne.n	80026a0 <HAL_I2C_IsDeviceReady+0xe4>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7ff fb15 	bl	8001d28 <HAL_GetTick>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026fe:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002700:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002704:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002706:	6959      	ldr	r1, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002708:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800270c:	f002 0202 	and.w	r2, r2, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002710:	28a0      	cmp	r0, #160	; 0xa0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002716:	d1ee      	bne.n	80026f6 <HAL_I2C_IsDeviceReady+0x13a>
 8002718:	e7c2      	b.n	80026a0 <HAL_I2C_IsDeviceReady+0xe4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	07d1      	lsls	r1, r2, #31
 800271e:	d495      	bmi.n	800264c <HAL_I2C_IsDeviceReady+0x90>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7ff fb02 	bl	8001d28 <HAL_GetTick>
 8002724:	1b40      	subs	r0, r0, r5
 8002726:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002728:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	d301      	bcc.n	8002730 <HAL_I2C_IsDeviceReady+0x174>
 800272c:	2e00      	cmp	r6, #0
 800272e:	d188      	bne.n	8002642 <HAL_I2C_IsDeviceReady+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	07d0      	lsls	r0, r2, #31
 8002734:	d485      	bmi.n	8002642 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002736:	2100      	movs	r1, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002738:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 800273a:	6321      	str	r1, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800273c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002740:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002746:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	f042 0220 	orr.w	r2, r2, #32
 800274e:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	05d9      	lsls	r1, r3, #23
 8002754:	d53a      	bpl.n	80027cc <HAL_I2C_IsDeviceReady+0x210>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002756:	f44f 7300 	mov.w	r3, #512	; 0x200
        return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800275c:	6423      	str	r3, [r4, #64]	; 0x40
 800275e:	e73b      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x1c>
      I2C_Trials++;
 8002760:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 8002764:	45d0      	cmp	r8, sl
 8002766:	f4ff af68 	bcc.w	800263a <HAL_I2C_IsDeviceReady+0x7e>
    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800276c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800276e:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002774:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8002778:	e72e      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x1c>
      __HAL_I2C_ENABLE(hi2c);
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e74b      	b.n	800261c <HAL_I2C_IsDeviceReady+0x60>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	9101      	str	r1, [sp, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	9201      	str	r2, [sp, #4]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	9a01      	ldr	r2, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	0798      	lsls	r0, r3, #30
 800279e:	d50d      	bpl.n	80027bc <HAL_I2C_IsDeviceReady+0x200>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a0:	f7ff fac2 	bl	8001d28 <HAL_GetTick>
 80027a4:	1b40      	subs	r0, r0, r5
 80027a6:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027a8:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	d904      	bls.n	80027b6 <HAL_I2C_IsDeviceReady+0x1fa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027ac:	6993      	ldr	r3, [r2, #24]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	f013 0302 	ands.w	r3, r3, #2
 80027b4:	d00c      	beq.n	80027d0 <HAL_I2C_IsDeviceReady+0x214>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b6:	6993      	ldr	r3, [r2, #24]
 80027b8:	0799      	lsls	r1, r3, #30
 80027ba:	d4f1      	bmi.n	80027a0 <HAL_I2C_IsDeviceReady+0x1e4>
        __HAL_UNLOCK(hi2c);
 80027bc:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80027be:	2220      	movs	r2, #32
        return HAL_OK;
 80027c0:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80027c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 80027ca:	e705      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x1c>
        return HAL_TIMEOUT;
 80027cc:	2003      	movs	r0, #3
 80027ce:	e703      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x1c>
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d0:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027d2:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          __HAL_UNLOCK(hi2c);
 80027dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80027e2:	2001      	movs	r0, #1
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	4313      	orrs	r3, r2
 80027e6:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80027e8:	e6f6      	b.n	80025d8 <HAL_I2C_IsDeviceReady+0x1c>
 80027ea:	bf00      	nop
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d073      	beq.n	80028e0 <HAL_PCD_Init+0xf0>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80027fc:	4605      	mov	r5, r0
 80027fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002802:	2b00      	cmp	r3, #0
 8002804:	d067      	beq.n	80028d6 <HAL_PCD_Init+0xe6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002806:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002808:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 800280a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800280e:	6828      	ldr	r0, [r5, #0]
 8002810:	f001 ff42 	bl	8004698 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002814:	f856 eb10 	ldr.w	lr, [r6], #16
 8002818:	466c      	mov	r4, sp
 800281a:	46b4      	mov	ip, r6
 800281c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002822:	f8dc 3000 	ldr.w	r3, [ip]
 8002826:	1d2f      	adds	r7, r5, #4
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	4670      	mov	r0, lr
 800282c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002830:	f001 ff20 	bl	8004674 <USB_CoreInit>
 8002834:	4604      	mov	r4, r0
 8002836:	b130      	cbz	r0, 8002846 <HAL_PCD_Init+0x56>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8002838:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283a:	2302      	movs	r3, #2
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800283c:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
}
 8002842:	b007      	add	sp, #28
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002846:	4601      	mov	r1, r0
 8002848:	6828      	ldr	r0, [r5, #0]
 800284a:	f001 ff2f 	bl	80046ac <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	6868      	ldr	r0, [r5, #4]
 8002850:	b348      	cbz	r0, 80028a6 <HAL_PCD_Init+0xb6>
 8002852:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002854:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002858:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800285a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800285e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002862:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8002866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286a:	fa5f f28c 	uxtb.w	r2, ip
 800286e:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002870:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8002874:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002878:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800287c:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	d3ec      	bcc.n	800285a <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 8002880:	2200      	movs	r2, #0
 8002882:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002886:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288a:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 800288c:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002890:	b2cc      	uxtb	r4, r1
 8002892:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002894:	e9c3 225e 	strd	r2, r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8002898:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800289c:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a4:	d3ed      	bcc.n	8002882 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028a8:	466c      	mov	r4, sp
 80028aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ac:	6833      	ldr	r3, [r6, #0]
 80028ae:	6828      	ldr	r0, [r5, #0]
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80028b6:	f001 fefb 	bl	80046b0 <USB_DevInit>
 80028ba:	4604      	mov	r4, r0
 80028bc:	2800      	cmp	r0, #0
 80028be:	d1bb      	bne.n	8002838 <HAL_PCD_Init+0x48>
  hpcd->State = HAL_PCD_STATE_READY;
 80028c0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80028c2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 80028c6:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80028c8:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028cc:	f002 fd08 	bl	80052e0 <USB_DevDisconnect>
}
 80028d0:	4620      	mov	r0, r4
 80028d2:	b007      	add	sp, #28
 80028d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80028d6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80028da:	f003 fc51 	bl	8006180 <HAL_PCD_MspInit>
 80028de:	e792      	b.n	8002806 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80028e0:	2401      	movs	r4, #1
}
 80028e2:	4620      	mov	r0, r4
 80028e4:	b007      	add	sp, #28
 80028e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80028ea:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d012      	beq.n	8002918 <HAL_PCD_Start+0x30>
 80028f2:	4604      	mov	r4, r0
 80028f4:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 80028f6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80028f8:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028fc:	f001 fec2 	bl	8004684 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002900:	4629      	mov	r1, r5
 8002902:	4620      	mov	r0, r4
 8002904:	f003 fd78 	bl	80063f8 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002908:	6820      	ldr	r0, [r4, #0]
 800290a:	f002 fce7 	bl	80052dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800290e:	2300      	movs	r3, #0
 8002910:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8002914:	4618      	mov	r0, r3
}
 8002916:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002918:	2002      	movs	r0, #2
}
 800291a:	bd38      	pop	{r3, r4, r5, pc}

0800291c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800291c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002922:	6800      	ldr	r0, [r0, #0]
 8002924:	f002 fcde 	bl	80052e4 <USB_ReadInterrupts>
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002928:	f410 4400 	ands.w	r4, r0, #32768	; 0x8000
 800292c:	d127      	bne.n	800297e <HAL_PCD_IRQHandler+0x62>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800292e:	0542      	lsls	r2, r0, #21
 8002930:	f100 81b8 	bmi.w	8002ca4 <HAL_PCD_IRQHandler+0x388>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002934:	0443      	lsls	r3, r0, #17
 8002936:	d417      	bmi.n	8002968 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002938:	0487      	lsls	r7, r0, #18
 800293a:	f100 8230 	bmi.w	8002d9e <HAL_PCD_IRQHandler+0x482>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800293e:	04c6      	lsls	r6, r0, #19
 8002940:	f100 82eb 	bmi.w	8002f1a <HAL_PCD_IRQHandler+0x5fe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002944:	0504      	lsls	r4, r0, #20
 8002946:	f100 8082 	bmi.w	8002a4e <HAL_PCD_IRQHandler+0x132>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800294a:	0582      	lsls	r2, r0, #22
 800294c:	f100 838f 	bmi.w	800306e <HAL_PCD_IRQHandler+0x752>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002950:	05c3      	lsls	r3, r0, #23
 8002952:	d512      	bpl.n	800297a <HAL_PCD_IRQHandler+0x5e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002954:	682a      	ldr	r2, [r5, #0]
 8002956:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800295a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 8002966:	e008      	b.n	800297a <HAL_PCD_IRQHandler+0x5e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002968:	682a      	ldr	r2, [r5, #0]
 800296a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800296e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800297a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800297e:	6828      	ldr	r0, [r5, #0]
 8002980:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002984:	041f      	lsls	r7, r3, #16
 8002986:	d5f8      	bpl.n	800297a <HAL_PCD_IRQHandler+0x5e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002988:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8002c98 <HAL_PCD_IRQHandler+0x37c>
 800298c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8002c9c <HAL_PCD_IRQHandler+0x380>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002990:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8002ca0 <HAL_PCD_IRQHandler+0x384>
 8002994:	e010      	b.n	80029b8 <HAL_PCD_IRQHandler+0x9c>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002996:	f011 0110 	ands.w	r1, r1, #16
 800299a:	f000 80f7 	beq.w	8002b8c <HAL_PCD_IRQHandler+0x270>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800299e:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029a0:	f411 6400 	ands.w	r4, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029a4:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029a6:	f040 8121 	bne.w	8002bec <HAL_PCD_IRQHandler+0x2d0>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029aa:	041e      	lsls	r6, r3, #16
 80029ac:	f100 8198 	bmi.w	8002ce0 <HAL_PCD_IRQHandler+0x3c4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029b0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80029b4:	0419      	lsls	r1, r3, #16
 80029b6:	d5e0      	bpl.n	800297a <HAL_PCD_IRQHandler+0x5e>
    wIstr = hpcd->Instance->ISTR;
 80029b8:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80029bc:	b2a1      	uxth	r1, r4
    if (epindex == 0U)
 80029be:	f014 040f 	ands.w	r4, r4, #15
 80029c2:	d0e8      	beq.n	8002996 <HAL_PCD_IRQHandler+0x7a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029c4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80029c8:	ea4f 0884 	mov.w	r8, r4, lsl #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029cc:	041e      	lsls	r6, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029ce:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029d0:	f100 8097 	bmi.w	8002b02 <HAL_PCD_IRQHandler+0x1e6>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029d4:	063a      	lsls	r2, r7, #24
 80029d6:	d5eb      	bpl.n	80029b0 <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029d8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80029dc:	eb08 0604 	add.w	r6, r8, r4
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	ea03 0309 	and.w	r3, r3, r9
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ea:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80029ee:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 80029f2:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f000 81dc 	beq.w	8002db4 <HAL_PCD_IRQHandler+0x498>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a00:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a0a:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a12:	f040 81f6 	bne.w	8002e02 <HAL_PCD_IRQHandler+0x4e6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a16:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
            if (ep->xfer_len > TxPctSize)
 8002a1a:	6c37      	ldr	r7, [r6, #64]	; 0x40
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	429f      	cmp	r7, r3
 8002a22:	f240 80dd 	bls.w	8002be0 <HAL_PCD_IRQHandler+0x2c4>
              ep->xfer_len -= TxPctSize;
 8002a26:	1aff      	subs	r7, r7, r3
 8002a28:	6437      	str	r7, [r6, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8002a2a:	2f00      	cmp	r7, #0
 8002a2c:	f000 80d9 	beq.w	8002be2 <HAL_PCD_IRQHandler+0x2c6>
              ep->xfer_buff += TxPctSize;
 8002a30:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002a32:	3401      	adds	r4, #1
              ep->xfer_buff += TxPctSize;
 8002a34:	441a      	add	r2, r3
 8002a36:	63f2      	str	r2, [r6, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8002a38:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002a3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              ep->xfer_count += TxPctSize;
 8002a3e:	441a      	add	r2, r3
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
              ep->xfer_count += TxPctSize;
 8002a44:	6472      	str	r2, [r6, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a46:	f002 f8f5 	bl	8004c34 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a4a:	6828      	ldr	r0, [r5, #0]
 8002a4c:	e7b0      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	f8b3 9000 	ldrh.w	r9, [r3]
 8002a54:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002a58:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8002a5c:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8002a60:	8a1f      	ldrh	r7, [r3, #16]
 8002a62:	8a9e      	ldrh	r6, [r3, #20]
 8002a64:	8b1c      	ldrh	r4, [r3, #24]
 8002a66:	8b99      	ldrh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a68:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a6c:	fa1f f989 	uxth.w	r9, r9
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a70:	b292      	uxth	r2, r2
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a7a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a7e:	fa1f f888 	uxth.w	r8, r8
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	0412      	lsls	r2, r2, #16
 8002a88:	0c12      	lsrs	r2, r2, #16
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a8a:	fa1f fe8e 	uxth.w	lr, lr
 8002a8e:	fa1f fc8c 	uxth.w	ip, ip
 8002a92:	b2bf      	uxth	r7, r7
 8002a94:	b2b6      	uxth	r6, r6
 8002a96:	b2a4      	uxth	r4, r4
 8002a98:	b289      	uxth	r1, r1
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a9e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002aa2:	0550      	lsls	r0, r2, #21
 8002aa4:	d5fb      	bpl.n	8002a9e <HAL_PCD_IRQHandler+0x182>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002aa6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8002aaa:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab0:	0412      	lsls	r2, r2, #16
 8002ab2:	0c12      	lsrs	r2, r2, #16
 8002ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ab8:	f8a3 9000 	strh.w	r9, [r3]
 8002abc:	f8a3 8004 	strh.w	r8, [r3, #4]
 8002ac0:	f8a3 e008 	strh.w	lr, [r3, #8]
 8002ac4:	f8a3 c00c 	strh.w	ip, [r3, #12]
 8002ac8:	821f      	strh	r7, [r3, #16]
 8002aca:	829e      	strh	r6, [r3, #20]
 8002acc:	831c      	strh	r4, [r3, #24]
 8002ace:	8399      	strh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ad0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ad4:	b292      	uxth	r2, r2
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ade:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae6:	0412      	lsls	r2, r2, #16
 8002ae8:	0c12      	lsrs	r2, r2, #16
 8002aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002aee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002af2:	b292      	uxth	r2, r2
 8002af4:	f042 0204 	orr.w	r2, r2, #4
 8002af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002afc:	f003 fb92 	bl	8006224 <HAL_PCD_SuspendCallback>
    return;
 8002b00:	e73b      	b.n	800297a <HAL_PCD_IRQHandler+0x5e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b06:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b0a:	eb08 0104 	add.w	r1, r8, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b0e:	4013      	ands	r3, r2
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b18:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002b1c:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 8085 	bne.w	8002c30 <HAL_PCD_IRQHandler+0x314>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b2a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3306      	adds	r3, #6
 8002b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b3a:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8002b3e:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8002b42:	2e00      	cmp	r6, #0
 8002b44:	f040 8207 	bne.w	8002f56 <HAL_PCD_IRQHandler+0x63a>
        ep->xfer_count += count;
 8002b48:	eb08 0204 	add.w	r2, r8, r4
 8002b4c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8002b50:	00d1      	lsls	r1, r2, #3
 8002b52:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002b56:	4432      	add	r2, r6
 8002b58:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002b5c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002b60:	4432      	add	r2, r6
 8002b62:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b66:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002b6a:	b122      	cbz	r2, 8002b76 <HAL_PCD_IRQHandler+0x25a>
 8002b6c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002b70:	42b3      	cmp	r3, r6
 8002b72:	f240 81b6 	bls.w	8002ee2 <HAL_PCD_IRQHandler+0x5c6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b76:	eb08 0304 	add.w	r3, r8, r4
 8002b7a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002b84:	f003 fb24 	bl	80061d0 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b88:	6828      	ldr	r0, [r5, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b8a:	e723      	b.n	80029d4 <HAL_PCD_IRQHandler+0xb8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b8c:	8803      	ldrh	r3, [r0, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	ea03 0309 	and.w	r3, r3, r9
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b9e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ba8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bac:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002bb0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002bb6:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bb8:	646b      	str	r3, [r5, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bba:	4628      	mov	r0, r5
        ep->xfer_buff += ep->xfer_count;
 8002bbc:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bbe:	f003 fb11 	bl	80061e4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bc2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002bc6:	b17b      	cbz	r3, 8002be8 <HAL_PCD_IRQHandler+0x2cc>
 8002bc8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002bca:	b96b      	cbnz	r3, 8002be8 <HAL_PCD_IRQHandler+0x2cc>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bcc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8002bd0:	6828      	ldr	r0, [r5, #0]
 8002bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002bda:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8002bde:	e6e7      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
 8002be0:	6432      	str	r2, [r6, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be2:	4628      	mov	r0, r5
 8002be4:	f003 fafe 	bl	80061e4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002be8:	6828      	ldr	r0, [r5, #0]
 8002bea:	e6e1      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002bf0:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bfa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bfe:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c02:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c0a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c0e:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8002c12:	f002 fb7d 	bl	8005310 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c1a:	682a      	ldr	r2, [r5, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c1c:	4628      	mov	r0, r5
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c1e:	8811      	ldrh	r1, [r2, #0]
 8002c20:	400b      	ands	r3, r1
 8002c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c26:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c28:	f003 faca 	bl	80061c0 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c2c:	6828      	ldr	r0, [r5, #0]
 8002c2e:	e6bf      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
          if (ep->type == EP_TYPE_BULK)
 8002c30:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	f000 81dc 	beq.w	8002ff2 <HAL_PCD_IRQHandler+0x6d6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c3a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002c3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c56:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c5a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002c5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c62:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c6c:	f000 8141 	beq.w	8002ef2 <HAL_PCD_IRQHandler+0x5d6>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c70:	3302      	adds	r3, #2
 8002c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c7a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002c82:	461e      	mov	r6, r3
              if (count != 0U)
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f43f af5f 	beq.w	8002b48 <HAL_PCD_IRQHandler+0x22c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c8a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002c8e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002c92:	f002 fb3d 	bl	8005310 <USB_ReadPMA>
 8002c96:	e757      	b.n	8002b48 <HAL_PCD_IRQHandler+0x22c>
 8002c98:	ffff8f0f 	.word	0xffff8f0f
 8002c9c:	ffff8000 	.word	0xffff8000
 8002ca0:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ca4:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002ca6:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ca8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002cb8:	f003 faa2 	bl	8006200 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8002cbc:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f43f ae5a 	beq.w	800297a <HAL_PCD_IRQHandler+0x5e>
 8002cc6:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cc8:	4621      	mov	r1, r4
 8002cca:	6828      	ldr	r0, [r5, #0]
  hpcd->USB_Address = address;
 8002ccc:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8002cd0:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cd4:	f002 fafc 	bl	80052d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd8:	f885 42a8 	strb.w	r4, [r5, #680]	; 0x2a8
}
 8002cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ce4:	8802      	ldrh	r2, [r0, #0]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002cf2:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cfc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002d00:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d08:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d0c:	b193      	cbz	r3, 8002d34 <HAL_PCD_IRQHandler+0x418>
 8002d0e:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8002d12:	b179      	cbz	r1, 8002d34 <HAL_PCD_IRQHandler+0x418>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d14:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8002d18:	f002 fafa 	bl	8005310 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002d1c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8002d20:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d24:	4628      	mov	r0, r5
            ep->xfer_buff += ep->xfer_count;
 8002d26:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d28:	4621      	mov	r1, r4
            ep->xfer_buff += ep->xfer_count;
 8002d2a:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d2e:	f003 fa4f 	bl	80061d0 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d32:	6828      	ldr	r0, [r5, #0]
 8002d34:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d36:	051c      	lsls	r4, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d38:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d3a:	f53f ae39 	bmi.w	80029b0 <HAL_PCD_IRQHandler+0x94>
 8002d3e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002d42:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002d46:	f43f ae33 	beq.w	80029b0 <HAL_PCD_IRQHandler+0x94>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d4a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d4e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	5ad1      	ldrh	r1, [r2, r3]
 8002d56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002d5a:	52d1      	strh	r1, [r2, r3]
 8002d5c:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8002d60:	293e      	cmp	r1, #62	; 0x3e
 8002d62:	f240 8191 	bls.w	8003088 <HAL_PCD_IRQHandler+0x76c>
 8002d66:	094c      	lsrs	r4, r1, #5
 8002d68:	06c9      	lsls	r1, r1, #27
 8002d6a:	5ad1      	ldrh	r1, [r2, r3]
 8002d6c:	bf08      	it	eq
 8002d6e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8002d72:	b289      	uxth	r1, r1
 8002d74:	ea41 2184 	orr.w	r1, r1, r4, lsl #10
 8002d78:	ea41 010b 	orr.w	r1, r1, fp
 8002d7c:	b289      	uxth	r1, r1
 8002d7e:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d80:	8803      	ldrh	r3, [r0, #0]
 8002d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	8003      	strh	r3, [r0, #0]
 8002d9c:	e608      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d9e:	682a      	ldr	r2, [r5, #0]
 8002da0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 8002db4:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8002db6:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
          ep->xfer_len = 0U;
 8002dba:	6433      	str	r3, [r6, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002dbc:	b1d2      	cbz	r2, 8002df4 <HAL_PCD_IRQHandler+0x4d8>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dbe:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002dc2:	f040 8108 	bne.w	8002fd6 <HAL_PCD_IRQHandler+0x6ba>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dc6:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 81d9 	bne.w	8003182 <HAL_PCD_IRQHandler+0x866>
 8002dd0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8002dd4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002dd8:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002de0:	b292      	uxth	r2, r2
 8002de2:	5a99      	ldrh	r1, [r3, r2]
 8002de4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002de8:	5299      	strh	r1, [r3, r2]
 8002dea:	5a99      	ldrh	r1, [r3, r2]
 8002dec:	b289      	uxth	r1, r1
 8002dee:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002df2:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002df4:	4628      	mov	r0, r5
 8002df6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8002dfa:	f003 f9f3 	bl	80061e4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dfe:	6828      	ldr	r0, [r5, #0]
 8002e00:	e5d6      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e02:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8002e06:	f000 80ae 	beq.w	8002f66 <HAL_PCD_IRQHandler+0x64a>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e0a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxPctSize)
 8002e0e:	6c32      	ldr	r2, [r6, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f240 8140 	bls.w	800309a <HAL_PCD_IRQHandler+0x77e>
      ep->xfer_len -= TxPctSize;
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	6432      	str	r2, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	f000 813d 	beq.w	800309e <HAL_PCD_IRQHandler+0x782>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e24:	047f      	lsls	r7, r7, #17
 8002e26:	d50d      	bpl.n	8002e44 <HAL_PCD_IRQHandler+0x528>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e28:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002e2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002e30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e34:	0412      	lsls	r2, r2, #16
 8002e36:	0c12      	lsrs	r2, r2, #16
 8002e38:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e40:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002e44:	eb08 0c04 	add.w	ip, r8, r4
 8002e48:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8002e4c:	f89c 204c 	ldrb.w	r2, [ip, #76]	; 0x4c
 8002e50:	2a01      	cmp	r2, #1
 8002e52:	f040 80b0 	bne.w	8002fb6 <HAL_PCD_IRQHandler+0x69a>
        ep->xfer_count += TxPctSize;
 8002e56:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002e5a:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8002e5e:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e60:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8002e64:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e68:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8002e6c:	441f      	add	r7, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e6e:	4596      	cmp	lr, r2
        ep->xfer_buff += TxPctSize;
 8002e70:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e74:	f0c0 8282 	bcc.w	800337c <HAL_PCD_IRQHandler+0xa60>
          ep->xfer_len_db -= len;
 8002e78:	ebae 0302 	sub.w	r3, lr, r2
 8002e7c:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e80:	b293      	uxth	r3, r2
 8002e82:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
 8002e86:	f1bc 0f00 	cmp.w	ip, #0
 8002e8a:	f040 826a 	bne.w	8003362 <HAL_PCD_IRQHandler+0xa46>
 8002e8e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002e92:	f201 4c04 	addw	ip, r1, #1028	; 0x404
 8002e96:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002e9a:	2a3e      	cmp	r2, #62	; 0x3e
 8002e9c:	b289      	uxth	r1, r1
 8002e9e:	f83c e001 	ldrh.w	lr, [ip, r1]
 8002ea2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8002ea6:	f82c e001 	strh.w	lr, [ip, r1]
 8002eaa:	f240 8297 	bls.w	80033dc <HAL_PCD_IRQHandler+0xac0>
 8002eae:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8002eb2:	06d2      	lsls	r2, r2, #27
 8002eb4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8002eb8:	bf08      	it	eq
 8002eba:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	ea42 228e 	orr.w	r2, r2, lr, lsl #10
 8002ec4:	ea42 020b 	orr.w	r2, r2, fp
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ece:	eb08 0204 	add.w	r2, r8, r4
 8002ed2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002ed6:	4639      	mov	r1, r7
 8002ed8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002eda:	f002 fa09 	bl	80052f0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ede:	6828      	ldr	r0, [r5, #0]
 8002ee0:	e069      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x69a>
        ep = &hpcd->OUT_ep[epindex];
 8002ee2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee6:	6828      	ldr	r0, [r5, #0]
 8002ee8:	4429      	add	r1, r5
 8002eea:	f001 fea3 	bl	8004c34 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002eee:	6828      	ldr	r0, [r5, #0]
 8002ef0:	e570      	b.n	80029d4 <HAL_PCD_IRQHandler+0xb8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ef2:	3306      	adds	r3, #6
 8002ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ef8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002efc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002f04:	461e      	mov	r6, r3
              if (count != 0U)
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f43f ae1e 	beq.w	8002b48 <HAL_PCD_IRQHandler+0x22c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f0c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002f10:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f14:	f002 f9fc 	bl	8005310 <USB_ReadPMA>
 8002f18:	e616      	b.n	8002b48 <HAL_PCD_IRQHandler+0x22c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f1a:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002f1c:	4628      	mov	r0, r5
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f1e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002f22:	f023 0304 	bic.w	r3, r3, #4
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f2e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002f32:	f023 0308 	bic.w	r3, r3, #8
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002f3e:	f003 f981 	bl	8006244 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f42:	682a      	ldr	r2, [r5, #0]
 8002f44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002f54:	e511      	b.n	800297a <HAL_PCD_IRQHandler+0x5e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f56:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002f5a:	4633      	mov	r3, r6
 8002f5c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f60:	f002 f9d6 	bl	8005310 <USB_ReadPMA>
 8002f64:	e5f0      	b.n	8002b48 <HAL_PCD_IRQHandler+0x22c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f66:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxPctSize)
 8002f6a:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002f72:	459c      	cmp	ip, r3
 8002f74:	f0c0 80d4 	bcc.w	8003120 <HAL_PCD_IRQHandler+0x804>
      ep->xfer_len -= TxPctSize;
 8002f78:	ebac 0203 	sub.w	r2, ip, r3
 8002f7c:	6432      	str	r2, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	f000 80cf 	beq.w	8003122 <HAL_PCD_IRQHandler+0x806>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f84:	047f      	lsls	r7, r7, #17
 8002f86:	d40d      	bmi.n	8002fa4 <HAL_PCD_IRQHandler+0x688>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f88:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002f8c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f94:	0412      	lsls	r2, r2, #16
 8002f96:	0c12      	lsrs	r2, r2, #16
 8002f98:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fa0:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002fa4:	eb08 0c04 	add.w	ip, r8, r4
 8002fa8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8002fac:	f89c 204c 	ldrb.w	r2, [ip, #76]	; 0x4c
 8002fb0:	2a01      	cmp	r2, #1
 8002fb2:	f000 8193 	beq.w	80032dc <HAL_PCD_IRQHandler+0x9c0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fb6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8002fba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	ea03 030a 	and.w	r3, r3, sl
 8002fc4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8002fd4:	e4ec      	b.n	80029b0 <HAL_PCD_IRQHandler+0x94>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd6:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8002fda:	2a00      	cmp	r2, #0
 8002fdc:	f040 80df 	bne.w	800319e <HAL_PCD_IRQHandler+0x882>
 8002fe0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8002fe4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fe8:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ff0:	e6f6      	b.n	8002de0 <HAL_PCD_IRQHandler+0x4c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ff2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ff6:	f417 4c80 	ands.w	ip, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ffa:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ffc:	f000 80dd 	beq.w	80031ba <HAL_PCD_IRQHandler+0x89e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003000:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003004:	3302      	adds	r3, #2
 8003006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800300a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800300e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8003012:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003016:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800301a:	459c      	cmp	ip, r3
 800301c:	461e      	mov	r6, r3
 800301e:	f0c0 8148 	bcc.w	80032b2 <HAL_PCD_IRQHandler+0x996>
      ep->xfer_len -= count;
 8003022:	ebac 0c03 	sub.w	ip, ip, r3
 8003026:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800302a:	f1bc 0f00 	cmp.w	ip, #0
 800302e:	f000 8144 	beq.w	80032ba <HAL_PCD_IRQHandler+0x99e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003032:	0679      	lsls	r1, r7, #25
 8003034:	d50d      	bpl.n	8003052 <HAL_PCD_IRQHandler+0x736>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003036:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800303a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800303e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003042:	0409      	lsls	r1, r1, #16
 8003044:	0c09      	lsrs	r1, r1, #16
 8003046:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800304a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800304e:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8003052:	b90b      	cbnz	r3, 8003058 <HAL_PCD_IRQHandler+0x73c>
 8003054:	461e      	mov	r6, r3
 8003056:	e577      	b.n	8002b48 <HAL_PCD_IRQHandler+0x22c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003058:	eb08 0104 	add.w	r1, r8, r4
 800305c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003060:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003064:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003068:	f002 f952 	bl	8005310 <USB_ReadPMA>
 800306c:	e56c      	b.n	8002b48 <HAL_PCD_IRQHandler+0x22c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800306e:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_SOFCallback(hpcd);
 8003070:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003072:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003076:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003082:	f003 f8b9 	bl	80061f8 <HAL_PCD_SOFCallback>
    return;
 8003086:	e478      	b.n	800297a <HAL_PCD_IRQHandler+0x5e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003088:	2900      	cmp	r1, #0
 800308a:	f040 80cb 	bne.w	8003224 <HAL_PCD_IRQHandler+0x908>
 800308e:	5ad1      	ldrh	r1, [r2, r3]
 8003090:	b289      	uxth	r1, r1
 8003092:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003096:	52d1      	strh	r1, [r2, r3]
 8003098:	e672      	b.n	8002d80 <HAL_PCD_IRQHandler+0x464>
 800309a:	2300      	movs	r3, #0
 800309c:	6433      	str	r3, [r6, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800309e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 80dd 	bne.w	8003262 <HAL_PCD_IRQHandler+0x946>
 80030a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80030ac:	010b      	lsls	r3, r1, #4
 80030ae:	f203 4404 	addw	r4, r3, #1028	; 0x404
 80030b2:	b292      	uxth	r2, r2
 80030b4:	4404      	add	r4, r0
 80030b6:	f834 c002 	ldrh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030be:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80030c2:	f824 c002 	strh.w	ip, [r4, r2]
 80030c6:	f834 c002 	ldrh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ca:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030cc:	fa1f fc8c 	uxth.w	ip, ip
 80030d0:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 80030d4:	f824 c002 	strh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80030dc:	b292      	uxth	r2, r2
 80030de:	5a98      	ldrh	r0, [r3, r2]
 80030e0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80030e4:	5298      	strh	r0, [r3, r2]
 80030e6:	5a98      	ldrh	r0, [r3, r2]
 80030e8:	b280      	uxth	r0, r0
 80030ea:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80030ee:	5298      	strh	r0, [r3, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f0:	4628      	mov	r0, r5
 80030f2:	f003 f877 	bl	80061e4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030f6:	047b      	lsls	r3, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030f8:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030fa:	f57f af5c 	bpl.w	8002fb6 <HAL_PCD_IRQHandler+0x69a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030fe:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8003102:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800311e:	e74a      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x69a>
 8003120:	6432      	str	r2, [r6, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003122:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 8087 	bne.w	800323a <HAL_PCD_IRQHandler+0x91e>
 800312c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003130:	010b      	lsls	r3, r1, #4
 8003132:	f203 4404 	addw	r4, r3, #1028	; 0x404
 8003136:	b292      	uxth	r2, r2
 8003138:	4404      	add	r4, r0
 800313a:	f834 c002 	ldrh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800313e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003142:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003146:	f824 c002 	strh.w	ip, [r4, r2]
 800314a:	f834 c002 	ldrh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800314e:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003150:	fa1f fc8c 	uxth.w	ip, ip
 8003154:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 8003158:	f824 c002 	strh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800315c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003160:	b292      	uxth	r2, r2
 8003162:	5a98      	ldrh	r0, [r3, r2]
 8003164:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003168:	5298      	strh	r0, [r3, r2]
 800316a:	5a98      	ldrh	r0, [r3, r2]
 800316c:	b280      	uxth	r0, r0
 800316e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003172:	5298      	strh	r0, [r3, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003174:	4628      	mov	r0, r5
 8003176:	f003 f835 	bl	80061e4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800317a:	047b      	lsls	r3, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800317c:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800317e:	d5be      	bpl.n	80030fe <HAL_PCD_IRQHandler+0x7e2>
 8003180:	e719      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x69a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003182:	2b01      	cmp	r3, #1
 8003184:	f47f ae36 	bne.w	8002df4 <HAL_PCD_IRQHandler+0x4d8>
 8003188:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800318c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003190:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8003194:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003198:	b292      	uxth	r2, r2
 800319a:	529f      	strh	r7, [r3, r2]
 800319c:	e62a      	b.n	8002df4 <HAL_PCD_IRQHandler+0x4d8>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800319e:	2a01      	cmp	r2, #1
 80031a0:	f47f ae28 	bne.w	8002df4 <HAL_PCD_IRQHandler+0x4d8>
 80031a4:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 80031a8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80031ac:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80031b0:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80031b4:	b289      	uxth	r1, r1
 80031b6:	5253      	strh	r3, [r2, r1]
 80031b8:	e61c      	b.n	8002df4 <HAL_PCD_IRQHandler+0x4d8>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ba:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80031be:	3306      	adds	r3, #6
 80031c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80031c8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 80031cc:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80031d4:	459e      	cmp	lr, r3
 80031d6:	461e      	mov	r6, r3
 80031d8:	d358      	bcc.n	800328c <HAL_PCD_IRQHandler+0x970>
      ep->xfer_len -= count;
 80031da:	ebae 0e03 	sub.w	lr, lr, r3
 80031de:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80031e2:	f1be 0f00 	cmp.w	lr, #0
 80031e6:	d053      	beq.n	8003290 <HAL_PCD_IRQHandler+0x974>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031e8:	0679      	lsls	r1, r7, #25
 80031ea:	d40d      	bmi.n	8003208 <HAL_PCD_IRQHandler+0x8ec>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031ec:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80031f0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80031f4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80031f8:	0409      	lsls	r1, r1, #16
 80031fa:	0c09      	lsrs	r1, r1, #16
 80031fc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003200:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003204:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8003208:	2b00      	cmp	r3, #0
 800320a:	f43f af23 	beq.w	8003054 <HAL_PCD_IRQHandler+0x738>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800320e:	eb08 0104 	add.w	r1, r8, r4
 8003212:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003216:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800321a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800321e:	f002 f877 	bl	8005310 <USB_ReadPMA>
 8003222:	e491      	b.n	8002b48 <HAL_PCD_IRQHandler+0x22c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003224:	084c      	lsrs	r4, r1, #1
 8003226:	07cf      	lsls	r7, r1, #31
 8003228:	5ad1      	ldrh	r1, [r2, r3]
 800322a:	bf48      	it	mi
 800322c:	3401      	addmi	r4, #1
 800322e:	b289      	uxth	r1, r1
 8003230:	ea41 2184 	orr.w	r1, r1, r4, lsl #10
 8003234:	b289      	uxth	r1, r1
 8003236:	52d1      	strh	r1, [r2, r3]
 8003238:	e5a2      	b.n	8002d80 <HAL_PCD_IRQHandler+0x464>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800323a:	2b01      	cmp	r3, #1
 800323c:	d19a      	bne.n	8003174 <HAL_PCD_IRQHandler+0x858>
 800323e:	2400      	movs	r4, #0
 8003240:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003244:	010b      	lsls	r3, r1, #4
 8003246:	f203 4c04 	addw	ip, r3, #1028	; 0x404
 800324a:	b292      	uxth	r2, r2
 800324c:	4484      	add	ip, r0
 800324e:	f82c 4002 	strh.w	r4, [ip, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003252:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003256:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800325a:	4403      	add	r3, r0
 800325c:	b292      	uxth	r2, r2
 800325e:	529c      	strh	r4, [r3, r2]
 8003260:	e788      	b.n	8003174 <HAL_PCD_IRQHandler+0x858>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003262:	2b01      	cmp	r3, #1
 8003264:	f47f af44 	bne.w	80030f0 <HAL_PCD_IRQHandler+0x7d4>
 8003268:	2400      	movs	r4, #0
 800326a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800326e:	010b      	lsls	r3, r1, #4
 8003270:	f203 4c04 	addw	ip, r3, #1028	; 0x404
 8003274:	b292      	uxth	r2, r2
 8003276:	4484      	add	ip, r0
 8003278:	f82c 4002 	strh.w	r4, [ip, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800327c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003284:	4403      	add	r3, r0
 8003286:	b292      	uxth	r2, r2
 8003288:	529c      	strh	r4, [r3, r2]
 800328a:	e731      	b.n	80030f0 <HAL_PCD_IRQHandler+0x7d4>
 800328c:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003290:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8003294:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003298:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800329c:	0409      	lsls	r1, r1, #16
 800329e:	0c09      	lsrs	r1, r1, #16
 80032a0:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80032a4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80032a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80032ac:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80032b0:	e79a      	b.n	80031e8 <HAL_PCD_IRQHandler+0x8cc>
 80032b2:	f04f 0c00 	mov.w	ip, #0
 80032b6:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032ba:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80032be:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80032c2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80032c6:	0409      	lsls	r1, r1, #16
 80032c8:	0c09      	lsrs	r1, r1, #16
 80032ca:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80032ce:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80032d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80032d6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80032da:	e6aa      	b.n	8003032 <HAL_PCD_IRQHandler+0x716>
        ep->xfer_count += TxPctSize;
 80032dc:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 80032e0:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 80032e4:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 80032e6:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 80032ea:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80032ee:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 80032f2:	441f      	add	r7, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 80032f4:	4596      	cmp	lr, r2
        ep->xfer_buff += TxPctSize;
 80032f6:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80032fa:	d352      	bcc.n	80033a2 <HAL_PCD_IRQHandler+0xa86>
          ep->xfer_len_db -= len;
 80032fc:	ebae 0302 	sub.w	r3, lr, r2
 8003300:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003304:	b293      	uxth	r3, r2
 8003306:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
 800330a:	f1bc 0f00 	cmp.w	ip, #0
 800330e:	d13c      	bne.n	800338a <HAL_PCD_IRQHandler+0xa6e>
 8003310:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003314:	f201 4c0c 	addw	ip, r1, #1036	; 0x40c
 8003318:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800331c:	2a3e      	cmp	r2, #62	; 0x3e
 800331e:	b289      	uxth	r1, r1
 8003320:	f83c e001 	ldrh.w	lr, [ip, r1]
 8003324:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003328:	f82c e001 	strh.w	lr, [ip, r1]
 800332c:	d95f      	bls.n	80033ee <HAL_PCD_IRQHandler+0xad2>
 800332e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8003332:	06d2      	lsls	r2, r2, #27
 8003334:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003338:	bf08      	it	eq
 800333a:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 800333e:	b292      	uxth	r2, r2
 8003340:	ea42 228e 	orr.w	r2, r2, lr, lsl #10
 8003344:	ea42 020b 	orr.w	r2, r2, fp
 8003348:	b292      	uxth	r2, r2
 800334a:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800334e:	eb08 0204 	add.w	r2, r8, r4
 8003352:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003356:	4639      	mov	r1, r7
 8003358:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800335a:	f001 ffc9 	bl	80052f0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800335e:	6828      	ldr	r0, [r5, #0]
 8003360:	e629      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x69a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003362:	f1bc 0f01 	cmp.w	ip, #1
 8003366:	f47f adb2 	bne.w	8002ece <HAL_PCD_IRQHandler+0x5b2>
 800336a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800336e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003372:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8003376:	b292      	uxth	r2, r2
 8003378:	528b      	strh	r3, [r1, r2]
 800337a:	e5a8      	b.n	8002ece <HAL_PCD_IRQHandler+0x5b2>
        else if (ep->xfer_len_db == 0U)
 800337c:	f1be 0f00 	cmp.w	lr, #0
 8003380:	d116      	bne.n	80033b0 <HAL_PCD_IRQHandler+0xa94>
          ep->xfer_fill_db = 0U;
 8003382:	461a      	mov	r2, r3
 8003384:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 8003388:	e57b      	b.n	8002e82 <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800338a:	f1bc 0f01 	cmp.w	ip, #1
 800338e:	d1de      	bne.n	800334e <HAL_PCD_IRQHandler+0xa32>
 8003390:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003394:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003398:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 800339c:	b292      	uxth	r2, r2
 800339e:	528b      	strh	r3, [r1, r2]
 80033a0:	e7d5      	b.n	800334e <HAL_PCD_IRQHandler+0xa32>
        else if (ep->xfer_len_db == 0U)
 80033a2:	f1be 0f00 	cmp.w	lr, #0
 80033a6:	d10f      	bne.n	80033c8 <HAL_PCD_IRQHandler+0xaac>
          ep->xfer_fill_db = 0U;
 80033a8:	461a      	mov	r2, r3
 80033aa:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 80033ae:	e7aa      	b.n	8003306 <HAL_PCD_IRQHandler+0x9ea>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033b0:	4672      	mov	r2, lr
 80033b2:	fa1f f38e 	uxth.w	r3, lr
          ep->xfer_fill_db = 0U;
 80033b6:	f04f 0e00 	mov.w	lr, #0
 80033ba:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80033be:	f04f 0e00 	mov.w	lr, #0
 80033c2:	f8cc e048 	str.w	lr, [ip, #72]	; 0x48
 80033c6:	e55c      	b.n	8002e82 <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033c8:	4672      	mov	r2, lr
 80033ca:	fa1f f38e 	uxth.w	r3, lr
          ep->xfer_len_db = 0U;
 80033ce:	f04f 0e00 	mov.w	lr, #0
 80033d2:	f8cc e048 	str.w	lr, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80033d6:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 80033da:	e794      	b.n	8003306 <HAL_PCD_IRQHandler+0x9ea>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033dc:	b982      	cbnz	r2, 8003400 <HAL_PCD_IRQHandler+0xae4>
 80033de:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80033e2:	b292      	uxth	r2, r2
 80033e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e8:	f82c 2001 	strh.w	r2, [ip, r1]
 80033ec:	e56f      	b.n	8002ece <HAL_PCD_IRQHandler+0x5b2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033ee:	b9b2      	cbnz	r2, 800341e <HAL_PCD_IRQHandler+0xb02>
 80033f0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80033f4:	b292      	uxth	r2, r2
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fa:	f82c 2001 	strh.w	r2, [ip, r1]
 80033fe:	e7a6      	b.n	800334e <HAL_PCD_IRQHandler+0xa32>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003400:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8003404:	07d2      	lsls	r2, r2, #31
 8003406:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800340a:	bf48      	it	mi
 800340c:	f10e 0e01 	addmi.w	lr, lr, #1
 8003410:	b292      	uxth	r2, r2
 8003412:	ea42 228e 	orr.w	r2, r2, lr, lsl #10
 8003416:	b292      	uxth	r2, r2
 8003418:	f82c 2001 	strh.w	r2, [ip, r1]
 800341c:	e557      	b.n	8002ece <HAL_PCD_IRQHandler+0x5b2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800341e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8003422:	07d2      	lsls	r2, r2, #31
 8003424:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003428:	bf48      	it	mi
 800342a:	f10e 0e01 	addmi.w	lr, lr, #1
 800342e:	b292      	uxth	r2, r2
 8003430:	ea42 228e 	orr.w	r2, r2, lr, lsl #10
 8003434:	b292      	uxth	r2, r2
 8003436:	f82c 2001 	strh.w	r2, [ip, r1]
 800343a:	e788      	b.n	800334e <HAL_PCD_IRQHandler+0xa32>

0800343c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800343c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8003440:	2a01      	cmp	r2, #1
 8003442:	d00e      	beq.n	8003462 <HAL_PCD_SetAddress+0x26>
{
 8003444:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003446:	2201      	movs	r2, #1
 8003448:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800344a:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800344c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8003450:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003454:	f001 ff3c 	bl	80052d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003458:	2300      	movs	r3, #0
 800345a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800345e:	4618      	mov	r0, r3
}
 8003460:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003462:	2002      	movs	r0, #2
}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop

08003468 <HAL_PCD_EP_Open>:
{
 8003468:	b510      	push	{r4, lr}
 800346a:	f001 0e07 	and.w	lr, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800346e:	0609      	lsls	r1, r1, #24
{
 8003470:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003472:	d422      	bmi.n	80034ba <HAL_PCD_EP_Open+0x52>
    ep->is_in = 0U;
 8003474:	f04f 0c00 	mov.w	ip, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003478:	eb0e 008e 	add.w	r0, lr, lr, lsl #2
 800347c:	00c0      	lsls	r0, r0, #3
 800347e:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8003482:	4420      	add	r0, r4
 8003484:	f880 c169 	strb.w	ip, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003488:	4421      	add	r1, r4
  if (ep_type == EP_TYPE_BULK)
 800348a:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800348c:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800348e:	bf08      	it	eq
 8003490:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	f881 e000 	strb.w	lr, [r1]
    ep->data_pid_start = 0U;
 8003496:	bf08      	it	eq
 8003498:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800349a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800349c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d013      	beq.n	80034cc <HAL_PCD_EP_Open+0x64>
 80034a4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034a6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034a8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034ac:	f001 f914 	bl	80046d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034b0:	2300      	movs	r3, #0
 80034b2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 80034b6:	4618      	mov	r0, r3
}
 80034b8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	f10e 0c01 	add.w	ip, lr, #1
 80034be:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80034c2:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
    ep->is_in = 1U;
 80034c6:	2001      	movs	r0, #1
 80034c8:	7048      	strb	r0, [r1, #1]
 80034ca:	e7de      	b.n	800348a <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 80034cc:	2002      	movs	r0, #2
}
 80034ce:	bd10      	pop	{r4, pc}

080034d0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80034d0:	060b      	lsls	r3, r1, #24
{
 80034d2:	b510      	push	{r4, lr}
 80034d4:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80034d6:	d41b      	bmi.n	8003510 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d8:	f001 0307 	and.w	r3, r1, #7
 80034dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80034e0:	00d2      	lsls	r2, r2, #3
 80034e2:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80034e6:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034e8:	4402      	add	r2, r0
 80034ea:	2000      	movs	r0, #0
 80034ec:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80034f2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d018      	beq.n	800352c <HAL_PCD_EP_Close+0x5c>
 80034fa:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034fc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034fe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003502:	f001 fab7 	bl	8004a74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003506:	2300      	movs	r3, #0
 8003508:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800350c:	4618      	mov	r0, r3
}
 800350e:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8003510:	2201      	movs	r2, #1
 8003512:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	1899      	adds	r1, r3, r2
 8003518:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800351c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003520:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003522:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003524:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003528:	2b01      	cmp	r3, #1
 800352a:	d1e6      	bne.n	80034fa <HAL_PCD_EP_Close+0x2a>
 800352c:	2002      	movs	r0, #2
}
 800352e:	bd10      	pop	{r4, pc}

08003530 <HAL_PCD_EP_Receive>:
{
 8003530:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8003532:	2400      	movs	r4, #0
 8003534:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8003538:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800353c:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8003540:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003544:	6800      	ldr	r0, [r0, #0]
 8003546:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800354a:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800354e:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003552:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003556:	f001 fb6d 	bl	8004c34 <USB_EPStartXfer>
}
 800355a:	4620      	mov	r0, r4
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop

08003560 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003560:	f001 0107 	and.w	r1, r1, #7
 8003564:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003568:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 800356c:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop

08003574 <HAL_PCD_EP_Transmit>:
{
 8003574:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 8003576:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8003578:	2500      	movs	r5, #0
{
 800357a:	4604      	mov	r4, r0
 800357c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8003580:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003584:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8003588:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8003590:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 8003594:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 8003598:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800359c:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 80035a0:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 80035a4:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 80035a8:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035ac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80035b0:	6800      	ldr	r0, [r0, #0]
 80035b2:	f001 fb3f 	bl	8004c34 <USB_EPStartXfer>
}
 80035b6:	4628      	mov	r0, r5
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
 80035ba:	bf00      	nop

080035bc <HAL_PCD_EP_SetStall>:
{
 80035bc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035be:	6843      	ldr	r3, [r0, #4]
 80035c0:	f001 0507 	and.w	r5, r1, #7
 80035c4:	429d      	cmp	r5, r3
 80035c6:	d82e      	bhi.n	8003626 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80035c8:	060b      	lsls	r3, r1, #24
 80035ca:	4604      	mov	r4, r0
 80035cc:	d41b      	bmi.n	8003606 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->OUT_ep[ep_addr];
 80035ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035d2:	00c9      	lsls	r1, r1, #3
 80035d4:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 80035d8:	1843      	adds	r3, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80035da:	1881      	adds	r1, r0, r2
    ep->is_in = 0U;
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80035e2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80035e6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80035e8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d018      	beq.n	8003622 <HAL_PCD_EP_SetStall+0x66>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80035f2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035f6:	f001 fdf3 	bl	80051e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035fa:	b1b5      	cbz	r5, 800362a <HAL_PCD_EP_SetStall+0x6e>
  __HAL_UNLOCK(hpcd);
 80035fc:	2300      	movs	r3, #0
 80035fe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003602:	4618      	mov	r0, r3
}
 8003604:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003606:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003608:	18e9      	adds	r1, r5, r3
 800360a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800360e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003612:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8003614:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003616:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003618:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800361a:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800361e:	429a      	cmp	r2, r3
 8003620:	d1e6      	bne.n	80035f0 <HAL_PCD_EP_SetStall+0x34>
 8003622:	2002      	movs	r0, #2
}
 8003624:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003626:	2001      	movs	r0, #1
}
 8003628:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8003630:	f001 fe5c 	bl	80052ec <USB_EP0_OutStart>
 8003634:	e7e2      	b.n	80035fc <HAL_PCD_EP_SetStall+0x40>
 8003636:	bf00      	nop

08003638 <HAL_PCD_EP_ClrStall>:
{
 8003638:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800363a:	6843      	ldr	r3, [r0, #4]
 800363c:	f001 020f 	and.w	r2, r1, #15
 8003640:	429a      	cmp	r2, r3
 8003642:	d831      	bhi.n	80036a8 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 8003644:	060b      	lsls	r3, r1, #24
 8003646:	4604      	mov	r4, r0
 8003648:	d41c      	bmi.n	8003684 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364a:	f001 0307 	and.w	r3, r1, #7
 800364e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8003658:	4401      	add	r1, r0
    ep->is_in = 0U;
 800365a:	4402      	add	r2, r0
  ep->is_stall = 0U;
 800365c:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800365e:	2000      	movs	r0, #0
 8003660:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003664:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003666:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003668:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800366c:	2b01      	cmp	r3, #1
 800366e:	d019      	beq.n	80036a4 <HAL_PCD_EP_ClrStall+0x6c>
 8003670:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003672:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003674:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003678:	f001 fdda 	bl	8005230 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800367c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003680:	4628      	mov	r0, r5
}
 8003682:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003684:	2201      	movs	r2, #1
  ep->is_stall = 0U;
 8003686:	2500      	movs	r5, #0
 8003688:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368c:	1899      	adds	r1, r3, r2
 800368e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003692:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003696:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003698:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800369a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800369c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d1e5      	bne.n	8003670 <HAL_PCD_EP_ClrStall+0x38>
 80036a4:	2002      	movs	r0, #2
}
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80036a8:	2001      	movs	r0, #1
}
 80036aa:	bd38      	pop	{r3, r4, r5, pc}

080036ac <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80036b0:	d00b      	beq.n	80036ca <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	f001 0107 	and.w	r1, r1, #7
 80036b6:	3101      	adds	r1, #1
 80036b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036bc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036c0:	b95a      	cbnz	r2, 80036da <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036c2:	80c3      	strh	r3, [r0, #6]
 80036c4:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80036c6:	2000      	movs	r0, #0
 80036c8:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80036ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80036d2:	f500 70b4 	add.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	d0f3      	beq.n	80036c2 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80036da:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036dc:	6083      	str	r3, [r0, #8]
 80036de:	7302      	strb	r2, [r0, #12]
}
 80036e0:	2000      	movs	r0, #0
 80036e2:	4770      	bx	lr

080036e4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	f000 81b6 	beq.w	8003a56 <HAL_RCC_OscConfig+0x372>
{
 80036ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ee:	6803      	ldr	r3, [r0, #0]
 80036f0:	4604      	mov	r4, r0
 80036f2:	07dd      	lsls	r5, r3, #31
{
 80036f4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	d535      	bpl.n	8003764 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f8:	499a      	ldr	r1, [pc, #616]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80036fa:	684a      	ldr	r2, [r1, #4]
 80036fc:	f002 020c 	and.w	r2, r2, #12
 8003700:	2a04      	cmp	r2, #4
 8003702:	f000 80ef 	beq.w	80038e4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003706:	684a      	ldr	r2, [r1, #4]
 8003708:	f002 020c 	and.w	r2, r2, #12
 800370c:	2a08      	cmp	r2, #8
 800370e:	f000 80e5 	beq.w	80038dc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	6863      	ldr	r3, [r4, #4]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003718:	d010      	beq.n	800373c <HAL_RCC_OscConfig+0x58>
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 810c 	beq.w	8003938 <HAL_RCC_OscConfig+0x254>
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	f000 8182 	beq.w	8003a2c <HAL_RCC_OscConfig+0x348>
 8003728:	4b8e      	ldr	r3, [pc, #568]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e004      	b.n	8003746 <HAL_RCC_OscConfig+0x62>
 800373c:	4a89      	ldr	r2, [pc, #548]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe faef 	bl	8001d28 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4e86      	ldr	r6, [pc, #536]	; (8003964 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800374c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	e005      	b.n	800375c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe faea 	bl	8001d28 <HAL_GetTick>
 8003754:	1b40      	subs	r0, r0, r5
 8003756:	2864      	cmp	r0, #100	; 0x64
 8003758:	f200 80ea 	bhi.w	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375c:	6833      	ldr	r3, [r6, #0]
 800375e:	039a      	lsls	r2, r3, #14
 8003760:	d5f6      	bpl.n	8003750 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	079f      	lsls	r7, r3, #30
 8003766:	d528      	bpl.n	80037ba <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003768:	4a7e      	ldr	r2, [pc, #504]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800376a:	6851      	ldr	r1, [r2, #4]
 800376c:	f011 0f0c 	tst.w	r1, #12
 8003770:	f000 808d 	beq.w	800388e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003774:	6851      	ldr	r1, [r2, #4]
 8003776:	f001 010c 	and.w	r1, r1, #12
 800377a:	2908      	cmp	r1, #8
 800377c:	f000 8083 	beq.w	8003886 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8118 	beq.w	80039b8 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003788:	2201      	movs	r2, #1
 800378a:	4b77      	ldr	r3, [pc, #476]	; (8003968 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378c:	4e75      	ldr	r6, [pc, #468]	; (8003964 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800378e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003790:	f7fe faca 	bl	8001d28 <HAL_GetTick>
 8003794:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003796:	e005      	b.n	80037a4 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003798:	f7fe fac6 	bl	8001d28 <HAL_GetTick>
 800379c:	1b40      	subs	r0, r0, r5
 800379e:	2802      	cmp	r0, #2
 80037a0:	f200 80c6 	bhi.w	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	6833      	ldr	r3, [r6, #0]
 80037a6:	0798      	lsls	r0, r3, #30
 80037a8:	d5f6      	bpl.n	8003798 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	6833      	ldr	r3, [r6, #0]
 80037ac:	6962      	ldr	r2, [r4, #20]
 80037ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037b6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	071a      	lsls	r2, r3, #28
 80037bc:	d41f      	bmi.n	80037fe <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037be:	075d      	lsls	r5, r3, #29
 80037c0:	d542      	bpl.n	8003848 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	00d0      	lsls	r0, r2, #3
 80037c8:	d57d      	bpl.n	80038c6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4e67      	ldr	r6, [pc, #412]	; (800396c <HAL_RCC_OscConfig+0x288>)
 80037ce:	6833      	ldr	r3, [r6, #0]
 80037d0:	05d9      	lsls	r1, r3, #23
 80037d2:	f140 809d 	bpl.w	8003910 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	f000 80fe 	beq.w	80039da <HAL_RCC_OscConfig+0x2f6>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80ca 	beq.w	8003978 <HAL_RCC_OscConfig+0x294>
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	4b5f      	ldr	r3, [pc, #380]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	f000 812c 	beq.w	8003a46 <HAL_RCC_OscConfig+0x362>
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	621a      	str	r2, [r3, #32]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	621a      	str	r2, [r3, #32]
 80037fc:	e0f2      	b.n	80039e4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037fe:	69a3      	ldr	r3, [r4, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d04f      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003804:	2201      	movs	r2, #1
 8003806:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003808:	4e56      	ldr	r6, [pc, #344]	; (8003964 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800380a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800380e:	f7fe fa8b 	bl	8001d28 <HAL_GetTick>
 8003812:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003814:	e005      	b.n	8003822 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fe fa87 	bl	8001d28 <HAL_GetTick>
 800381a:	1b40      	subs	r0, r0, r5
 800381c:	2802      	cmp	r0, #2
 800381e:	f200 8087 	bhi.w	8003930 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003824:	079b      	lsls	r3, r3, #30
 8003826:	d5f6      	bpl.n	8003816 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003828:	4b51      	ldr	r3, [pc, #324]	; (8003970 <HAL_RCC_OscConfig+0x28c>)
 800382a:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_RCC_OscConfig+0x290>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0a5b      	lsrs	r3, r3, #9
 8003834:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003836:	bf00      	nop
  }
  while (Delay --);
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	9201      	str	r2, [sp, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f9      	bne.n	8003836 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	075d      	lsls	r5, r3, #29
 8003846:	d4bc      	bmi.n	80037c2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003848:	69e0      	ldr	r0, [r4, #28]
 800384a:	b1c0      	cbz	r0, 800387e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384c:	4d45      	ldr	r5, [pc, #276]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800384e:	686b      	ldr	r3, [r5, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	f000 80d8 	beq.w	8003a0a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800385a:	2200      	movs	r2, #0
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003860:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003862:	f000 80fa 	beq.w	8003a5a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003866:	f7fe fa5f 	bl	8001d28 <HAL_GetTick>
 800386a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386c:	e004      	b.n	8003878 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe fa5b 	bl	8001d28 <HAL_GetTick>
 8003872:	1b00      	subs	r0, r0, r4
 8003874:	2802      	cmp	r0, #2
 8003876:	d85b      	bhi.n	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	d4f7      	bmi.n	800386e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800387e:	2000      	movs	r0, #0
}
 8003880:	b002      	add	sp, #8
 8003882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003886:	6852      	ldr	r2, [r2, #4]
 8003888:	03d6      	lsls	r6, r2, #15
 800388a:	f53f af79 	bmi.w	8003780 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	4a35      	ldr	r2, [pc, #212]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	0795      	lsls	r5, r2, #30
 8003894:	d530      	bpl.n	80038f8 <HAL_RCC_OscConfig+0x214>
 8003896:	6922      	ldr	r2, [r4, #16]
 8003898:	2a01      	cmp	r2, #1
 800389a:	d02d      	beq.n	80038f8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
}
 800389e:	b002      	add	sp, #8
 80038a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4a30      	ldr	r2, [pc, #192]	; (8003968 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a6:	4e2f      	ldr	r6, [pc, #188]	; (8003964 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 80038a8:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80038ac:	f7fe fa3c 	bl	8001d28 <HAL_GetTick>
 80038b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b2:	e004      	b.n	80038be <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7fe fa38 	bl	8001d28 <HAL_GetTick>
 80038b8:	1b40      	subs	r0, r0, r5
 80038ba:	2802      	cmp	r0, #2
 80038bc:	d838      	bhi.n	8003930 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038c0:	079f      	lsls	r7, r3, #30
 80038c2:	d4f7      	bmi.n	80038b4 <HAL_RCC_OscConfig+0x1d0>
 80038c4:	e7bd      	b.n	8003842 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80038c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038ce:	61da      	str	r2, [r3, #28]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80038da:	e777      	b.n	80037cc <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038dc:	684a      	ldr	r2, [r1, #4]
 80038de:	03d0      	lsls	r0, r2, #15
 80038e0:	f57f af17 	bpl.w	8003712 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	0391      	lsls	r1, r2, #14
 80038ea:	f57f af3b 	bpl.w	8003764 <HAL_RCC_OscConfig+0x80>
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	f47f af37 	bne.w	8003764 <HAL_RCC_OscConfig+0x80>
 80038f6:	e7d1      	b.n	800389c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f8:	491a      	ldr	r1, [pc, #104]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038fa:	6960      	ldr	r0, [r4, #20]
 80038fc:	680a      	ldr	r2, [r1, #0]
 80038fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003902:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003906:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003908:	071a      	lsls	r2, r3, #28
 800390a:	f57f af58 	bpl.w	80037be <HAL_RCC_OscConfig+0xda>
 800390e:	e776      	b.n	80037fe <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003910:	6833      	ldr	r3, [r6, #0]
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003918:	f7fe fa06 	bl	8001d28 <HAL_GetTick>
 800391c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	6833      	ldr	r3, [r6, #0]
 8003920:	05da      	lsls	r2, r3, #23
 8003922:	f53f af58 	bmi.w	80037d6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fe f9ff 	bl	8001d28 <HAL_GetTick>
 800392a:	1bc0      	subs	r0, r0, r7
 800392c:	2864      	cmp	r0, #100	; 0x64
 800392e:	d9f6      	bls.n	800391e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003930:	2003      	movs	r0, #3
}
 8003932:	b002      	add	sp, #8
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003938:	4d0a      	ldr	r5, [pc, #40]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	682b      	ldr	r3, [r5, #0]
 8003944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003948:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800394a:	f7fe f9ed 	bl	8001d28 <HAL_GetTick>
 800394e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003950:	e004      	b.n	800395c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003952:	f7fe f9e9 	bl	8001d28 <HAL_GetTick>
 8003956:	1b80      	subs	r0, r0, r6
 8003958:	2864      	cmp	r0, #100	; 0x64
 800395a:	d8e9      	bhi.n	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	039b      	lsls	r3, r3, #14
 8003960:	d4f7      	bmi.n	8003952 <HAL_RCC_OscConfig+0x26e>
 8003962:	e6fe      	b.n	8003762 <HAL_RCC_OscConfig+0x7e>
 8003964:	40021000 	.word	0x40021000
 8003968:	42420000 	.word	0x42420000
 800396c:	40007000 	.word	0x40007000
 8003970:	20000010 	.word	0x20000010
 8003974:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	4e50      	ldr	r6, [pc, #320]	; (8003abc <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397e:	6a33      	ldr	r3, [r6, #32]
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6233      	str	r3, [r6, #32]
 8003986:	6a33      	ldr	r3, [r6, #32]
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800398e:	f7fe f9cb 	bl	8001d28 <HAL_GetTick>
 8003992:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003994:	e004      	b.n	80039a0 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe f9c7 	bl	8001d28 <HAL_GetTick>
 800399a:	1bc0      	subs	r0, r0, r7
 800399c:	4540      	cmp	r0, r8
 800399e:	d8c7      	bhi.n	8003930 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a0:	6a33      	ldr	r3, [r6, #32]
 80039a2:	0798      	lsls	r0, r3, #30
 80039a4:	d4f7      	bmi.n	8003996 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	f43f af4e 	beq.w	8003848 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4a43      	ldr	r2, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x3d8>)
 80039ae:	69d3      	ldr	r3, [r2, #28]
 80039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	e747      	b.n	8003848 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80039b8:	4a41      	ldr	r2, [pc, #260]	; (8003ac0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	4e40      	ldr	r6, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80039bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039be:	f7fe f9b3 	bl	8001d28 <HAL_GetTick>
 80039c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c4:	e004      	b.n	80039d0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fe f9af 	bl	8001d28 <HAL_GetTick>
 80039ca:	1b40      	subs	r0, r0, r5
 80039cc:	2802      	cmp	r0, #2
 80039ce:	d8af      	bhi.n	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	0799      	lsls	r1, r3, #30
 80039d4:	d4f7      	bmi.n	80039c6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	e6ef      	b.n	80037ba <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039da:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_RCC_OscConfig+0x3d8>)
 80039dc:	6a13      	ldr	r3, [r2, #32]
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80039e4:	f7fe f9a0 	bl	8001d28 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4f33      	ldr	r7, [pc, #204]	; (8003abc <HAL_RCC_OscConfig+0x3d8>)
 80039f0:	e004      	b.n	80039fc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe f999 	bl	8001d28 <HAL_GetTick>
 80039f6:	1b80      	subs	r0, r0, r6
 80039f8:	4540      	cmp	r0, r8
 80039fa:	d899      	bhi.n	8003930 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	079b      	lsls	r3, r3, #30
 8003a00:	d5f7      	bpl.n	80039f2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	f43f af20 	beq.w	8003848 <HAL_RCC_OscConfig+0x164>
 8003a08:	e7d0      	b.n	80039ac <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0a:	2801      	cmp	r0, #1
 8003a0c:	f43f af38 	beq.w	8003880 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003a10:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	6a22      	ldr	r2, [r4, #32]
 8003a14:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003a18:	4291      	cmp	r1, r2
 8003a1a:	f47f af3f 	bne.w	800389c <HAL_RCC_OscConfig+0x1b8>
 8003a1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003a24:	1a18      	subs	r0, r3, r0
 8003a26:	bf18      	it	ne
 8003a28:	2001      	movne	r0, #1
 8003a2a:	e729      	b.n	8003880 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a30:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e67f      	b.n	8003746 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a46:	f042 0204 	orr.w	r2, r2, #4
 8003a4a:	621a      	str	r2, [r3, #32]
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	621a      	str	r2, [r3, #32]
 8003a54:	e7c6      	b.n	80039e4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8003a56:	2001      	movs	r0, #1
}
 8003a58:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f965 	bl	8001d28 <HAL_GetTick>
 8003a5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	e005      	b.n	8003a6e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe f961 	bl	8001d28 <HAL_GetTick>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	2802      	cmp	r0, #2
 8003a6a:	f63f af61 	bhi.w	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	682b      	ldr	r3, [r5, #0]
 8003a70:	0199      	lsls	r1, r3, #6
 8003a72:	d4f6      	bmi.n	8003a62 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a74:	6a23      	ldr	r3, [r4, #32]
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7a:	d105      	bne.n	8003a88 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a7c:	686a      	ldr	r2, [r5, #4]
 8003a7e:	68a1      	ldr	r1, [r4, #8]
 8003a80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003a84:	430a      	orrs	r2, r1
 8003a86:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a88:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8a:	4d0c      	ldr	r5, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x3d8>)
 8003a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a8e:	686a      	ldr	r2, [r5, #4]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003a96:	490a      	ldr	r1, [pc, #40]	; (8003ac0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003a9e:	f7fe f943 	bl	8001d28 <HAL_GetTick>
 8003aa2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe f93f 	bl	8001d28 <HAL_GetTick>
 8003aaa:	1b00      	subs	r0, r0, r4
 8003aac:	2802      	cmp	r0, #2
 8003aae:	f63f af3f 	bhi.w	8003930 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab2:	682b      	ldr	r3, [r5, #0]
 8003ab4:	019a      	lsls	r2, r3, #6
 8003ab6:	d5f6      	bpl.n	8003aa6 <HAL_RCC_OscConfig+0x3c2>
 8003ab8:	e6e1      	b.n	800387e <HAL_RCC_OscConfig+0x19a>
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	42420000 	.word	0x42420000

08003ac4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f000 80a1 	beq.w	8003c0c <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aca:	4a56      	ldr	r2, [pc, #344]	; (8003c24 <HAL_RCC_ClockConfig+0x160>)
{
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	460d      	mov	r5, r1
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	f023 0307 	bic.w	r3, r3, #7
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae8:	6813      	ldr	r3, [r2, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	428b      	cmp	r3, r1
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003af2:	2001      	movs	r0, #1
}
 8003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	079e      	lsls	r6, r3, #30
 8003afc:	d514      	bpl.n	8003b28 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afe:	0758      	lsls	r0, r3, #29
 8003b00:	d504      	bpl.n	8003b0c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b02:	4949      	ldr	r1, [pc, #292]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003b04:	684a      	ldr	r2, [r1, #4]
 8003b06:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003b0a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	0719      	lsls	r1, r3, #28
 8003b0e:	d504      	bpl.n	8003b1a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b10:	4945      	ldr	r1, [pc, #276]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003b12:	684a      	ldr	r2, [r1, #4]
 8003b14:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003b18:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1a:	4943      	ldr	r1, [pc, #268]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003b1c:	68a0      	ldr	r0, [r4, #8]
 8003b1e:	684a      	ldr	r2, [r1, #4]
 8003b20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b24:	4302      	orrs	r2, r0
 8003b26:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b28:	07da      	lsls	r2, r3, #31
 8003b2a:	d520      	bpl.n	8003b6e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b30:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b34:	d06c      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	2a02      	cmp	r2, #2
 8003b38:	d065      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	079e      	lsls	r6, r3, #30
 8003b3c:	d5d9      	bpl.n	8003af2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4e3a      	ldr	r6, [pc, #232]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b40:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b44:	6873      	ldr	r3, [r6, #4]
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003b4e:	f7fe f8eb 	bl	8001d28 <HAL_GetTick>
 8003b52:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	e004      	b.n	8003b60 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b56:	f7fe f8e7 	bl	8001d28 <HAL_GetTick>
 8003b5a:	1bc0      	subs	r0, r0, r7
 8003b5c:	4540      	cmp	r0, r8
 8003b5e:	d85a      	bhi.n	8003c16 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b60:	6873      	ldr	r3, [r6, #4]
 8003b62:	6862      	ldr	r2, [r4, #4]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b6c:	d1f3      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	; (8003c24 <HAL_RCC_ClockConfig+0x160>)
 8003b70:	6813      	ldr	r3, [r2, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	42ab      	cmp	r3, r5
 8003b78:	d909      	bls.n	8003b8e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f023 0307 	bic.w	r3, r3, #7
 8003b80:	432b      	orrs	r3, r5
 8003b82:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	42ab      	cmp	r3, r5
 8003b8c:	d1b1      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0758      	lsls	r0, r3, #29
 8003b92:	d506      	bpl.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4924      	ldr	r1, [pc, #144]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003b96:	68e0      	ldr	r0, [r4, #12]
 8003b98:	684a      	ldr	r2, [r1, #4]
 8003b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b9e:	4302      	orrs	r2, r0
 8003ba0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	0719      	lsls	r1, r3, #28
 8003ba4:	d507      	bpl.n	8003bb6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba6:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003ba8:	6921      	ldr	r1, [r4, #16]
 8003baa:	6853      	ldr	r3, [r2, #4]
 8003bac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003bb0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bb4:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8003bb6:	491c      	ldr	r1, [pc, #112]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003bb8:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bba:	f002 030c 	and.w	r3, r2, #12
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_RCC_ClockConfig+0x164>)
 8003bc6:	481a      	ldr	r0, [pc, #104]	; (8003c30 <HAL_RCC_ClockConfig+0x16c>)
 8003bc8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003bca:	491a      	ldr	r1, [pc, #104]	; (8003c34 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bcc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003bd0:	5c80      	ldrb	r0, [r0, r2]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x174>)
 8003bd4:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003bd6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003bda:	f7fe f863 	bl	8001ca4 <HAL_InitTick>
  return HAL_OK;
 8003bde:	2000      	movs	r0, #0
}
 8003be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003be4:	4815      	ldr	r0, [pc, #84]	; (8003c3c <HAL_RCC_ClockConfig+0x178>)
 8003be6:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bea:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bec:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bee:	d514      	bpl.n	8003c1a <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bf0:	480e      	ldr	r0, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf2:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bf4:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf8:	4911      	ldr	r1, [pc, #68]	; (8003c40 <HAL_RCC_ClockConfig+0x17c>)
 8003bfa:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8003bfe:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c04:	e7de      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	019f      	lsls	r7, r3, #6
 8003c08:	d499      	bmi.n	8003b3e <HAL_RCC_ClockConfig+0x7a>
 8003c0a:	e772      	b.n	8003af2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
}
 8003c0e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c10:	039b      	lsls	r3, r3, #14
 8003c12:	d494      	bmi.n	8003b3e <HAL_RCC_ClockConfig+0x7a>
 8003c14:	e76d      	b.n	8003af2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003c16:	2003      	movs	r0, #3
 8003c18:	e76c      	b.n	8003af4 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <HAL_RCC_ClockConfig+0x180>)
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	e7d0      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x100>
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	007a1200 	.word	0x007a1200
 8003c30:	0800b180 	.word	0x0800b180
 8003c34:	20000018 	.word	0x20000018
 8003c38:	20000010 	.word	0x20000010
 8003c3c:	0800b198 	.word	0x0800b198
 8003c40:	0800b1a8 	.word	0x0800b1a8
 8003c44:	003d0900 	.word	0x003d0900

08003c48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4905      	ldr	r1, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c50:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	6810      	ldr	r0, [r2, #0]
}
 8003c58:	40d8      	lsrs	r0, r3
 8003c5a:	4770      	bx	lr
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	20000010 	.word	0x20000010
 8003c64:	0800b190 	.word	0x0800b190

08003c68 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4905      	ldr	r1, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c70:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	6810      	ldr	r0, [r2, #0]
}
 8003c78:	40d8      	lsrs	r0, r3
 8003c7a:	4770      	bx	lr
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	20000010 	.word	0x20000010
 8003c84:	0800b190 	.word	0x0800b190

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c8e:	6800      	ldr	r0, [r0, #0]
{
 8003c90:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c92:	07c1      	lsls	r1, r0, #31
 8003c94:	d52c      	bpl.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	00d2      	lsls	r2, r2, #3
 8003c9c:	d53f      	bpl.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4d39      	ldr	r5, [pc, #228]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8003ca0:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	682b      	ldr	r3, [r5, #0]
 8003ca4:	05df      	lsls	r7, r3, #23
 8003ca6:	d548      	bpl.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca8:	4d35      	ldr	r5, [pc, #212]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003caa:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003cb2:	6861      	ldr	r1, [r4, #4]
 8003cb4:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d00d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cbc:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbe:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc0:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc8:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd0:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd2:	07d9      	lsls	r1, r3, #31
 8003cd4:	d444      	bmi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	6861      	ldr	r1, [r4, #4]
 8003cd8:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003cda:	6a13      	ldr	r3, [r2, #32]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ce4:	b11e      	cbz	r6, 8003cee <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	69d3      	ldr	r3, [r2, #28]
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	0783      	lsls	r3, r0, #30
 8003cf2:	d506      	bpl.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf4:	4922      	ldr	r1, [pc, #136]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003cf6:	68a3      	ldr	r3, [r4, #8]
 8003cf8:	684a      	ldr	r2, [r1, #4]
 8003cfa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d02:	f010 0010 	ands.w	r0, r0, #16
 8003d06:	d007      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d08:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003d0c:	68e1      	ldr	r1, [r4, #12]
 8003d0e:	6853      	ldr	r3, [r2, #4]
 8003d10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6053      	str	r3, [r2, #4]
}
 8003d18:	b002      	add	sp, #8
 8003d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	4d18      	ldr	r5, [pc, #96]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d26:	61da      	str	r2, [r3, #28]
 8003d28:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003d2a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	05df      	lsls	r7, r3, #23
 8003d38:	d4b6      	bmi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	682b      	ldr	r3, [r5, #0]
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d42:	f7fd fff1 	bl	8001d28 <HAL_GetTick>
 8003d46:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	05d8      	lsls	r0, r3, #23
 8003d4c:	d4ac      	bmi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fd ffeb 	bl	8001d28 <HAL_GetTick>
 8003d52:	1bc3      	subs	r3, r0, r7
 8003d54:	2b64      	cmp	r3, #100	; 0x64
 8003d56:	d9f7      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003d58:	2003      	movs	r0, #3
}
 8003d5a:	b002      	add	sp, #8
 8003d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003d60:	f7fd ffe2 	bl	8001d28 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d68:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	e004      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fd ffdc 	bl	8001d28 <HAL_GetTick>
 8003d70:	1bc0      	subs	r0, r0, r7
 8003d72:	4540      	cmp	r0, r8
 8003d74:	d8f0      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	6a2b      	ldr	r3, [r5, #32]
 8003d78:	079a      	lsls	r2, r3, #30
 8003d7a:	d5f7      	bpl.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003d7c:	e7ab      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42420000 	.word	0x42420000

08003d8c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d066      	beq.n	8003e5e <HAL_TIM_Base_Init+0xd2>
{
 8003d90:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d96:	4604      	mov	r4, r0
 8003d98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d045      	beq.n	8003e2c <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da4:	492f      	ldr	r1, [pc, #188]	; (8003e64 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003da6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003daa:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003dac:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dae:	d042      	beq.n	8003e36 <HAL_TIM_Base_Init+0xaa>
 8003db0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003db4:	d011      	beq.n	8003dda <HAL_TIM_Base_Init+0x4e>
 8003db6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003dba:	428a      	cmp	r2, r1
 8003dbc:	d00d      	beq.n	8003dda <HAL_TIM_Base_Init+0x4e>
 8003dbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003dc2:	428a      	cmp	r2, r1
 8003dc4:	d009      	beq.n	8003dda <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc6:	69a0      	ldr	r0, [r4, #24]
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dcc:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dce:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003dd6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	e010      	b.n	8003dfc <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8003dda:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8003de2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003df4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003df6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003dfa:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e08:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e28:	2000      	movs	r0, #0
}
 8003e2a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e30:	f7fd fe18 	bl	8001a64 <HAL_TIM_Base_MspInit>
 8003e34:	e7b4      	b.n	8003da0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003e36:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8003e3e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e44:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e46:	69a1      	ldr	r1, [r4, #24]
 8003e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003e4e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e50:	68e3      	ldr	r3, [r4, #12]
 8003e52:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003e58:	6963      	ldr	r3, [r4, #20]
 8003e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5c:	e7ce      	b.n	8003dfc <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 8003e5e:	2001      	movs	r0, #1
}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40012c00 	.word	0x40012c00

08003e68 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003e68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d11f      	bne.n	8003eb0 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e72:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e78:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7a:	490f      	ldr	r1, [pc, #60]	; (8003eb8 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e80:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e82:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	d009      	beq.n	8003e9a <HAL_TIM_Base_Start_IT+0x32>
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d006      	beq.n	8003e9a <HAL_TIM_Base_Start_IT+0x32>
 8003e8c:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <HAL_TIM_Base_Start_IT+0x54>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_Base_Start_IT+0x32>
 8003e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d104      	bne.n	8003ea4 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	2a06      	cmp	r2, #6
 8003ea2:	d007      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8003ea4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003ea6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	4770      	bx	lr
    return HAL_ERROR;
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	4770      	bx	lr
  return HAL_OK;
 8003eb4:	2000      	movs	r0, #0
}
 8003eb6:	4770      	bx	lr
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40000400 	.word	0x40000400

08003ec0 <HAL_TIM_IC_MspInit>:
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop

08003ec4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d066      	beq.n	8003f96 <HAL_TIM_IC_Init+0xd2>
{
 8003ec8:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ece:	4604      	mov	r4, r0
 8003ed0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d045      	beq.n	8003f64 <HAL_TIM_IC_Init+0xa0>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eda:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003edc:	492f      	ldr	r1, [pc, #188]	; (8003f9c <HAL_TIM_IC_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003ee4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee6:	d042      	beq.n	8003f6e <HAL_TIM_IC_Init+0xaa>
 8003ee8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003eec:	d011      	beq.n	8003f12 <HAL_TIM_IC_Init+0x4e>
 8003eee:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003ef2:	428a      	cmp	r2, r1
 8003ef4:	d00d      	beq.n	8003f12 <HAL_TIM_IC_Init+0x4e>
 8003ef6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003efa:	428a      	cmp	r2, r1
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_IC_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efe:	69a0      	ldr	r0, [r4, #24]
 8003f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f04:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f06:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8003f08:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8003f0a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f0e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	e010      	b.n	8003f34 <HAL_TIM_IC_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8003f12:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f18:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8003f1a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f22:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f28:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f2a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003f2c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003f2e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f32:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	2301      	movs	r3, #1
 8003f36:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003f40:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003f60:	2000      	movs	r0, #0
}
 8003f62:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003f64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003f68:	f7ff ffaa 	bl	8003ec0 <HAL_TIM_IC_MspInit>
 8003f6c:	e7b4      	b.n	8003ed8 <HAL_TIM_IC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003f6e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f74:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8003f76:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7e:	69a1      	ldr	r1, [r4, #24]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003f86:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	68e3      	ldr	r3, [r4, #12]
 8003f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003f90:	6963      	ldr	r3, [r4, #20]
 8003f92:	6313      	str	r3, [r2, #48]	; 0x30
 8003f94:	e7ce      	b.n	8003f34 <HAL_TIM_IC_Init+0x70>
    return HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40012c00 	.word	0x40012c00

08003fa0 <HAL_TIM_IC_Start_IT>:
{
 8003fa0:	4603      	mov	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d135      	bne.n	8004012 <HAL_TIM_IC_Start_IT+0x72>
 8003fa6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003faa:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fae:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003fb0:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb2:	2801      	cmp	r0, #1
 8003fb4:	d102      	bne.n	8003fbc <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb6:	2a01      	cmp	r2, #1
 8003fb8:	d002      	beq.n	8003fc0 <HAL_TIM_IC_Start_IT+0x20>
}
 8003fba:	4770      	bx	lr
  switch (Channel)
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	d135      	bne.n	8004030 <HAL_TIM_IC_Start_IT+0x90>
 8003fc4:	2002      	movs	r0, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fc6:	681a      	ldr	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fcc:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fd0:	68d3      	ldr	r3, [r2, #12]
 8003fd2:	4303      	orrs	r3, r0
 8003fd4:	60d3      	str	r3, [r2, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd6:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd8:	6a10      	ldr	r0, [r2, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fda:	408b      	lsls	r3, r1
  TIMx->CCER &= ~tmp;
 8003fdc:	ea20 0003 	bic.w	r0, r0, r3
{
 8003fe0:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8003fe2:	6210      	str	r0, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe4:	6a11      	ldr	r1, [r2, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	4c38      	ldr	r4, [pc, #224]	; (80040c8 <HAL_TIM_IC_Start_IT+0x128>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe8:	430b      	orrs	r3, r1
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fea:	42a2      	cmp	r2, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fec:	6213      	str	r3, [r2, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fee:	d041      	beq.n	8004074 <HAL_TIM_IC_Start_IT+0xd4>
 8003ff0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003ff4:	d03e      	beq.n	8004074 <HAL_TIM_IC_Start_IT+0xd4>
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_TIM_IC_Start_IT+0x12c>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d03b      	beq.n	8004074 <HAL_TIM_IC_Start_IT+0xd4>
 8003ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004000:	429a      	cmp	r2, r3
 8004002:	d037      	beq.n	8004074 <HAL_TIM_IC_Start_IT+0xd4>
      __HAL_TIM_ENABLE(htim);
 8004004:	2000      	movs	r0, #0
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bc10      	pop	{r4}
 8004010:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004012:	2904      	cmp	r1, #4
 8004014:	d051      	beq.n	80040ba <HAL_TIM_IC_Start_IT+0x11a>
 8004016:	2908      	cmp	r1, #8
 8004018:	bf0b      	itete	eq
 800401a:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 800401e:	f893 0041 	ldrbne.w	r0, [r3, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004022:	f893 2044 	ldrbeq.w	r2, [r3, #68]	; 0x44
 8004026:	f893 2045 	ldrbne.w	r2, [r3, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800402a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	e7c0      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004030:	2904      	cmp	r1, #4
 8004032:	d031      	beq.n	8004098 <HAL_TIM_IC_Start_IT+0xf8>
 8004034:	2908      	cmp	r1, #8
 8004036:	d024      	beq.n	8004082 <HAL_TIM_IC_Start_IT+0xe2>
 8004038:	2002      	movs	r0, #2
  switch (Channel)
 800403a:	1f0a      	subs	r2, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004040:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
  switch (Channel)
 8004044:	2a08      	cmp	r2, #8
 8004046:	d8b9      	bhi.n	8003fbc <HAL_TIM_IC_Start_IT+0x1c>
 8004048:	a001      	add	r0, pc, #4	; (adr r0, 8004050 <HAL_TIM_IC_Start_IT+0xb0>)
 800404a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800404e:	bf00      	nop
 8004050:	080040a3 	.word	0x080040a3
 8004054:	08003fbd 	.word	0x08003fbd
 8004058:	08003fbd 	.word	0x08003fbd
 800405c:	08003fbd 	.word	0x08003fbd
 8004060:	0800408d 	.word	0x0800408d
 8004064:	08003fbd 	.word	0x08003fbd
 8004068:	08003fbd 	.word	0x08003fbd
 800406c:	08003fbd 	.word	0x08003fbd
 8004070:	080040af 	.word	0x080040af
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004074:	6893      	ldr	r3, [r2, #8]
 8004076:	f003 0307 	and.w	r3, r3, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	2b06      	cmp	r3, #6
 800407c:	d1c2      	bne.n	8004004 <HAL_TIM_IC_Start_IT+0x64>
 800407e:	2000      	movs	r0, #0
 8004080:	e7c5      	b.n	800400e <HAL_TIM_IC_Start_IT+0x6e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68d3      	ldr	r3, [r2, #12]
 8004090:	f043 0308 	orr.w	r3, r3, #8
 8004094:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004096:	e79e      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004098:	2202      	movs	r2, #2
 800409a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68d3      	ldr	r3, [r2, #12]
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80040ac:	e793      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x36>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68d3      	ldr	r3, [r2, #12]
 80040b2:	f043 0310 	orr.w	r3, r3, #16
 80040b6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80040b8:	e78d      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x36>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040ba:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040be:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040c2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	e774      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x12>
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40000400 	.word	0x40000400

080040d0 <HAL_TIM_IC_ConfigChannel>:
{
 80040d0:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80040d2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80040d6:	2801      	cmp	r0, #1
 80040d8:	f000 80c4 	beq.w	8004264 <HAL_TIM_IC_ConfigChannel+0x194>
 80040dc:	2001      	movs	r0, #1
{
 80040de:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80040e0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80040e4:	b15a      	cbz	r2, 80040fe <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 80040e6:	2a04      	cmp	r2, #4
 80040e8:	d044      	beq.n	8004174 <HAL_TIM_IC_ConfigChannel+0xa4>
  else if (Channel == TIM_CHANNEL_3)
 80040ea:	2a08      	cmp	r2, #8
 80040ec:	f000 8092 	beq.w	8004214 <HAL_TIM_IC_ConfigChannel+0x144>
  else if (Channel == TIM_CHANNEL_4)
 80040f0:	2a0c      	cmp	r2, #12
 80040f2:	d069      	beq.n	80041c8 <HAL_TIM_IC_ConfigChannel+0xf8>
  __HAL_UNLOCK(htim);
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040fa:	bcf0      	pop	{r4, r5, r6, r7}
 80040fc:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 80040fe:	681c      	ldr	r4, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004100:	f8df c164 	ldr.w	ip, [pc, #356]	; 8004268 <HAL_TIM_IC_ConfigChannel+0x198>
  tmpccer = TIMx->CCER;
 8004104:	6a26      	ldr	r6, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004106:	6a27      	ldr	r7, [r4, #32]
                      sConfig->ICFilter);
 8004108:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	f027 0701 	bic.w	r7, r7, #1
                      sConfig->ICSelection,
 800410e:	e9d1 0500 	ldrd	r0, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004112:	4564      	cmp	r4, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004114:	6227      	str	r7, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004116:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004118:	d00d      	beq.n	8004136 <HAL_TIM_IC_ConfigChannel+0x66>
 800411a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800411e:	d00a      	beq.n	8004136 <HAL_TIM_IC_ConfigChannel+0x66>
 8004120:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 8004124:	4564      	cmp	r4, ip
 8004126:	d006      	beq.n	8004136 <HAL_TIM_IC_ConfigChannel+0x66>
 8004128:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800412c:	4564      	cmp	r4, ip
 800412e:	d002      	beq.n	8004136 <HAL_TIM_IC_ConfigChannel+0x66>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004130:	f047 0c01 	orr.w	ip, r7, #1
 8004134:	e003      	b.n	800413e <HAL_TIM_IC_ConfigChannel+0x6e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004136:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800413a:	ea45 0c07 	orr.w	ip, r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800413e:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004140:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CCMR1 = tmpccmr1;
 800414a:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414c:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004150:	f000 020a 	and.w	r2, r0, #10
 8004154:	432a      	orrs	r2, r5
  TIMx->CCER = tmpccer;
 8004156:	6222      	str	r2, [r4, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004158:	69a2      	ldr	r2, [r4, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800415a:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800415c:	f022 020c 	bic.w	r2, r2, #12
 8004160:	61a2      	str	r2, [r4, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004162:	69a2      	ldr	r2, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2000      	movs	r0, #0
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004166:	430a      	orrs	r2, r1
 8004168:	61a2      	str	r2, [r4, #24]
  __HAL_UNLOCK(htim);
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004170:	bcf0      	pop	{r4, r5, r6, r7}
 8004172:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8004174:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8004176:	e9d1 0600 	ldrd	r0, r6, [r1]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800417a:	0104      	lsls	r4, r0, #4
  tmpccer = TIMx->CCER;
 800417c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004180:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004184:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004188:	f004 04a0 	and.w	r4, r4, #160	; 0xa0
 800418c:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 800418e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004190:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004192:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8004194:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004196:	0300      	lsls	r0, r0, #12
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004198:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800419c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041a0:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041a6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80041a8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80041aa:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041ac:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2000      	movs	r0, #0
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041b0:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80041b4:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041b6:	6991      	ldr	r1, [r2, #24]
 80041b8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80041bc:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041c4:	bcf0      	pop	{r4, r5, r6, r7}
 80041c6:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 80041c8:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 80041ca:	e9d1 0600 	ldrd	r0, r6, [r1]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80041ce:	0304      	lsls	r4, r0, #12
  tmpccer = TIMx->CCER;
 80041d0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d2:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC4P);
 80041d4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d8:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80041dc:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
 80041e0:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 80041e2:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e4:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80041e6:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80041e8:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041ea:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041ec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041f0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041f4:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041f6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041fa:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80041fc:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 80041fe:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004200:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	2000      	movs	r0, #0
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004204:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8004208:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800420a:	69d1      	ldr	r1, [r2, #28]
 800420c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004210:	61d1      	str	r1, [r2, #28]
 8004212:	e76f      	b.n	80040f4 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8004214:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8004216:	e9d1 0500 	ldrd	r0, r5, [r1]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800421a:	0204      	lsls	r4, r0, #8
  tmpccer = TIMx->CCER;
 800421c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421e:	6a16      	ldr	r6, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC3P);
 8004220:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004224:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004228:	f404 7400 	and.w	r4, r4, #512	; 0x200
 800422c:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 800422e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004230:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004232:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8004234:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004236:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004238:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 800423c:	4329      	orrs	r1, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800423e:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004240:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004244:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8004246:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 8004248:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800424a:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800424c:	2000      	movs	r0, #0
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800424e:	f021 010c 	bic.w	r1, r1, #12
 8004252:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004254:	69d1      	ldr	r1, [r2, #28]
 8004256:	4331      	orrs	r1, r6
 8004258:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004260:	bcf0      	pop	{r4, r5, r6, r7}
 8004262:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004264:	2002      	movs	r0, #2
}
 8004266:	4770      	bx	lr
 8004268:	40012c00 	.word	0x40012c00

0800426c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800426c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d075      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xf4>
 8004274:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004276:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004278:	2001      	movs	r0, #1
{
 800427a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800427c:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 800427e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004286:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004288:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004290:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	2b60      	cmp	r3, #96	; 0x60
 8004296:	d065      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0xf8>
 8004298:	d824      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x78>
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d07c      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0x12c>
 800429e:	d94b      	bls.n	8004338 <HAL_TIM_ConfigClockSource+0xcc>
 80042a0:	2b50      	cmp	r3, #80	; 0x50
 80042a2:	d117      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockPolarity,
 80042a6:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80042a8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80042aa:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ac:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80042b0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b2:	6a23      	ldr	r3, [r4, #32]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ba:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80042c4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80042c6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80042c8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80042d2:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80042d6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80042dc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80042e0:	bc30      	pop	{r4, r5}
 80042e2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e8:	d038      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xf0>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	d110      	bne.n	8004312 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80042f4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f6:	432b      	orrs	r3, r5
 80042f8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fa:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004302:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004304:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004306:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800430a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800430e:	60a3      	str	r3, [r4, #8]
      break;
 8004310:	e7e0      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004312:	2b70      	cmp	r3, #112	; 0x70
 8004314:	d1de      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004316:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800431a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800431c:	432b      	orrs	r3, r5
 800431e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004320:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004324:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004328:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800432a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800432c:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2000      	movs	r0, #0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004334:	60a3      	str	r3, [r4, #8]
      break;
 8004336:	e7cd      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004338:	2b20      	cmp	r3, #32
 800433a:	d002      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0xd6>
 800433c:	d90a      	bls.n	8004354 <HAL_TIM_ConfigClockSource+0xe8>
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d1c8      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004342:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8004346:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	430b      	orrs	r3, r1
 800434c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004350:	60a3      	str	r3, [r4, #8]
}
 8004352:	e7bf      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004354:	f033 0110 	bics.w	r1, r3, #16
 8004358:	d1bc      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
 800435a:	e7f2      	b.n	8004342 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2000      	movs	r0, #0
 800435e:	e7b9      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004360:	2002      	movs	r0, #2
}
 8004362:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004364:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8004366:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004368:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004370:	f021 0110 	bic.w	r1, r1, #16
 8004374:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004378:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800437c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004380:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004384:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004386:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004388:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004390:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004394:	60a3      	str	r3, [r4, #8]
}
 8004396:	e79d      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8004398:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800439c:	6a21      	ldr	r1, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2000      	movs	r0, #0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80043a4:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a6:	6a23      	ldr	r3, [r4, #32]
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80043b8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80043ba:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80043bc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80043c6:	60a3      	str	r3, [r4, #8]
}
 80043c8:	e784      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x68>
 80043ca:	bf00      	nop

080043cc <HAL_TIM_OC_DelayElapsedCallback>:
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop

080043d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop

080043d4 <HAL_TIM_TriggerCallback>:
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043d8:	6803      	ldr	r3, [r0, #0]
{
 80043da:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043dc:	691a      	ldr	r2, [r3, #16]
{
 80043de:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043e0:	0791      	lsls	r1, r2, #30
 80043e2:	d502      	bpl.n	80043ea <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	0792      	lsls	r2, r2, #30
 80043e8:	d45f      	bmi.n	80044aa <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	0750      	lsls	r0, r2, #29
 80043ee:	d502      	bpl.n	80043f6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	0751      	lsls	r1, r2, #29
 80043f4:	d446      	bmi.n	8004484 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	0712      	lsls	r2, r2, #28
 80043fa:	d502      	bpl.n	8004402 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	0710      	lsls	r0, r2, #28
 8004400:	d42e      	bmi.n	8004460 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	06d2      	lsls	r2, r2, #27
 8004406:	d502      	bpl.n	800440e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	06d0      	lsls	r0, r2, #27
 800440c:	d418      	bmi.n	8004440 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	07d1      	lsls	r1, r2, #31
 8004412:	d502      	bpl.n	800441a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	07d2      	lsls	r2, r2, #31
 8004418:	d45d      	bmi.n	80044d6 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	0610      	lsls	r0, r2, #24
 800441e:	d502      	bpl.n	8004426 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	0611      	lsls	r1, r2, #24
 8004424:	d45f      	bmi.n	80044e6 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	0652      	lsls	r2, r2, #25
 800442a:	d502      	bpl.n	8004432 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	0650      	lsls	r0, r2, #25
 8004430:	d461      	bmi.n	80044f6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	0691      	lsls	r1, r2, #26
 8004436:	d502      	bpl.n	800443e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	0692      	lsls	r2, r2, #26
 800443c:	d443      	bmi.n	80044c6 <HAL_TIM_IRQHandler+0xee>
}
 800443e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004440:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004444:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004446:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004448:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800444a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800444c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800444e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004452:	d064      	beq.n	800451e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004454:	f7fc fdec 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004458:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445c:	7722      	strb	r2, [r4, #28]
 800445e:	e7d6      	b.n	800440e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004460:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004464:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004466:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004468:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800446a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800446c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800446e:	0799      	lsls	r1, r3, #30
 8004470:	d152      	bne.n	8004518 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	f7ff ffab 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff ffaa 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800447e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	7722      	strb	r2, [r4, #28]
 8004482:	e7be      	b.n	8004402 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004484:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004488:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800448a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448e:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004490:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004492:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004496:	d13c      	bne.n	8004512 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004498:	f7ff ff98 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff ff97 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	7722      	strb	r2, [r4, #28]
 80044a8:	e7a5      	b.n	80043f6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044aa:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ae:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b0:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	079b      	lsls	r3, r3, #30
 80044b8:	d025      	beq.n	8004506 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	f7fc fdb9 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	7722      	strb	r2, [r4, #28]
 80044c4:	e791      	b.n	80043ea <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80044ca:	4620      	mov	r0, r4
}
 80044cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80044d2:	f000 b85d 	b.w	8004590 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80044da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80044de:	f7fc fdd9 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	e799      	b.n	800441a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80044ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	f000 f851 	bl	8004594 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	e797      	b.n	8004426 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80044fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044fe:	f7ff ff69 	bl	80043d4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	e795      	b.n	8004432 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	f7ff ff61 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff ff60 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004510:	e7d5      	b.n	80044be <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	f7fc fd8d 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
 8004516:	e7c4      	b.n	80044a2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004518:	f7fc fd8a 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
 800451c:	e7ae      	b.n	800447c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	f7ff ff55 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004522:	4620      	mov	r0, r4
 8004524:	f7ff ff54 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004528:	e796      	b.n	8004458 <HAL_TIM_IRQHandler+0x80>
 800452a:	bf00      	nop

0800452c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004530:	2a01      	cmp	r2, #1
 8004532:	d027      	beq.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004534:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	681a      	ldr	r2, [r3, #0]
{
 800453a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004540:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004542:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004544:	4d10      	ldr	r5, [pc, #64]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004546:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800454a:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800454e:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004550:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	d009      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004554:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004558:	d006      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800455a:	480c      	ldr	r0, [pc, #48]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800455c:	4282      	cmp	r2, r0
 800455e:	d003      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004560:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004564:	4282      	cmp	r2, r0
 8004566:	d104      	bne.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004568:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800456e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004570:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004572:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004574:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800457a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 800457e:	4610      	mov	r0, r2
}
 8004580:	bc30      	pop	{r4, r5}
 8004582:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004584:	2002      	movs	r0, #2
}
 8004586:	4770      	bx	lr
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40000400 	.word	0x40000400

08004590 <HAL_TIMEx_CommutCallback>:
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop

08004594 <HAL_TIMEx_BreakCallback>:
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004598:	2800      	cmp	r0, #0
 800459a:	d065      	beq.n	8004668 <HAL_UART_Init+0xd0>
{
 800459c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80045a2:	4604      	mov	r4, r0
 80045a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d055      	beq.n	8004658 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ac:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	2124      	movs	r1, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80045b2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80045b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80045b8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ba:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80045bc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c0:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045c2:	4302      	orrs	r2, r0
 80045c4:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 80045c6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045cc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80045d0:	4331      	orrs	r1, r6
 80045d2:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80045d4:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 80045d6:	4825      	ldr	r0, [pc, #148]	; (800466c <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 80045d8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80045dc:	f021 010c 	bic.w	r1, r1, #12
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e4:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 80045e6:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045ec:	ea42 0205 	orr.w	r2, r2, r5
 80045f0:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80045f2:	d036      	beq.n	8004662 <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7ff fb28 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f8:	6862      	ldr	r2, [r4, #4]
 80045fa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80045fe:	0092      	lsls	r2, r2, #2
 8004600:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004604:	fbb3 f3f2 	udiv	r3, r3, r2
 8004608:	f04f 0e64 	mov.w	lr, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800460e:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	4817      	ldr	r0, [pc, #92]	; (8004670 <HAL_UART_Init+0xd8>)
 8004614:	6821      	ldr	r1, [r4, #0]
 8004616:	fba0 6203 	umull	r6, r2, r0, r3
 800461a:	0952      	lsrs	r2, r2, #5
 800461c:	fb0e 3312 	mls	r3, lr, r2, r3
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	3332      	adds	r3, #50	; 0x32
 8004624:	fba0 0303 	umull	r0, r3, r0, r3
 8004628:	0112      	lsls	r2, r2, #4
 800462a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800462e:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 8004632:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004634:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004638:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463a:	694b      	ldr	r3, [r1, #20]
 800463c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004640:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 8004642:	68cb      	ldr	r3, [r1, #12]
 8004644:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004648:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464a:	6465      	str	r5, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800464c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004650:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	6365      	str	r5, [r4, #52]	; 0x34
}
 8004656:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004658:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800465c:	f7fd fa42 	bl	8001ae4 <HAL_UART_MspInit>
 8004660:	e7a4      	b.n	80045ac <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8004662:	f7ff fb01 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8004666:	e7c7      	b.n	80045f8 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8004668:	2001      	movs	r0, #1
}
 800466a:	4770      	bx	lr
 800466c:	40013800 	.word	0x40013800
 8004670:	51eb851f 	.word	0x51eb851f

08004674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004674:	b084      	sub	sp, #16
 8004676:	a801      	add	r0, sp, #4
 8004678:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800467c:	b004      	add	sp, #16
 800467e:	2000      	movs	r0, #0
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004684:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004686:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004688:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800468c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 8004690:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 8004692:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8004696:	4770      	bx	lr

08004698 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004698:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800469a:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800469e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 80046a2:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046a4:	400a      	ands	r2, r1
 80046a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 80046aa:	4770      	bx	lr

080046ac <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80046ac:	2000      	movs	r0, #0
 80046ae:	4770      	bx	lr

080046b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046b0:	b084      	sub	sp, #16
 80046b2:	f10d 0c04 	add.w	ip, sp, #4
 80046b6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80046ba:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046bc:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046be:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80046c0:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046c2:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 80046c6:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 80046c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 80046cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80046d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046d8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046da:	780a      	ldrb	r2, [r1, #0]
{
 80046dc:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046de:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80046e2:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046e6:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 80046ea:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80046ee:	0400      	lsls	r0, r0, #16
 80046f0:	0c00      	lsrs	r0, r0, #16
  switch (ep->type)
 80046f2:	f1be 0f03 	cmp.w	lr, #3
 80046f6:	f200 81a3 	bhi.w	8004a40 <USB_ActivateEndpoint+0x368>
 80046fa:	e8df f00e 	tbb	[pc, lr]
 80046fe:	d1ce      	.short	0xd1ce
 8004700:	0286      	.short	0x0286
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004702:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004706:	f248 0c80 	movw	ip, #32896	; 0x8080
 800470a:	ea40 000c 	orr.w	r0, r0, ip
 800470e:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004712:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004716:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 800471a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 800471e:	0400      	lsls	r0, r0, #16
 8004720:	0c00      	lsrs	r0, r0, #16
 8004722:	4310      	orrs	r0, r2
 8004724:	ea4c 0c00 	orr.w	ip, ip, r0
 8004728:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800472c:	7b08      	ldrb	r0, [r1, #12]
 800472e:	2800      	cmp	r0, #0
 8004730:	d07d      	beq.n	800482e <USB_ActivateEndpoint+0x156>
 8004732:	2000      	movs	r0, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004734:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8004738:	f42c 4ce2 	bic.w	ip, ip, #28928	; 0x7100
 800473c:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8004740:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004744:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004748:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 800474c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004750:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004754:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004758:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800475c:	eb03 1502 	add.w	r5, r3, r2, lsl #4
 8004760:	b2a4      	uxth	r4, r4
 8004762:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004766:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800476a:	442c      	add	r4, r5
 800476c:	f8a4 c400 	strh.w	ip, [r4, #1024]	; 0x400
 8004770:	894c      	ldrh	r4, [r1, #10]
 8004772:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8004776:	0864      	lsrs	r4, r4, #1
 8004778:	fa1f fc8c 	uxth.w	ip, ip
 800477c:	44ac      	add	ip, r5
 800477e:	0064      	lsls	r4, r4, #1
 8004780:	f8ac 4408 	strh.w	r4, [ip, #1032]	; 0x408

    if (ep->is_in == 0U)
 8004784:	7849      	ldrb	r1, [r1, #1]
 8004786:	2900      	cmp	r1, #0
 8004788:	f040 80e6 	bne.w	8004958 <USB_ActivateEndpoint+0x280>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004790:	044e      	lsls	r6, r1, #17
 8004792:	d50d      	bpl.n	80047b0 <USB_ActivateEndpoint+0xd8>
 8004794:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004798:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800479c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80047a0:	0409      	lsls	r1, r1, #16
 80047a2:	0c09      	lsrs	r1, r1, #16
 80047a4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80047a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80047ac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047b0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80047b4:	064d      	lsls	r5, r1, #25
 80047b6:	d50d      	bpl.n	80047d4 <USB_ActivateEndpoint+0xfc>
 80047b8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80047bc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80047c0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80047c4:	0409      	lsls	r1, r1, #16
 80047c6:	0c09      	lsrs	r1, r1, #16
 80047c8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80047cc:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80047d0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047d4:	f248 0480 	movw	r4, #32896	; 0x8080
 80047d8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80047dc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80047e0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80047e4:	0409      	lsls	r1, r1, #16
 80047e6:	0c09      	lsrs	r1, r1, #16
 80047e8:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80047ec:	4321      	orrs	r1, r4
 80047ee:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80047f6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80047fa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80047fe:	0409      	lsls	r1, r1, #16
 8004800:	0c09      	lsrs	r1, r1, #16
 8004802:	430c      	orrs	r4, r1
 8004804:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004808:	bd70      	pop	{r4, r5, r6, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800480a:	f248 0580 	movw	r5, #32896	; 0x8080
 800480e:	4328      	orrs	r0, r5
 8004810:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004814:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004818:	4c95      	ldr	r4, [pc, #596]	; (8004a70 <USB_ActivateEndpoint+0x398>)
 800481a:	b280      	uxth	r0, r0
 800481c:	4020      	ands	r0, r4
 800481e:	4310      	orrs	r0, r2
 8004820:	4305      	orrs	r5, r0
 8004822:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8004826:	7b08      	ldrb	r0, [r1, #12]
 8004828:	2800      	cmp	r0, #0
 800482a:	f040 80ef 	bne.w	8004a0c <USB_ActivateEndpoint+0x334>
    if (ep->is_in != 0U)
 800482e:	784c      	ldrb	r4, [r1, #1]
 8004830:	2c00      	cmp	r4, #0
 8004832:	d049      	beq.n	80048c8 <USB_ActivateEndpoint+0x1f0>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004834:	88c9      	ldrh	r1, [r1, #6]
 8004836:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800483a:	0849      	lsrs	r1, r1, #1
 800483c:	eb03 1502 	add.w	r5, r3, r2, lsl #4
 8004840:	0049      	lsls	r1, r1, #1
 8004842:	b2a4      	uxth	r4, r4
 8004844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004848:	5329      	strh	r1, [r5, r4]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800484a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800484e:	0649      	lsls	r1, r1, #25
 8004850:	d50d      	bpl.n	800486e <USB_ActivateEndpoint+0x196>
 8004852:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004856:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800485a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800485e:	0409      	lsls	r1, r1, #16
 8004860:	0c09      	lsrs	r1, r1, #16
 8004862:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004866:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800486a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800486e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004872:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004876:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800487a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800487e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8004882:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8004886:	d018      	beq.n	80048ba <USB_ActivateEndpoint+0x1e2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004888:	f081 0120 	eor.w	r1, r1, #32
 800488c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004890:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004894:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004898:	bd70      	pop	{r4, r5, r6, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800489a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
      break;
 800489e:	e732      	b.n	8004706 <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048a0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
      break;
 80048a4:	e72f      	b.n	8004706 <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048a6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048aa:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80048ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80048b2:	0409      	lsls	r1, r1, #16
 80048b4:	0c09      	lsrs	r1, r1, #16
 80048b6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80048ba:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80048be:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80048c2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048c8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80048cc:	88cd      	ldrh	r5, [r1, #6]
 80048ce:	b2a4      	uxth	r4, r4
 80048d0:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80048d4:	086d      	lsrs	r5, r5, #1
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048d6:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048d8:	006d      	lsls	r5, r5, #1
 80048da:	eb04 010c 	add.w	r1, r4, ip
 80048de:	f8a1 5408 	strh.w	r5, [r1, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048e2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80048e6:	2e3e      	cmp	r6, #62	; 0x3e
 80048e8:	b289      	uxth	r1, r1
 80048ea:	4461      	add	r1, ip
 80048ec:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 80048f0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80048f4:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 80048f8:	d876      	bhi.n	80049e8 <USB_ActivateEndpoint+0x310>
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	f040 8092 	bne.w	8004a24 <USB_ActivateEndpoint+0x34c>
 8004900:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8004904:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004908:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800490c:	b2a4      	uxth	r4, r4
 800490e:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004912:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004916:	0449      	lsls	r1, r1, #17
 8004918:	d50d      	bpl.n	8004936 <USB_ActivateEndpoint+0x25e>
 800491a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800491e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004922:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004926:	0409      	lsls	r1, r1, #16
 8004928:	0c09      	lsrs	r1, r1, #16
 800492a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800492e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004932:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8004936:	2a00      	cmp	r2, #0
 8004938:	d1b5      	bne.n	80048a6 <USB_ActivateEndpoint+0x1ce>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800493a:	881a      	ldrh	r2, [r3, #0]
 800493c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004940:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004944:	0412      	lsls	r2, r2, #16
 8004946:	0c12      	lsrs	r2, r2, #16
 8004948:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800494c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004954:	801a      	strh	r2, [r3, #0]
}
 8004956:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004958:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800495c:	044c      	lsls	r4, r1, #17
 800495e:	d50d      	bpl.n	800497c <USB_ActivateEndpoint+0x2a4>
 8004960:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004964:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004968:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800496c:	0409      	lsls	r1, r1, #16
 800496e:	0c09      	lsrs	r1, r1, #16
 8004970:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004974:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004978:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800497c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004980:	0649      	lsls	r1, r1, #25
 8004982:	d50d      	bpl.n	80049a0 <USB_ActivateEndpoint+0x2c8>
 8004984:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004988:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800498c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004990:	0409      	lsls	r1, r1, #16
 8004992:	0c09      	lsrs	r1, r1, #16
 8004994:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004998:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800499c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80049a4:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80049ac:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80049b0:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80049b4:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80049b8:	bf18      	it	ne
 80049ba:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049be:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80049c2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80049c6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049ce:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80049d2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80049d6:	0409      	lsls	r1, r1, #16
 80049d8:	0c09      	lsrs	r1, r1, #16
 80049da:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80049de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80049e2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049e8:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 80049ec:	0975      	lsrs	r5, r6, #5
 80049ee:	06f6      	lsls	r6, r6, #27
 80049f0:	bf08      	it	eq
 80049f2:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 80049f6:	b2a4      	uxth	r4, r4
 80049f8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80049fc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004a00:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004a04:	b2a4      	uxth	r4, r4
 8004a06:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8004a0a:	e782      	b.n	8004912 <USB_ActivateEndpoint+0x23a>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a0c:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004a10:	b280      	uxth	r0, r0
 8004a12:	4020      	ands	r0, r4
 8004a14:	f440 4001 	orr.w	r0, r0, #33024	; 0x8100
 8004a18:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004a1c:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
 8004a20:	2000      	movs	r0, #0
 8004a22:	e697      	b.n	8004754 <USB_ActivateEndpoint+0x7c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a24:	07f4      	lsls	r4, r6, #31
 8004a26:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8004a2a:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8004a2e:	bf48      	it	mi
 8004a30:	3501      	addmi	r5, #1
 8004a32:	b2a4      	uxth	r4, r4
 8004a34:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004a38:	b2a4      	uxth	r4, r4
 8004a3a:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8004a3e:	e768      	b.n	8004912 <USB_ActivateEndpoint+0x23a>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a40:	f248 0480 	movw	r4, #32896	; 0x8080
 8004a44:	4320      	orrs	r0, r4
 8004a46:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a4a:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004a4e:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8004a52:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8004a56:	0400      	lsls	r0, r0, #16
 8004a58:	0c00      	lsrs	r0, r0, #16
 8004a5a:	4310      	orrs	r0, r2
 8004a5c:	4304      	orrs	r4, r0
 8004a5e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8004a62:	7b08      	ldrb	r0, [r1, #12]
 8004a64:	b908      	cbnz	r0, 8004a6a <USB_ActivateEndpoint+0x392>
 8004a66:	2001      	movs	r0, #1
 8004a68:	e6e1      	b.n	800482e <USB_ActivateEndpoint+0x156>
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	e662      	b.n	8004734 <USB_ActivateEndpoint+0x5c>
 8004a6e:	bf00      	nop
 8004a70:	ffff8f8f 	.word	0xffff8f8f

08004a74 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004a74:	7b0b      	ldrb	r3, [r1, #12]
 8004a76:	b9cb      	cbnz	r3, 8004aac <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8004a78:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a7a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80b1 	beq.w	8004be4 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a86:	0659      	lsls	r1, r3, #25
 8004a88:	f100 80c5 	bmi.w	8004c16 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	4770      	bx	lr
    if (ep->is_in == 0U)
 8004aac:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aae:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d14b      	bne.n	8004b4c <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ab4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ab8:	0459      	lsls	r1, r3, #17
 8004aba:	d50d      	bpl.n	8004ad8 <USB_DeactivateEndpoint+0x64>
 8004abc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ad8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004adc:	065b      	lsls	r3, r3, #25
 8004ade:	d50d      	bpl.n	8004afc <USB_DeactivateEndpoint+0x88>
 8004ae0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004af8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004afc:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004b00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	4319      	orrs	r1, r3
 8004b44:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
}
 8004b48:	2000      	movs	r0, #0
 8004b4a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b50:	0459      	lsls	r1, r3, #17
 8004b52:	d50d      	bpl.n	8004b70 <USB_DeactivateEndpoint+0xfc>
 8004b54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b74:	065b      	lsls	r3, r3, #25
 8004b76:	d50d      	bpl.n	8004b94 <USB_DeactivateEndpoint+0x120>
 8004b78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	0c1b      	lsrs	r3, r3, #16
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b94:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004b98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	4319      	orrs	r1, r3
 8004bdc:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
}
 8004be0:	2000      	movs	r0, #0
 8004be2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004be8:	045b      	lsls	r3, r3, #17
 8004bea:	d50d      	bpl.n	8004c08 <USB_DeactivateEndpoint+0x194>
 8004bec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c14:	e740      	b.n	8004a98 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004c32:	e72b      	b.n	8004a8c <USB_DeactivateEndpoint+0x18>

08004c34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c38:	784b      	ldrb	r3, [r1, #1]
{
 8004c3a:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f000 808b 	beq.w	8004d58 <USB_EPStartXfer+0x124>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c42:	7b08      	ldrb	r0, [r1, #12]
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d04c      	beq.n	8004ce2 <USB_EPStartXfer+0xae>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c48:	78c8      	ldrb	r0, [r1, #3]
 8004c4a:	2802      	cmp	r0, #2
 8004c4c:	f000 8119 	beq.w	8004e82 <USB_EPStartXfer+0x24e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004c50:	2801      	cmp	r0, #1
 8004c52:	f040 80f2 	bne.w	8004e3a <USB_EPStartXfer+0x206>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004c56:	6988      	ldr	r0, [r1, #24]
 8004c58:	690c      	ldr	r4, [r1, #16]
 8004c5a:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8004c5c:	bf94      	ite	ls
 8004c5e:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 8004c60:	1b05      	subhi	r5, r0, r4
 8004c62:	618d      	str	r5, [r1, #24]
 8004c64:	bf88      	it	hi
 8004c66:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8107 	bne.w	8004e7c <USB_EPStartXfer+0x248>
 8004c6e:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8004c72:	780b      	ldrb	r3, [r1, #0]
 8004c74:	b2ad      	uxth	r5, r5
 8004c76:	f202 4404 	addw	r4, r2, #1028	; 0x404
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	442c      	add	r4, r5
 8004c7e:	5ae5      	ldrh	r5, [r4, r3]
 8004c80:	283e      	cmp	r0, #62	; 0x3e
 8004c82:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004c86:	52e5      	strh	r5, [r4, r3]
 8004c88:	f240 8224 	bls.w	80050d4 <USB_EPStartXfer+0x4a0>
 8004c8c:	0946      	lsrs	r6, r0, #5
 8004c8e:	4637      	mov	r7, r6
 8004c90:	5ae5      	ldrh	r5, [r4, r3]
 8004c92:	f010 001f 	ands.w	r0, r0, #31
 8004c96:	bf08      	it	eq
 8004c98:	f106 37ff 	addeq.w	r7, r6, #4294967295	; 0xffffffff
 8004c9c:	b2ad      	uxth	r5, r5
 8004c9e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8004ca2:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8004ca6:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8004caa:	f202 4c0c 	addw	ip, r2, #1036	; 0x40c
 8004cae:	b2ad      	uxth	r5, r5
 8004cb0:	52e5      	strh	r5, [r4, r3]
 8004cb2:	4664      	mov	r4, ip
 8004cb4:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8004cb8:	b2ad      	uxth	r5, r5
 8004cba:	442c      	add	r4, r5
 8004cbc:	5ae5      	ldrh	r5, [r4, r3]
 8004cbe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004cc2:	52e5      	strh	r5, [r4, r3]
 8004cc4:	b900      	cbnz	r0, 8004cc8 <USB_EPStartXfer+0x94>
 8004cc6:	3e01      	subs	r6, #1
 8004cc8:	5ae0      	ldrh	r0, [r4, r3]
 8004cca:	b280      	uxth	r0, r0
 8004ccc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004cd0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8004cd4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8004cd8:	b280      	uxth	r0, r0
 8004cda:	52e0      	strh	r0, [r4, r3]
 8004cdc:	f891 c000 	ldrb.w	ip, [r1]
 8004ce0:	e027      	b.n	8004d32 <USB_EPStartXfer+0xfe>
      if (ep->xfer_len > ep->maxpacket)
 8004ce2:	698c      	ldr	r4, [r1, #24]
 8004ce4:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ce6:	f891 c000 	ldrb.w	ip, [r1]
      if (ep->xfer_len > ep->maxpacket)
 8004cea:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 8004cec:	bf84      	itt	hi
 8004cee:	1ae0      	subhi	r0, r4, r3
 8004cf0:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cf2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8004cf6:	6188      	str	r0, [r1, #24]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8004cfe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004d02:	4418      	add	r0, r3
 8004d04:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8004d08:	2c3e      	cmp	r4, #62	; 0x3e
 8004d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0e:	f82c 3000 	strh.w	r3, [ip, r0]
 8004d12:	f200 8086 	bhi.w	8004e22 <USB_EPStartXfer+0x1ee>
 8004d16:	2c00      	cmp	r4, #0
 8004d18:	f040 810e 	bne.w	8004f38 <USB_EPStartXfer+0x304>
 8004d1c:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8004d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f82c 3000 	strh.w	r3, [ip, r0]
 8004d2e:	f891 c000 	ldrb.w	ip, [r1]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d32:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 8004d36:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d50:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 8004d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004d58:	690c      	ldr	r4, [r1, #16]
 8004d5a:	698b      	ldr	r3, [r1, #24]
    if (ep->doublebuffer == 0U)
 8004d5c:	7b08      	ldrb	r0, [r1, #12]
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	bf28      	it	cs
 8004d62:	4623      	movcs	r3, r4
 8004d64:	b348      	cbz	r0, 8004dba <USB_EPStartXfer+0x186>
      if (ep->type == EP_TYPE_BULK)
 8004d66:	78c8      	ldrb	r0, [r1, #3]
 8004d68:	2802      	cmp	r0, #2
 8004d6a:	f000 80f5 	beq.w	8004f58 <USB_EPStartXfer+0x324>
        ep->xfer_len_db -= len;
 8004d6e:	6a0c      	ldr	r4, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d70:	7808      	ldrb	r0, [r1, #0]
        ep->xfer_len_db -= len;
 8004d72:	1ae4      	subs	r4, r4, r3
 8004d74:	620c      	str	r4, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d76:	f832 4020 	ldrh.w	r4, [r2, r0, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d7a:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d7e:	0666      	lsls	r6, r4, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d80:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8004d84:	b2ad      	uxth	r5, r5
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d86:	f140 8144 	bpl.w	8005012 <USB_EPStartXfer+0x3de>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d8a:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8004d8e:	442c      	add	r4, r5
 8004d90:	b29d      	uxth	r5, r3
 8004d92:	5225      	strh	r5, [r4, r0]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d94:	b29b      	uxth	r3, r3
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d96:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d98:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d9a:	f502 6080 	add.w	r0, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8004d9e:	085b      	lsrs	r3, r3, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004da0:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004da2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (count = n; count != 0U; count--)
 8004da6:	d028      	beq.n	8004dfa <USB_EPStartXfer+0x1c6>
 8004da8:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004dac:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004db0:	f820 3b04 	strh.w	r3, [r0], #4
  for (count = n; count != 0U; count--)
 8004db4:	4584      	cmp	ip, r0
 8004db6:	d1f9      	bne.n	8004dac <USB_EPStartXfer+0x178>
 8004db8:	e01f      	b.n	8004dfa <USB_EPStartXfer+0x1c6>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dba:	b29c      	uxth	r4, r3
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004dbc:	f8b1 c006 	ldrh.w	ip, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004dc0:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004dc4:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8004dc8:	eb03 034c 	add.w	r3, r3, ip, lsl #1
  for (count = n; count != 0U; count--)
 8004dcc:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dd0:	6948      	ldr	r0, [r1, #20]
  for (count = n; count != 0U; count--)
 8004dd2:	bf18      	it	ne
 8004dd4:	eb03 0e8e 	addne.w	lr, r3, lr, lsl #2
 8004dd8:	d005      	beq.n	8004de6 <USB_EPStartXfer+0x1b2>
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004dda:	f830 cb02 	ldrh.w	ip, [r0], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004dde:	f823 cb04 	strh.w	ip, [r3], #4
  for (count = n; count != 0U; count--)
 8004de2:	4573      	cmp	r3, lr
 8004de4:	d1f9      	bne.n	8004dda <USB_EPStartXfer+0x1a6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004de6:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 8004dea:	7808      	ldrb	r0, [r1, #0]
 8004dec:	fa1f fc8c 	uxth.w	ip, ip
 8004df0:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8004df4:	0100      	lsls	r0, r0, #4
 8004df6:	4463      	add	r3, ip
 8004df8:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004dfa:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 8004dfc:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004dfe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8004e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004e22:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8004e26:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 8004e2a:	06e4      	lsls	r4, r4, #27
 8004e2c:	bf08      	it	eq
 8004e2e:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8004e38:	e772      	b.n	8004d20 <USB_EPStartXfer+0xec>
        return HAL_ERROR;
 8004e3a:	2001      	movs	r0, #1
}
 8004e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004e40:	0846      	lsrs	r6, r0, #1
 8004e42:	4637      	mov	r7, r6
 8004e44:	5ae5      	ldrh	r5, [r4, r3]
 8004e46:	f010 0001 	ands.w	r0, r0, #1
 8004e4a:	bf18      	it	ne
 8004e4c:	1c77      	addne	r7, r6, #1
 8004e4e:	b2ad      	uxth	r5, r5
 8004e50:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8004e54:	b2ad      	uxth	r5, r5
 8004e56:	52e5      	strh	r5, [r4, r3]
 8004e58:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8004e5c:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8004e60:	b2ad      	uxth	r5, r5
 8004e62:	442c      	add	r4, r5
 8004e64:	5ae5      	ldrh	r5, [r4, r3]
 8004e66:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e6a:	52e5      	strh	r5, [r4, r3]
 8004e6c:	b100      	cbz	r0, 8004e70 <USB_EPStartXfer+0x23c>
 8004e6e:	3601      	adds	r6, #1
 8004e70:	5ae0      	ldrh	r0, [r4, r3]
 8004e72:	b280      	uxth	r0, r0
 8004e74:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004e78:	b280      	uxth	r0, r0
 8004e7a:	52e0      	strh	r0, [r4, r3]
 8004e7c:	f891 c000 	ldrb.w	ip, [r1]
 8004e80:	e757      	b.n	8004d32 <USB_EPStartXfer+0xfe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d137      	bne.n	8004ef6 <USB_EPStartXfer+0x2c2>
 8004e86:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8004e8a:	780b      	ldrb	r3, [r1, #0]
 8004e8c:	b2a4      	uxth	r4, r4
 8004e8e:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	4420      	add	r0, r4
 8004e96:	5ac4      	ldrh	r4, [r0, r3]
 8004e98:	690d      	ldr	r5, [r1, #16]
 8004e9a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004e9e:	2d3e      	cmp	r5, #62	; 0x3e
 8004ea0:	52c4      	strh	r4, [r0, r3]
 8004ea2:	f240 80fb 	bls.w	800509c <USB_EPStartXfer+0x468>
 8004ea6:	096e      	lsrs	r6, r5, #5
 8004ea8:	4637      	mov	r7, r6
 8004eaa:	5ac4      	ldrh	r4, [r0, r3]
 8004eac:	f015 051f 	ands.w	r5, r5, #31
 8004eb0:	bf08      	it	eq
 8004eb2:	f106 37ff 	addeq.w	r7, r6, #4294967295	; 0xffffffff
 8004eb6:	b2a4      	uxth	r4, r4
 8004eb8:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8004ebc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004ec0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004ec4:	f202 4c0c 	addw	ip, r2, #1036	; 0x40c
 8004ec8:	b2a4      	uxth	r4, r4
 8004eca:	52c4      	strh	r4, [r0, r3]
 8004ecc:	4664      	mov	r4, ip
 8004ece:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8004ed2:	b280      	uxth	r0, r0
 8004ed4:	4404      	add	r4, r0
 8004ed6:	5ae0      	ldrh	r0, [r4, r3]
 8004ed8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004edc:	52e0      	strh	r0, [r4, r3]
 8004ede:	b905      	cbnz	r5, 8004ee2 <USB_EPStartXfer+0x2ae>
 8004ee0:	3e01      	subs	r6, #1
 8004ee2:	5ae0      	ldrh	r0, [r4, r3]
 8004ee4:	b280      	uxth	r0, r0
 8004ee6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004eea:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8004eee:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8004ef2:	b280      	uxth	r0, r0
 8004ef4:	52e0      	strh	r0, [r4, r3]
        if (ep->xfer_count != 0U)
 8004ef6:	69cb      	ldr	r3, [r1, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0bf      	beq.n	8004e7c <USB_EPStartXfer+0x248>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004efc:	f244 0340 	movw	r3, #16448	; 0x4040
 8004f00:	f891 c000 	ldrb.w	ip, [r1]
 8004f04:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f08:	ea03 0400 	and.w	r4, r3, r0
 8004f0c:	4383      	bics	r3, r0
 8004f0e:	d002      	beq.n	8004f16 <USB_EPStartXfer+0x2e2>
 8004f10:	2c00      	cmp	r4, #0
 8004f12:	f47f af0e 	bne.w	8004d32 <USB_EPStartXfer+0xfe>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f16:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f2e:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 8004f32:	f891 c000 	ldrb.w	ip, [r1]
 8004f36:	e6fc      	b.n	8004d32 <USB_EPStartXfer+0xfe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f38:	07e3      	lsls	r3, r4, #31
 8004f3a:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8004f3e:	ea4f 0554 	mov.w	r5, r4, lsr #1
 8004f42:	bf48      	it	mi
 8004f44:	3501      	addmi	r5, #1
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f82c 3000 	strh.w	r3, [ip, r0]
 8004f52:	f891 c000 	ldrb.w	ip, [r1]
 8004f56:	e6ec      	b.n	8004d32 <USB_EPStartXfer+0xfe>
        if (ep->xfer_len_db > ep->maxpacket)
 8004f58:	6a08      	ldr	r0, [r1, #32]
 8004f5a:	4284      	cmp	r4, r0
 8004f5c:	d272      	bcs.n	8005044 <USB_EPStartXfer+0x410>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f5e:	780d      	ldrb	r5, [r1, #0]
          ep->xfer_len_db -= len;
 8004f60:	1ac0      	subs	r0, r0, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f62:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f66:	ea4f 1905 	mov.w	r9, r5, lsl #4
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f6a:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8004f6e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8004f72:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004f76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004f7a:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8004f7e:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004f82:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f86:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 8004f8a:	6208      	str	r0, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f8c:	f016 0f40 	tst.w	r6, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f90:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 8004f94:	b2b6      	uxth	r6, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f96:	f000 80bb 	beq.w	8005110 <USB_EPStartXfer+0x4dc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f9a:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 8004f9e:	4435      	add	r5, r6
 8004fa0:	fa1f fa83 	uxth.w	sl, r3
 8004fa4:	f825 a009 	strh.w	sl, [r5, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004fa8:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004faa:	f10a 0801 	add.w	r8, sl, #1
 8004fae:	f502 6680 	add.w	r6, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8004fb2:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fb6:	f8d1 c014 	ldr.w	ip, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004fba:	eb06 0545 	add.w	r5, r6, r5, lsl #1
  for (count = n; count != 0U; count--)
 8004fbe:	d008      	beq.n	8004fd2 <USB_EPStartXfer+0x39e>
  uint8_t *pBuf = pbUsrBuf;
 8004fc0:	46e6      	mov	lr, ip
 8004fc2:	eb0c 0b48 	add.w	fp, ip, r8, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004fc6:	f83e 7b02 	ldrh.w	r7, [lr], #2
  for (count = n; count != 0U; count--)
 8004fca:	45f3      	cmp	fp, lr
    *pdwVal = (WrVal & 0xFFFFU);
 8004fcc:	f825 7b04 	strh.w	r7, [r5], #4
  for (count = n; count != 0U; count--)
 8004fd0:	d1f9      	bne.n	8004fc6 <USB_EPStartXfer+0x392>
            ep->xfer_buff += len;
 8004fd2:	eb0c 0503 	add.w	r5, ip, r3
            if (ep->xfer_len_db > ep->maxpacket)
 8004fd6:	4284      	cmp	r4, r0
            ep->xfer_buff += len;
 8004fd8:	614d      	str	r5, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004fda:	f080 80f9 	bcs.w	80051d0 <USB_EPStartXfer+0x59c>
              ep->xfer_len_db -= len;
 8004fde:	1ac0      	subs	r0, r0, r3
 8004fe0:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fe2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8004fe6:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8004fea:	b280      	uxth	r0, r0
 8004fec:	4403      	add	r3, r0
 8004fee:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004ff2:	890b      	ldrh	r3, [r1, #8]
 8004ff4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  for (count = n; count != 0U; count--)
 8004ff8:	f1b8 0f00 	cmp.w	r8, #0
 8004ffc:	f43f aefd 	beq.w	8004dfa <USB_EPStartXfer+0x1c6>
 8005000:	eb05 0448 	add.w	r4, r5, r8, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005004:	f835 0b02 	ldrh.w	r0, [r5], #2
  for (count = n; count != 0U; count--)
 8005008:	42ac      	cmp	r4, r5
    *pdwVal = (WrVal & 0xFFFFU);
 800500a:	f823 0b04 	strh.w	r0, [r3], #4
  for (count = n; count != 0U; count--)
 800500e:	d1f9      	bne.n	8005004 <USB_EPStartXfer+0x3d0>
 8005010:	e6f3      	b.n	8004dfa <USB_EPStartXfer+0x1c6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005012:	f202 4404 	addw	r4, r2, #1028	; 0x404
 8005016:	442c      	add	r4, r5
 8005018:	b29d      	uxth	r5, r3
 800501a:	5225      	strh	r5, [r4, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800501c:	b29b      	uxth	r3, r3
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800501e:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005020:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005022:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005026:	085b      	lsrs	r3, r3, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005028:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800502a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (count = n; count != 0U; count--)
 800502e:	f43f aee4 	beq.w	8004dfa <USB_EPStartXfer+0x1c6>
 8005032:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005036:	f834 cb02 	ldrh.w	ip, [r4], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800503a:	f820 cb04 	strh.w	ip, [r0], #4
  for (count = n; count != 0U; count--)
 800503e:	4298      	cmp	r0, r3
 8005040:	d1f9      	bne.n	8005036 <USB_EPStartXfer+0x402>
 8005042:	e6da      	b.n	8004dfa <USB_EPStartXfer+0x1c6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005044:	780c      	ldrb	r4, [r1, #0]
 8005046:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800504a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005062:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8005066:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800506a:	b2ad      	uxth	r5, r5
 800506c:	442b      	add	r3, r5
 800506e:	0124      	lsls	r4, r4, #4
 8005070:	b285      	uxth	r5, r0
 8005072:	531d      	strh	r5, [r3, r4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005074:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005076:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005078:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800507a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800507e:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005080:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005082:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (count = n; count != 0U; count--)
 8005086:	f43f aeb8 	beq.w	8004dfa <USB_EPStartXfer+0x1c6>
 800508a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 800508e:	f834 cb02 	ldrh.w	ip, [r4], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005092:	f823 cb04 	strh.w	ip, [r3], #4
  for (count = n; count != 0U; count--)
 8005096:	4298      	cmp	r0, r3
 8005098:	d1f9      	bne.n	800508e <USB_EPStartXfer+0x45a>
 800509a:	e6ae      	b.n	8004dfa <USB_EPStartXfer+0x1c6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800509c:	2d00      	cmp	r5, #0
 800509e:	d170      	bne.n	8005182 <USB_EPStartXfer+0x54e>
 80050a0:	5ac5      	ldrh	r5, [r0, r3]
 80050a2:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 80050a6:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80050aa:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80050ae:	b2ad      	uxth	r5, r5
 80050b0:	52c5      	strh	r5, [r0, r3]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 80050b8:	b2ad      	uxth	r5, r5
 80050ba:	4428      	add	r0, r5
 80050bc:	5ac4      	ldrh	r4, [r0, r3]
 80050be:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80050c2:	52c4      	strh	r4, [r0, r3]
 80050c4:	5ac4      	ldrh	r4, [r0, r3]
 80050c6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80050ca:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80050ce:	b2a4      	uxth	r4, r4
 80050d0:	52c4      	strh	r4, [r0, r3]
 80050d2:	e710      	b.n	8004ef6 <USB_EPStartXfer+0x2c2>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f47f aeb3 	bne.w	8004e40 <USB_EPStartXfer+0x20c>
 80050da:	5ae5      	ldrh	r5, [r4, r3]
 80050dc:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80050e0:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80050e4:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80050e8:	b2ad      	uxth	r5, r5
 80050ea:	52e5      	strh	r5, [r4, r3]
 80050ec:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 80050f0:	b2a4      	uxth	r4, r4
 80050f2:	4420      	add	r0, r4
 80050f4:	5ac4      	ldrh	r4, [r0, r3]
 80050f6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80050fa:	52c4      	strh	r4, [r0, r3]
 80050fc:	5ac4      	ldrh	r4, [r0, r3]
 80050fe:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005102:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005106:	b2a4      	uxth	r4, r4
 8005108:	52c4      	strh	r4, [r0, r3]
 800510a:	f891 c000 	ldrb.w	ip, [r1]
 800510e:	e610      	b.n	8004d32 <USB_EPStartXfer+0xfe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005110:	f202 4504 	addw	r5, r2, #1028	; 0x404
 8005114:	4435      	add	r5, r6
 8005116:	fa1f fa83 	uxth.w	sl, r3
 800511a:	f825 a009 	strh.w	sl, [r5, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800511e:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005120:	f10a 0801 	add.w	r8, sl, #1
 8005124:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005128:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512c:	694d      	ldr	r5, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800512e:	eb0c 0646 	add.w	r6, ip, r6, lsl #1
  for (count = n; count != 0U; count--)
 8005132:	d008      	beq.n	8005146 <USB_EPStartXfer+0x512>
  uint8_t *pBuf = pbUsrBuf;
 8005134:	46ae      	mov	lr, r5
 8005136:	eb05 0b48 	add.w	fp, r5, r8, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 800513a:	f83e 7b02 	ldrh.w	r7, [lr], #2
  for (count = n; count != 0U; count--)
 800513e:	45f3      	cmp	fp, lr
    *pdwVal = (WrVal & 0xFFFFU);
 8005140:	f826 7b04 	strh.w	r7, [r6], #4
  for (count = n; count != 0U; count--)
 8005144:	d1f9      	bne.n	800513a <USB_EPStartXfer+0x506>
            ep->xfer_buff += len;
 8005146:	441d      	add	r5, r3
            if (ep->xfer_len_db > ep->maxpacket)
 8005148:	4284      	cmp	r4, r0
            ep->xfer_buff += len;
 800514a:	614d      	str	r5, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800514c:	d238      	bcs.n	80051c0 <USB_EPStartXfer+0x58c>
              ep->xfer_len_db -= len;
 800514e:	1ac0      	subs	r0, r0, r3
 8005150:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005152:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8005156:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800515a:	b280      	uxth	r0, r0
 800515c:	4403      	add	r3, r0
 800515e:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005162:	894b      	ldrh	r3, [r1, #10]
 8005164:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
  for (count = n; count != 0U; count--)
 8005168:	f1b8 0f00 	cmp.w	r8, #0
 800516c:	f43f ae45 	beq.w	8004dfa <USB_EPStartXfer+0x1c6>
 8005170:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005174:	f835 0b02 	ldrh.w	r0, [r5], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005178:	f823 0b04 	strh.w	r0, [r3], #4
  for (count = n; count != 0U; count--)
 800517c:	429c      	cmp	r4, r3
 800517e:	d1f9      	bne.n	8005174 <USB_EPStartXfer+0x540>
 8005180:	e63b      	b.n	8004dfa <USB_EPStartXfer+0x1c6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005182:	086e      	lsrs	r6, r5, #1
 8005184:	4637      	mov	r7, r6
 8005186:	f015 0401 	ands.w	r4, r5, #1
 800518a:	5ac5      	ldrh	r5, [r0, r3]
 800518c:	bf18      	it	ne
 800518e:	1c77      	addne	r7, r6, #1
 8005190:	b2ad      	uxth	r5, r5
 8005192:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005196:	b2ad      	uxth	r5, r5
 8005198:	52c5      	strh	r5, [r0, r3]
 800519a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800519e:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 80051a2:	b280      	uxth	r0, r0
 80051a4:	4405      	add	r5, r0
 80051a6:	5ae8      	ldrh	r0, [r5, r3]
 80051a8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80051ac:	52e8      	strh	r0, [r5, r3]
 80051ae:	b104      	cbz	r4, 80051b2 <USB_EPStartXfer+0x57e>
 80051b0:	3601      	adds	r6, #1
 80051b2:	5ae8      	ldrh	r0, [r5, r3]
 80051b4:	b280      	uxth	r0, r0
 80051b6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80051ba:	b280      	uxth	r0, r0
 80051bc:	52e8      	strh	r0, [r5, r3]
 80051be:	e69a      	b.n	8004ef6 <USB_EPStartXfer+0x2c2>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051c0:	b284      	uxth	r4, r0
 80051c2:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051c4:	fa1f fa80 	uxth.w	sl, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051c8:	ea4f 0854 	mov.w	r8, r4, lsr #1
              ep->xfer_len_db = 0U;
 80051cc:	2000      	movs	r0, #0
 80051ce:	e7bf      	b.n	8005150 <USB_EPStartXfer+0x51c>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051d0:	b284      	uxth	r4, r0
 80051d2:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051d4:	fa1f fa80 	uxth.w	sl, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051d8:	ea4f 0854 	mov.w	r8, r4, lsr #1
              ep->xfer_len_db = 0U;
 80051dc:	2000      	movs	r0, #0
 80051de:	e6ff      	b.n	8004fe0 <USB_EPStartXfer+0x3ac>

080051e0 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 80051e0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80051e2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80051e4:	b18b      	cbz	r3, 800520a <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80051e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	f083 0310 	eor.w	r3, r3, #16
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005206:	2000      	movs	r0, #0
 8005208:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800520a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800520e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005226:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800522a:	2000      	movs	r0, #0
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8005230:	7b0b      	ldrb	r3, [r1, #12]
 8005232:	bb3b      	cbnz	r3, 8005284 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8005234:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005236:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005238:	b333      	cbz	r3, 8005288 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800523a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800523e:	065b      	lsls	r3, r3, #25
 8005240:	d50d      	bpl.n	800525e <USB_EPClearStall+0x2e>
 8005242:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800525a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800525e:	78cb      	ldrb	r3, [r1, #3]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d00f      	beq.n	8005284 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005264:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	0c1b      	lsrs	r3, r3, #16
 8005274:	f083 0320 	eor.w	r3, r3, #32
 8005278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005284:	2000      	movs	r0, #0
 8005286:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005288:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800528c:	045b      	lsls	r3, r3, #17
 800528e:	d50d      	bpl.n	80052ac <USB_EPClearStall+0x7c>
 8005290:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80052cc:	2000      	movs	r0, #0
 80052ce:	4770      	bx	lr

080052d0 <USB_SetDevAddress>:
  if (address == 0U)
 80052d0:	b911      	cbnz	r1, 80052d8 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80052d8:	2000      	movs	r0, #0
 80052da:	4770      	bx	lr

080052dc <USB_DevConnect>:
 80052dc:	2000      	movs	r0, #0
 80052de:	4770      	bx	lr

080052e0 <USB_DevDisconnect>:
 80052e0:	2000      	movs	r0, #0
 80052e2:	4770      	bx	lr

080052e4 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80052e4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80052e8:	b280      	uxth	r0, r0
 80052ea:	4770      	bx	lr

080052ec <USB_EP0_OutStart>:
}
 80052ec:	2000      	movs	r0, #0
 80052ee:	4770      	bx	lr

080052f0 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80052f0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (count = n; count != 0U; count--)
 80052f6:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80052fc:	d007      	beq.n	800530e <USB_WritePMA+0x1e>
 80052fe:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005302:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005306:	f820 3b04 	strh.w	r3, [r0], #4
  for (count = n; count != 0U; count--)
 800530a:	4282      	cmp	r2, r0
 800530c:	d1f9      	bne.n	8005302 <USB_WritePMA+0x12>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800530e:	4770      	bx	lr

08005310 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005310:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005312:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (count = n; count != 0U; count--)
 8005316:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005318:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800531c:	d014      	beq.n	8005348 <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800531e:	4628      	mov	r0, r5
  for (count = n; count != 0U; count--)
 8005320:	46b6      	mov	lr, r6
 8005322:	f101 0c02 	add.w	ip, r1, #2
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005326:	f830 2b04 	ldrh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800532a:	f10c 0c02 	add.w	ip, ip, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 800532e:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005330:	0a14      	lsrs	r4, r2, #8
  for (count = n; count != 0U; count--)
 8005332:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005336:	f80c 2c04 	strb.w	r2, [ip, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800533a:	f80c 4c03 	strb.w	r4, [ip, #-3]
  for (count = n; count != 0U; count--)
 800533e:	d1f2      	bne.n	8005326 <USB_ReadPMA+0x16>
    pBuf++;
 8005340:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8005344:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005348:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800534a:	bf44      	itt	mi
 800534c:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800534e:	700b      	strbmi	r3, [r1, #0]
  }
}
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	bf00      	nop

08005354 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005354:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005358:	b183      	cbz	r3, 800537c <USBD_CDC_EP0_RxReady+0x28>
{
 800535a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800535c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005360:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005364:	28ff      	cmp	r0, #255	; 0xff
 8005366:	d007      	beq.n	8005378 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4621      	mov	r1, r4
 800536c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005370:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005372:	23ff      	movs	r3, #255	; 0xff
 8005374:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005378:	2000      	movs	r0, #0
 800537a:	bd10      	pop	{r4, pc}
 800537c:	2000      	movs	r0, #0
 800537e:	4770      	bx	lr

08005380 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005380:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005382:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005386:	801a      	strh	r2, [r3, #0]
}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000054 	.word	0x20000054

08005390 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005390:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005392:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005396:	801a      	strh	r2, [r3, #0]
}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000098 	.word	0x20000098

080053a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053a0:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053a2:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053a6:	801a      	strh	r2, [r3, #0]
}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	200000e8 	.word	0x200000e8

080053b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053b0:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80053b2:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80053b6:	801a      	strh	r2, [r3, #0]
}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	200000dc 	.word	0x200000dc

080053c0 <USBD_CDC_DataOut>:
{
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053c4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053c8:	f001 f80c 	bl	80063e4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80053cc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053d0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80053d4:	b14b      	cbz	r3, 80053ea <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053d6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80053da:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80053e4:	4798      	blx	r3
    return USBD_OK;
 80053e6:	2000      	movs	r0, #0
}
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80053ea:	2002      	movs	r0, #2
}
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
 80053ee:	bf00      	nop

080053f0 <USBD_CDC_DataIn>:
{
 80053f0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053f2:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80053f6:	b1ed      	cbz	r5, 8005434 <USBD_CDC_DataIn+0x44>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053f8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80053fc:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8005400:	f8dc 201c 	ldr.w	r2, [ip, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005404:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005408:	b13a      	cbz	r2, 800541a <USBD_CDC_DataIn+0x2a>
 800540a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800540e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005410:	fbb2 f4f3 	udiv	r4, r2, r3
 8005414:	fb03 2414 	mls	r4, r3, r4, r2
 8005418:	b124      	cbz	r4, 8005424 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800541a:	2300      	movs	r3, #0
    return USBD_OK;
 800541c:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800541e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 8005422:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005424:	4623      	mov	r3, r4
 8005426:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8005428:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800542c:	f000 ffbe 	bl	80063ac <USBD_LL_Transmit>
    return USBD_OK;
 8005430:	4620      	mov	r0, r4
}
 8005432:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005434:	2002      	movs	r0, #2
}
 8005436:	bd38      	pop	{r3, r4, r5, pc}

08005438 <USBD_CDC_Setup>:
{
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800543c:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800543e:	780b      	ldrb	r3, [r1, #0]
{
 8005440:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005442:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 8005446:	460c      	mov	r4, r1
 8005448:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800544a:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800544e:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8005452:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005456:	d013      	beq.n	8005480 <USBD_CDC_Setup+0x48>
 8005458:	2e20      	cmp	r6, #32
 800545a:	d117      	bne.n	800548c <USBD_CDC_Setup+0x54>
      if (req->wLength)
 800545c:	88ce      	ldrh	r6, [r1, #6]
 800545e:	b1f6      	cbz	r6, 800549e <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	d53f      	bpl.n	80054e4 <USBD_CDC_Setup+0xac>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005464:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005468:	4632      	mov	r2, r6
 800546a:	4641      	mov	r1, r8
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	7860      	ldrb	r0, [r4, #1]
 8005470:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005472:	4641      	mov	r1, r8
 8005474:	4628      	mov	r0, r5
 8005476:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 8005478:	463e      	mov	r6, r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800547a:	f000 fcef 	bl	8005e5c <USBD_CtlSendData>
 800547e:	e00a      	b.n	8005496 <USBD_CDC_Setup+0x5e>
      switch (req->bRequest)
 8005480:	784b      	ldrb	r3, [r1, #1]
 8005482:	2b0a      	cmp	r3, #10
 8005484:	d01f      	beq.n	80054c6 <USBD_CDC_Setup+0x8e>
 8005486:	2b0b      	cmp	r3, #11
 8005488:	d027      	beq.n	80054da <USBD_CDC_Setup+0xa2>
 800548a:	b193      	cbz	r3, 80054b2 <USBD_CDC_Setup+0x7a>
          USBD_CtlError(pdev, req);
 800548c:	4621      	mov	r1, r4
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fcae 	bl	8005df0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005494:	2602      	movs	r6, #2
}
 8005496:	4630      	mov	r0, r6
 8005498:	b002      	add	sp, #8
 800549a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800549e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80054a2:	4632      	mov	r2, r6
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	7848      	ldrb	r0, [r1, #1]
 80054a8:	4798      	blx	r3
}
 80054aa:	4630      	mov	r0, r6
 80054ac:	b002      	add	sp, #8
 80054ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d1e8      	bne.n	800548c <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80054ba:	2202      	movs	r2, #2
 80054bc:	f10d 0106 	add.w	r1, sp, #6
 80054c0:	f000 fccc 	bl	8005e5c <USBD_CtlSendData>
 80054c4:	e7e7      	b.n	8005496 <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d1de      	bne.n	800548c <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80054ce:	2201      	movs	r2, #1
 80054d0:	f10d 0105 	add.w	r1, sp, #5
 80054d4:	f000 fcc2 	bl	8005e5c <USBD_CtlSendData>
 80054d8:	e7dd      	b.n	8005496 <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d0d9      	beq.n	8005496 <USBD_CDC_Setup+0x5e>
 80054e2:	e7d3      	b.n	800548c <USBD_CDC_Setup+0x54>
          hcdc->CmdOpCode = req->bRequest;
 80054e4:	784b      	ldrb	r3, [r1, #1]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054e6:	4632      	mov	r2, r6
          hcdc->CmdLength = (uint8_t)req->wLength;
 80054e8:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054ec:	4641      	mov	r1, r8
          hcdc->CmdOpCode = req->bRequest;
 80054ee:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054f2:	f000 fccb 	bl	8005e8c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80054f6:	463e      	mov	r6, r7
 80054f8:	e7cd      	b.n	8005496 <USBD_CDC_Setup+0x5e>
 80054fa:	bf00      	nop

080054fc <USBD_CDC_DeInit>:
{
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005500:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005502:	2181      	movs	r1, #129	; 0x81
 8005504:	f000 ff06 	bl	8006314 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005508:	2101      	movs	r1, #1
 800550a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800550c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800550e:	f000 ff01 	bl	8006314 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005512:	2182      	movs	r1, #130	; 0x82
 8005514:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005516:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800551a:	f000 fefb 	bl	8006314 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800551e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005522:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005524:	b14b      	cbz	r3, 800553a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005526:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800552e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005532:	f000 ff5f 	bl	80063f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005536:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800553a:	2000      	movs	r0, #0
 800553c:	bd38      	pop	{r3, r4, r5, pc}
 800553e:	bf00      	nop

08005540 <USBD_CDC_Init>:
{
 8005540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005544:	7c03      	ldrb	r3, [r0, #16]
{
 8005546:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005548:	bbb3      	cbnz	r3, 80055b8 <USBD_CDC_Init+0x78>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800554a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800554e:	2202      	movs	r2, #2
 8005550:	2181      	movs	r1, #129	; 0x81
 8005552:	f000 fecf 	bl	80062f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005556:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800555c:	2202      	movs	r2, #2
 800555e:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005560:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005562:	f000 fec7 	bl	80062f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005566:	2601      	movs	r6, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005568:	2308      	movs	r3, #8
 800556a:	2203      	movs	r2, #3
 800556c:	2182      	movs	r1, #130	; 0x82
 800556e:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005570:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005574:	f000 febe 	bl	80062f4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005578:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800557c:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800557e:	f000 ff35 	bl	80063ec <USBD_static_malloc>
 8005582:	4605      	mov	r5, r0
 8005584:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005588:	b370      	cbz	r0, 80055e8 <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 800558a:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800558e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005596:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800559a:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800559e:	7c27      	ldrb	r7, [r4, #16]
 80055a0:	b1bf      	cbz	r7, 80055d2 <USBD_CDC_Init+0x92>
  uint8_t ret = 0U;
 80055a2:	4647      	mov	r7, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055a4:	2340      	movs	r3, #64	; 0x40
 80055a6:	4631      	mov	r1, r6
 80055a8:	4620      	mov	r0, r4
 80055aa:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80055ae:	f000 ff0b 	bl	80063c8 <USBD_LL_PrepareReceive>
}
 80055b2:	4638      	mov	r0, r7
 80055b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	2202      	movs	r2, #2
 80055bc:	2181      	movs	r1, #129	; 0x81
 80055be:	f000 fe99 	bl	80062f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055c2:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	2202      	movs	r2, #2
 80055c8:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055ca:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055cc:	f000 fe92 	bl	80062f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055d0:	e7c9      	b.n	8005566 <USBD_CDC_Init+0x26>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055d6:	4631      	mov	r1, r6
 80055d8:	4620      	mov	r0, r4
 80055da:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80055de:	f000 fef3 	bl	80063c8 <USBD_LL_PrepareReceive>
}
 80055e2:	4638      	mov	r0, r7
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80055e8:	4637      	mov	r7, r6
}
 80055ea:	4638      	mov	r0, r7
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80055f0:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80055f2:	b119      	cbz	r1, 80055fc <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData = fops;
    ret = USBD_OK;
 80055f4:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 80055f6:	f8c3 12bc 	str.w	r1, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80055fa:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80055fc:	2002      	movs	r0, #2
  }

  return ret;
}
 80055fe:	4770      	bx	lr

08005600 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005600:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005606:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005608:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800560c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop

08005614 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005614:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8

  return USBD_OK;
}
 800561a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800561c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop

08005624 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005626:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 800562a:	b195      	cbz	r5, 8005652 <USBD_CDC_TransmitPacket+0x2e>
  {
    if (hcdc->TxState == 0U)
 800562c:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8005630:	b10c      	cbz	r4, 8005636 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005632:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 1U;
 8005636:	2701      	movs	r7, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005638:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800563c:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
      hcdc->TxState = 1U;
 8005640:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005644:	2181      	movs	r1, #129	; 0x81
 8005646:	b2b3      	uxth	r3, r6
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005648:	6306      	str	r6, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800564a:	f000 feaf 	bl	80063ac <USBD_LL_Transmit>
      return USBD_OK;
 800564e:	4620      	mov	r0, r4
}
 8005650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8005652:	2002      	movs	r0, #2
}
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	bf00      	nop

08005658 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005658:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800565c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800565e:	b19a      	cbz	r2, 8005688 <USBD_CDC_ReceivePacket+0x30>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005660:	7c04      	ldrb	r4, [r0, #16]
 8005662:	b144      	cbz	r4, 8005676 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005664:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	2101      	movs	r1, #1
 800566a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800566e:	f000 feab 	bl	80063c8 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005672:	4620      	mov	r0, r4
 8005674:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800567a:	2101      	movs	r1, #1
 800567c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005680:	f000 fea2 	bl	80063c8 <USBD_LL_PrepareReceive>
}
 8005684:	4620      	mov	r0, r4
 8005686:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005688:	2402      	movs	r4, #2
}
 800568a:	4620      	mov	r0, r4
 800568c:	bd10      	pop	{r4, pc}
 800568e:	bf00      	nop

08005690 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005690:	b188      	cbz	r0, 80056b6 <USBD_Init+0x26>
{
 8005692:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005694:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005698:	b113      	cbz	r3, 80056a0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056a0:	b109      	cbz	r1, 80056a6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80056a2:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056a6:	2301      	movs	r3, #1
  pdev->id = id;
 80056a8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056aa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80056ae:	f000 fdcd 	bl	800624c <USBD_LL_Init>

  return USBD_OK;
 80056b2:	2000      	movs	r0, #0
}
 80056b4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80056b6:	2002      	movs	r0, #2
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop

080056bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056bc:	4603      	mov	r3, r0
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80056be:	b119      	cbz	r1, 80056c8 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 80056c0:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 80056c2:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80056c6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80056c8:	2002      	movs	r0, #2
  }

  return status;
}
 80056ca:	4770      	bx	lr

080056cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056cc:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80056ce:	f000 fe03 	bl	80062d8 <USBD_LL_Start>

  return USBD_OK;
}
 80056d2:	2000      	movs	r0, #0
 80056d4:	bd08      	pop	{r3, pc}
 80056d6:	bf00      	nop

080056d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80056d8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80056da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056de:	b133      	cbz	r3, 80056ee <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4798      	blx	r3
 80056e4:	3800      	subs	r0, #0
 80056e6:	bf18      	it	ne
 80056e8:	2001      	movne	r0, #1
 80056ea:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80056ec:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80056ee:	2002      	movs	r0, #2
}
 80056f0:	bd08      	pop	{r3, pc}
 80056f2:	bf00      	nop

080056f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80056f4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80056f6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4798      	blx	r3

  return USBD_OK;
}
 80056fe:	2000      	movs	r0, #0
 8005700:	bd08      	pop	{r3, pc}
 8005702:	bf00      	nop

08005704 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005708:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800570c:	4628      	mov	r0, r5
 800570e:	f000 fb5b 	bl	8005dc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005712:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8005714:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae

  switch (pdev->request.bmRequest & 0x1FU)
 8005718:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 800571c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8005720:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8005724:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8005726:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800572a:	d009      	beq.n	8005740 <USBD_LL_SetupStage+0x3c>
 800572c:	2b02      	cmp	r3, #2
 800572e:	d013      	beq.n	8005758 <USBD_LL_SetupStage+0x54>
 8005730:	b163      	cbz	r3, 800574c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005732:	4620      	mov	r0, r4
 8005734:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005738:	f000 fdfa 	bl	8006330 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 800573c:	2000      	movs	r0, #0
 800573e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005740:	4629      	mov	r1, r5
 8005742:	4620      	mov	r0, r4
 8005744:	f000 fa72 	bl	8005c2c <USBD_StdItfReq>
}
 8005748:	2000      	movs	r0, #0
 800574a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 800574c:	4629      	mov	r1, r5
 800574e:	4620      	mov	r0, r4
 8005750:	f000 f8fa 	bl	8005948 <USBD_StdDevReq>
}
 8005754:	2000      	movs	r0, #0
 8005756:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8005758:	4629      	mov	r1, r5
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fa9a 	bl	8005c94 <USBD_StdEPReq>
}
 8005760:	2000      	movs	r0, #0
 8005762:	bd38      	pop	{r3, r4, r5, pc}

08005764 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005768:	b969      	cbnz	r1, 8005786 <USBD_LL_DataOutStage+0x22>
 800576a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800576c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005770:	2a03      	cmp	r2, #3
 8005772:	d015      	beq.n	80057a0 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005774:	2a05      	cmp	r2, #5
 8005776:	460c      	mov	r4, r1
 8005778:	d10e      	bne.n	8005798 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800577a:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800577e:	f000 fdd7 	bl	8006330 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005782:	4620      	mov	r0, r4
}
 8005784:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8005786:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	b133      	cbz	r3, 800579c <USBD_LL_DataOutStage+0x38>
 800578e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005792:	2a03      	cmp	r2, #3
 8005794:	d102      	bne.n	800579c <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8005796:	4798      	blx	r3
  return USBD_OK;
 8005798:	2000      	movs	r0, #0
}
 800579a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800579c:	2002      	movs	r0, #2
}
 800579e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80057a0:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 80057a4:	4291      	cmp	r1, r2
 80057a6:	d90c      	bls.n	80057c2 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 80057a8:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 80057aa:	428a      	cmp	r2, r1
 80057ac:	bf88      	it	hi
 80057ae:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 80057b0:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80057b4:	bf98      	it	ls
 80057b6:	b292      	uxthls	r2, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	f000 fb75 	bl	8005ea8 <USBD_CtlContinueRx>
  return USBD_OK;
 80057be:	2000      	movs	r0, #0
}
 80057c0:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	b11b      	cbz	r3, 80057d2 <USBD_LL_DataOutStage+0x6e>
 80057ca:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80057ce:	2a03      	cmp	r2, #3
 80057d0:	d004      	beq.n	80057dc <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 fb72 	bl	8005ebc <USBD_CtlSendStatus>
  return USBD_OK;
 80057d8:	2000      	movs	r0, #0
}
 80057da:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 80057dc:	4798      	blx	r3
 80057de:	e7f8      	b.n	80057d2 <USBD_LL_DataOutStage+0x6e>

080057e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80057e4:	b961      	cbnz	r1, 8005800 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057e6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d015      	beq.n	800581a <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057ee:	f033 0304 	bics.w	r3, r3, #4
 80057f2:	d02e      	beq.n	8005852 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80057f4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d031      	beq.n	8005860 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80057fc:	2000      	movs	r0, #0
}
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8005800:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	b133      	cbz	r3, 8005816 <USBD_LL_DataInStage+0x36>
 8005808:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800580c:	2a03      	cmp	r2, #3
 800580e:	d102      	bne.n	8005816 <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 8005810:	4798      	blx	r3
  return USBD_OK;
 8005812:	2000      	movs	r0, #0
}
 8005814:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8005816:	2002      	movs	r0, #2
}
 8005818:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 800581a:	e9d0 3608 	ldrd	r3, r6, [r0, #32]
 800581e:	42b3      	cmp	r3, r6
 8005820:	d833      	bhi.n	800588a <USBD_LL_DataInStage+0xaa>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005822:	69c3      	ldr	r3, [r0, #28]
 8005824:	fbb3 f5f6 	udiv	r5, r3, r6
 8005828:	fb06 3515 	mls	r5, r6, r5, r3
 800582c:	b9ed      	cbnz	r5, 800586a <USBD_LL_DataInStage+0x8a>
 800582e:	429e      	cmp	r6, r3
 8005830:	d81b      	bhi.n	800586a <USBD_LL_DataInStage+0x8a>
            (pep->total_length >= pep->maxpacket) &&
 8005832:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8005836:	4293      	cmp	r3, r2
 8005838:	d217      	bcs.n	800586a <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800583a:	462a      	mov	r2, r5
 800583c:	f000 fb1c 	bl	8005e78 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005840:	462b      	mov	r3, r5
 8005842:	462a      	mov	r2, r5
 8005844:	4629      	mov	r1, r5
 8005846:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8005848:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800584c:	f000 fdbc 	bl	80063c8 <USBD_LL_PrepareReceive>
 8005850:	e7d0      	b.n	80057f4 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	f000 fd6c 	bl	8006330 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 8005858:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d1cd      	bne.n	80057fc <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8005866:	4618      	mov	r0, r3
}
 8005868:	bd70      	pop	{r4, r5, r6, pc}
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800586a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	b11b      	cbz	r3, 800587a <USBD_LL_DataInStage+0x9a>
 8005872:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005876:	2a03      	cmp	r2, #3
 8005878:	d015      	beq.n	80058a6 <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800587a:	2180      	movs	r1, #128	; 0x80
 800587c:	4620      	mov	r0, r4
 800587e:	f000 fd57 	bl	8006330 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fb26 	bl	8005ed4 <USBD_CtlReceiveStatus>
 8005888:	e7b4      	b.n	80057f4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800588a:	460d      	mov	r5, r1
 800588c:	1b9b      	subs	r3, r3, r6
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800588e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8005890:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005892:	b29a      	uxth	r2, r3
 8005894:	f000 faf0 	bl	8005e78 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005898:	462b      	mov	r3, r5
 800589a:	462a      	mov	r2, r5
 800589c:	4629      	mov	r1, r5
 800589e:	4620      	mov	r0, r4
 80058a0:	f000 fd92 	bl	80063c8 <USBD_LL_PrepareReceive>
 80058a4:	e7a6      	b.n	80057f4 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 80058a6:	4620      	mov	r0, r4
 80058a8:	4798      	blx	r3
 80058aa:	e7e6      	b.n	800587a <USBD_LL_DataInStage+0x9a>

080058ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058ac:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058ae:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058b0:	2640      	movs	r6, #64	; 0x40
{
 80058b2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058b4:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058b6:	4611      	mov	r1, r2
 80058b8:	4633      	mov	r3, r6
 80058ba:	f000 fd1b 	bl	80062f4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058be:	4633      	mov	r3, r6
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	2200      	movs	r2, #0
 80058c4:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058c6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058ca:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058ce:	f000 fd11 	bl	80062f4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80058d2:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80058d4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058d8:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058da:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058dc:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058e0:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80058e4:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80058e6:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80058ea:	b123      	cbz	r3, 80058f6 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058ec:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80058f0:	4620      	mov	r0, r4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4798      	blx	r3
  }

  return USBD_OK;
}
 80058f6:	2000      	movs	r0, #0
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
 80058fa:	bf00      	nop

080058fc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058fc:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80058fe:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8005900:	7419      	strb	r1, [r3, #16]
}
 8005902:	4770      	bx	lr

08005904 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005904:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005906:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 8005908:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
}
 800590c:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800590e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state =  pdev->dev_state;
 8005912:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8005916:	4770      	bx	lr

08005918 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005918:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800591c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800591e:	bf04      	itt	eq
 8005920:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8005924:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8005928:	2000      	movs	r0, #0
 800592a:	4770      	bx	lr

0800592c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005930:	2a03      	cmp	r2, #3
 8005932:	d001      	beq.n	8005938 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005934:	2000      	movs	r0, #0
 8005936:	4770      	bx	lr
{
 8005938:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800593a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	b103      	cbz	r3, 8005944 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8005942:	4798      	blx	r3
}
 8005944:	2000      	movs	r0, #0
 8005946:	bd08      	pop	{r3, pc}

08005948 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005948:	b530      	push	{r4, r5, lr}
 800594a:	780b      	ldrb	r3, [r1, #0]
 800594c:	460d      	mov	r5, r1
 800594e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005952:	2b20      	cmp	r3, #32
{
 8005954:	4604      	mov	r4, r0
 8005956:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005958:	d00d      	beq.n	8005976 <USBD_StdDevReq+0x2e>
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d00b      	beq.n	8005976 <USBD_StdDevReq+0x2e>
 800595e:	b19b      	cbz	r3, 8005988 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	4620      	mov	r0, r4
 8005964:	f000 fce4 	bl	8006330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005968:	2100      	movs	r1, #0
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fce0 	bl	8006330 <USBD_LL_StallEP>
}
 8005970:	2000      	movs	r0, #0
 8005972:	b003      	add	sp, #12
 8005974:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8005976:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800597a:	4629      	mov	r1, r5
 800597c:	4620      	mov	r0, r4
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4798      	blx	r3
}
 8005982:	2000      	movs	r0, #0
 8005984:	b003      	add	sp, #12
 8005986:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005988:	784b      	ldrb	r3, [r1, #1]
 800598a:	2b09      	cmp	r3, #9
 800598c:	d8e8      	bhi.n	8005960 <USBD_StdDevReq+0x18>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <USBD_StdDevReq+0x4c>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059ef 	.word	0x080059ef
 8005998:	08005a17 	.word	0x08005a17
 800599c:	08005961 	.word	0x08005961
 80059a0:	08005a35 	.word	0x08005a35
 80059a4:	08005961 	.word	0x08005961
 80059a8:	08005a3d 	.word	0x08005a3d
 80059ac:	08005a75 	.word	0x08005a75
 80059b0:	08005961 	.word	0x08005961
 80059b4:	08005aa9 	.word	0x08005aa9
 80059b8:	080059bd 	.word	0x080059bd
  cfgidx = (uint8_t)(req->wValue);
 80059bc:	7889      	ldrb	r1, [r1, #2]
 80059be:	4d9a      	ldr	r5, [pc, #616]	; (8005c28 <USBD_StdDevReq+0x2e0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059c0:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80059c2:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059c4:	d8cc      	bhi.n	8005960 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80059c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	f000 810a 	beq.w	8005be4 <USBD_StdDevReq+0x29c>
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	f000 80f8 	beq.w	8005bc6 <USBD_StdDevReq+0x27e>
  USBD_LL_StallEP(pdev, 0x80U);
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	f000 fcaa 	bl	8006330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80059dc:	2100      	movs	r1, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	f000 fca6 	bl	8006330 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 80059e4:	4620      	mov	r0, r4
 80059e6:	7829      	ldrb	r1, [r5, #0]
 80059e8:	f7ff fe84 	bl	80056f4 <USBD_ClrClassConfig>
        break;
 80059ec:	e7c0      	b.n	8005970 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80059ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059f2:	3b01      	subs	r3, #1
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d8b3      	bhi.n	8005960 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 80059f8:	88ca      	ldrh	r2, [r1, #6]
 80059fa:	2a02      	cmp	r2, #2
 80059fc:	d1b0      	bne.n	8005960 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup)
 80059fe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005a02:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf14      	ite	ne
 8005a08:	2303      	movne	r3, #3
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	f841 3f0c 	str.w	r3, [r1, #12]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005a10:	f000 fa24 	bl	8005e5c <USBD_CtlSendData>
      break;
 8005a14:	e7ac      	b.n	8005970 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005a16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d89f      	bhi.n	8005960 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a20:	884b      	ldrh	r3, [r1, #2]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d1a4      	bne.n	8005970 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8005a26:	2300      	movs	r3, #0
        USBD_CtlSendStatus(pdev);
 8005a28:	4620      	mov	r0, r4
        pdev->dev_remote_wakeup = 0U;
 8005a2a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005a2e:	f000 fa45 	bl	8005ebc <USBD_CtlSendStatus>
 8005a32:	e79d      	b.n	8005970 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a34:	884b      	ldrh	r3, [r1, #2]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d19a      	bne.n	8005970 <USBD_StdDevReq+0x28>
 8005a3a:	e7f5      	b.n	8005a28 <USBD_StdDevReq+0xe0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a3c:	888b      	ldrh	r3, [r1, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d18e      	bne.n	8005960 <USBD_StdDevReq+0x18>
 8005a42:	88cb      	ldrh	r3, [r1, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d18b      	bne.n	8005960 <USBD_StdDevReq+0x18>
 8005a48:	884d      	ldrh	r5, [r1, #2]
 8005a4a:	2d7f      	cmp	r5, #127	; 0x7f
 8005a4c:	d888      	bhi.n	8005960 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d084      	beq.n	8005960 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a56:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005a58:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a5c:	f000 fc98 	bl	8006390 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fa2b 	bl	8005ebc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	f000 80d9 	beq.w	8005c1e <USBD_StdDevReq+0x2d6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005a72:	e77d      	b.n	8005970 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8005a74:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8005a76:	886a      	ldrh	r2, [r5, #2]
  uint16_t len = 0U;
 8005a78:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8005a7c:	0a13      	lsrs	r3, r2, #8
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	f63f af6d 	bhi.w	8005960 <USBD_StdDevReq+0x18>
 8005a86:	a101      	add	r1, pc, #4	; (adr r1, 8005a8c <USBD_StdDevReq+0x144>)
 8005a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a8c:	08005b3b 	.word	0x08005b3b
 8005a90:	08005b23 	.word	0x08005b23
 8005a94:	08005b11 	.word	0x08005b11
 8005a98:	08005961 	.word	0x08005961
 8005a9c:	08005961 	.word	0x08005961
 8005aa0:	08005afb 	.word	0x08005afb
 8005aa4:	08005acd 	.word	0x08005acd
  if (req->wLength != 1U)
 8005aa8:	88ca      	ldrh	r2, [r1, #6]
 8005aaa:	2a01      	cmp	r2, #1
 8005aac:	f47f af58 	bne.w	8005960 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005ab0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d871      	bhi.n	8005b9c <USBD_StdDevReq+0x254>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f43f af51 	beq.w	8005960 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8005abe:	4601      	mov	r1, r0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ac6:	f000 f9c9 	bl	8005e5c <USBD_CtlSendData>
        break;
 8005aca:	e751      	b.n	8005970 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005acc:	7c03      	ldrb	r3, [r0, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f47f af46 	bne.w	8005960 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ad4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ad8:	f10d 0006 	add.w	r0, sp, #6
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ae0:	2307      	movs	r3, #7
 8005ae2:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8005ae4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d067      	beq.n	8005bbc <USBD_StdDevReq+0x274>
 8005aec:	88eb      	ldrh	r3, [r5, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d15b      	bne.n	8005baa <USBD_StdDevReq+0x262>
          USBD_CtlSendStatus(pdev);
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 f9e2 	bl	8005ebc <USBD_CtlSendStatus>
 8005af8:	e73a      	b.n	8005970 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005afa:	7c03      	ldrb	r3, [r0, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f af2f 	bne.w	8005960 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b02:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b06:	f10d 0006 	add.w	r0, sp, #6
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	4798      	blx	r3
  if (err != 0U)
 8005b0e:	e7e9      	b.n	8005ae4 <USBD_StdDevReq+0x19c>
      switch ((uint8_t)(req->wValue))
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	2a05      	cmp	r2, #5
 8005b14:	f63f af24 	bhi.w	8005960 <USBD_StdDevReq+0x18>
 8005b18:	e8df f002 	tbb	[pc, r2]
 8005b1c:	282e343a 	.word	0x282e343a
 8005b20:	1722      	.short	0x1722
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b22:	7c03      	ldrb	r3, [r0, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d16a      	bne.n	8005bfe <USBD_StdDevReq+0x2b6>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b28:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b2c:	f10d 0006 	add.w	r0, sp, #6
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b34:	2302      	movs	r3, #2
 8005b36:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005b38:	e7d4      	b.n	8005ae4 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b3a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b3e:	f10d 0106 	add.w	r1, sp, #6
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	7c00      	ldrb	r0, [r0, #16]
 8005b46:	4798      	blx	r3
  if (err != 0U)
 8005b48:	e7cc      	b.n	8005ae4 <USBD_StdDevReq+0x19c>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b4a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f43f af05 	beq.w	8005960 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b56:	7c20      	ldrb	r0, [r4, #16]
 8005b58:	f10d 0106 	add.w	r1, sp, #6
 8005b5c:	4798      	blx	r3
  if (err != 0U)
 8005b5e:	e7c1      	b.n	8005ae4 <USBD_StdDevReq+0x19c>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b60:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f5      	bne.n	8005b56 <USBD_StdDevReq+0x20e>
 8005b6a:	e6f9      	b.n	8005960 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b6c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1ef      	bne.n	8005b56 <USBD_StdDevReq+0x20e>
 8005b76:	e6f3      	b.n	8005960 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e9      	bne.n	8005b56 <USBD_StdDevReq+0x20e>
 8005b82:	e6ed      	b.n	8005960 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b84:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e3      	bne.n	8005b56 <USBD_StdDevReq+0x20e>
 8005b8e:	e6e7      	b.n	8005960 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b90:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1dd      	bne.n	8005b56 <USBD_StdDevReq+0x20e>
 8005b9a:	e6e1      	b.n	8005960 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	f47f aedf 	bne.w	8005960 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005ba2:	1d01      	adds	r1, r0, #4
 8005ba4:	f000 f95a 	bl	8005e5c <USBD_CtlSendData>
        break;
 8005ba8:	e6e2      	b.n	8005970 <USBD_StdDevReq+0x28>
      len = MIN(len, req->wLength);
 8005baa:	429a      	cmp	r2, r3
 8005bac:	bf28      	it	cs
 8005bae:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bb0:	4601      	mov	r1, r0
 8005bb2:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005bb4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bb8:	f000 f950 	bl	8005e5c <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005bbc:	88eb      	ldrh	r3, [r5, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f47f aed6 	bne.w	8005970 <USBD_StdDevReq+0x28>
 8005bc4:	e795      	b.n	8005af2 <USBD_StdDevReq+0x1aa>
        if (cfgidx == 0U)
 8005bc6:	b319      	cbz	r1, 8005c10 <USBD_StdDevReq+0x2c8>
        else if (cfgidx != pdev->dev_config)
 8005bc8:	6841      	ldr	r1, [r0, #4]
 8005bca:	2901      	cmp	r1, #1
 8005bcc:	d091      	beq.n	8005af2 <USBD_StdDevReq+0x1aa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005bce:	b2c9      	uxtb	r1, r1
 8005bd0:	f7ff fd90 	bl	80056f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005bd4:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005bd6:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8005bd8:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005bda:	f7ff fd7d 	bl	80056d8 <USBD_SetClassConfig>
 8005bde:	2802      	cmp	r0, #2
 8005be0:	d187      	bne.n	8005af2 <USBD_StdDevReq+0x1aa>
 8005be2:	e6bd      	b.n	8005960 <USBD_StdDevReq+0x18>
        if (cfgidx)
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d084      	beq.n	8005af2 <USBD_StdDevReq+0x1aa>
          pdev->dev_config = cfgidx;
 8005be8:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bea:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005bec:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bee:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005bf2:	f7ff fd71 	bl	80056d8 <USBD_SetClassConfig>
 8005bf6:	2802      	cmp	r0, #2
 8005bf8:	f47f af7b 	bne.w	8005af2 <USBD_StdDevReq+0x1aa>
 8005bfc:	e6b0      	b.n	8005960 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bfe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c02:	f10d 0006 	add.w	r0, sp, #6
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005c0e:	e769      	b.n	8005ae4 <USBD_StdDevReq+0x19c>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c10:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005c12:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c14:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005c18:	f7ff fd6c 	bl	80056f4 <USBD_ClrClassConfig>
 8005c1c:	e769      	b.n	8005af2 <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005c24:	e6a4      	b.n	8005970 <USBD_StdDevReq+0x28>
 8005c26:	bf00      	nop
 8005c28:	2000087c 	.word	0x2000087c

08005c2c <USBD_StdItfReq>:
{
 8005c2c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2e:	780b      	ldrb	r3, [r1, #0]
{
 8005c30:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c32:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005c36:	2a40      	cmp	r2, #64	; 0x40
{
 8005c38:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c3a:	d00a      	beq.n	8005c52 <USBD_StdItfReq+0x26>
 8005c3c:	065b      	lsls	r3, r3, #25
 8005c3e:	d508      	bpl.n	8005c52 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	f000 fb75 	bl	8006330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005c46:	2100      	movs	r1, #0
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fb71 	bl	8006330 <USBD_LL_StallEP>
}
 8005c4e:	2000      	movs	r0, #0
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005c52:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005c56:	3b01      	subs	r3, #1
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d811      	bhi.n	8005c80 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c5c:	792b      	ldrb	r3, [r5, #4]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d80e      	bhi.n	8005c80 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c62:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005c66:	4629      	mov	r1, r5
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c6e:	88eb      	ldrh	r3, [r5, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1ec      	bne.n	8005c4e <USBD_StdItfReq+0x22>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d1ea      	bne.n	8005c4e <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f91f 	bl	8005ebc <USBD_CtlSendStatus>
 8005c7e:	e7e6      	b.n	8005c4e <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fb54 	bl	8006330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fb50 	bl	8006330 <USBD_LL_StallEP>
}
 8005c90:	2000      	movs	r0, #0
 8005c92:	bd38      	pop	{r3, r4, r5, pc}

08005c94 <USBD_StdEPReq>:
{
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	780b      	ldrb	r3, [r1, #0]
 8005c98:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c9e:	2b20      	cmp	r3, #32
  ep_addr  = LOBYTE(req->wIndex);
 8005ca0:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ca2:	d00c      	beq.n	8005cbe <USBD_StdEPReq+0x2a>
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d00a      	beq.n	8005cbe <USBD_StdEPReq+0x2a>
 8005ca8:	b183      	cbz	r3, 8005ccc <USBD_StdEPReq+0x38>
  USBD_LL_StallEP(pdev, 0x80U);
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fb3f 	bl	8006330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 fb3b 	bl	8006330 <USBD_LL_StallEP>
}
 8005cba:	2000      	movs	r0, #0
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8005cbe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4798      	blx	r3
}
 8005cc8:	2000      	movs	r0, #0
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005ccc:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005cce:	fa5f fc82 	uxtb.w	ip, r2
      switch (req->bRequest)
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d03d      	beq.n	8005d52 <USBD_StdEPReq+0xbe>
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d02a      	beq.n	8005d30 <USBD_StdEPReq+0x9c>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 8005cde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d050      	beq.n	8005d88 <USBD_StdEPReq+0xf4>
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d1df      	bne.n	8005caa <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cea:	f00c 030f 	and.w	r3, ip, #15
 8005cee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8005cf2:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cf4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8005cf8:	d455      	bmi.n	8005da6 <USBD_StdEPReq+0x112>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cfa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0d3      	beq.n	8005caa <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d02:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 8005d06:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8005d0a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005d0e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d12:	b133      	cbz	r3, 8005d22 <USBD_StdEPReq+0x8e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d14:	4661      	mov	r1, ip
 8005d16:	4620      	mov	r0, r4
 8005d18:	f000 fb26 	bl	8006368 <USBD_LL_IsStallEP>
 8005d1c:	1e03      	subs	r3, r0, #0
 8005d1e:	bf18      	it	ne
 8005d20:	2301      	movne	r3, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d22:	2202      	movs	r2, #2
 8005d24:	4629      	mov	r1, r5
 8005d26:	4620      	mov	r0, r4
                pep->status = 0x0000U;
 8005d28:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d2a:	f000 f897 	bl	8005e5c <USBD_CtlSendData>
              break;
 8005d2e:	e7c4      	b.n	8005cba <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 8005d30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d01c      	beq.n	8005d72 <USBD_StdEPReq+0xde>
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d1b6      	bne.n	8005caa <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d3c:	884b      	ldrh	r3, [r1, #2]
 8005d3e:	b9a3      	cbnz	r3, 8005d6a <USBD_StdEPReq+0xd6>
                if ((ep_addr != 0x00U) &&
 8005d40:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8005d44:	d011      	beq.n	8005d6a <USBD_StdEPReq+0xd6>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d46:	88cb      	ldrh	r3, [r1, #6]
 8005d48:	b97b      	cbnz	r3, 8005d6a <USBD_StdEPReq+0xd6>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005d4a:	4661      	mov	r1, ip
 8005d4c:	f000 faf0 	bl	8006330 <USBD_LL_StallEP>
 8005d50:	e00b      	b.n	8005d6a <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8005d52:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d00b      	beq.n	8005d72 <USBD_StdEPReq+0xde>
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d1a5      	bne.n	8005caa <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d5e:	884b      	ldrh	r3, [r1, #2]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1aa      	bne.n	8005cba <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d64:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8005d68:	d129      	bne.n	8005dbe <USBD_StdEPReq+0x12a>
              USBD_CtlSendStatus(pdev);
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 f8a6 	bl	8005ebc <USBD_CtlSendStatus>
              break;
 8005d70:	e7a3      	b.n	8005cba <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d72:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8005d76:	d098      	beq.n	8005caa <USBD_StdEPReq+0x16>
                USBD_LL_StallEP(pdev, ep_addr);
 8005d78:	4661      	mov	r1, ip
 8005d7a:	f000 fad9 	bl	8006330 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d7e:	2180      	movs	r1, #128	; 0x80
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fad5 	bl	8006330 <USBD_LL_StallEP>
 8005d86:	e798      	b.n	8005cba <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d88:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8005d8c:	d18d      	bne.n	8005caa <USBD_StdEPReq+0x16>
              pep->status = 0x0000U;
 8005d8e:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d90:	0611      	lsls	r1, r2, #24
 8005d92:	bf4c      	ite	mi
 8005d94:	f100 0114 	addmi.w	r1, r0, #20
 8005d98:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d9c:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005d9e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005da0:	f000 f85c 	bl	8005e5c <USBD_CtlSendData>
              break;
 8005da4:	e789      	b.n	8005cba <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f43f af7e 	beq.w	8005caa <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dae:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 8005db2:	1c5d      	adds	r5, r3, #1
 8005db4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005db8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005dbc:	e7a9      	b.n	8005d12 <USBD_StdEPReq+0x7e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dbe:	4661      	mov	r1, ip
 8005dc0:	f000 fac4 	bl	800634c <USBD_LL_ClearStallEP>
 8005dc4:	e7d1      	b.n	8005d6a <USBD_StdEPReq+0xd6>
 8005dc6:	bf00      	nop

08005dc8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005dc8:	780b      	ldrb	r3, [r1, #0]
 8005dca:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005dcc:	784b      	ldrb	r3, [r1, #1]
 8005dce:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005dd0:	78ca      	ldrb	r2, [r1, #3]
 8005dd2:	788b      	ldrb	r3, [r1, #2]
 8005dd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005dd8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005dda:	794a      	ldrb	r2, [r1, #5]
 8005ddc:	790b      	ldrb	r3, [r1, #4]
 8005dde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005de2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005de4:	79ca      	ldrb	r2, [r1, #7]
 8005de6:	798b      	ldrb	r3, [r1, #6]
 8005de8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005dec:	80c3      	strh	r3, [r0, #6]
}
 8005dee:	4770      	bx	lr

08005df0 <USBD_CtlError>:
{
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005df4:	2180      	movs	r1, #128	; 0x80
 8005df6:	f000 fa9b 	bl	8006330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005dfa:	4620      	mov	r0, r4
}
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005e00:	2100      	movs	r1, #0
 8005e02:	f000 ba95 	b.w	8006330 <USBD_LL_StallEP>
 8005e06:	bf00      	nop

08005e08 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005e08:	b318      	cbz	r0, 8005e52 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005e0a:	7803      	ldrb	r3, [r0, #0]
{
 8005e0c:	b430      	push	{r4, r5}
  while (*buf != '\0')
 8005e0e:	b30b      	cbz	r3, 8005e54 <USBD_GetString+0x4c>
 8005e10:	4604      	mov	r4, r0
 8005e12:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8005e16:	eb04 030c 	add.w	r3, r4, ip
  while (*buf != '\0')
 8005e1a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	d1f8      	bne.n	8005e16 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005e24:	3301      	adds	r3, #1
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	b2dc      	uxtb	r4, r3
 8005e2a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005e2c:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005e2e:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005e30:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8005e32:	7804      	ldrb	r4, [r0, #0]
 8005e34:	b15c      	cbz	r4, 8005e4e <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005e36:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8005e38:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8005e40:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8005e42:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8005e46:	3302      	adds	r3, #2
 8005e48:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d1f5      	bne.n	8005e3a <USBD_GetString+0x32>
}
 8005e4e:	bc30      	pop	{r4, r5}
 8005e50:	4770      	bx	lr
 8005e52:	4770      	bx	lr
  while (*buf != '\0')
 8005e54:	2402      	movs	r4, #2
 8005e56:	4623      	mov	r3, r4
 8005e58:	e7e7      	b.n	8005e2a <USBD_GetString+0x22>
 8005e5a:	bf00      	nop

08005e5c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e60:	2402      	movs	r4, #2
{
 8005e62:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005e64:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e68:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e6a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e6e:	f000 fa9d 	bl	80063ac <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e72:	2000      	movs	r0, #0
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop

08005e78 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005e78:	468c      	mov	ip, r1
 8005e7a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e7c:	2100      	movs	r1, #0
{
 8005e7e:	4613      	mov	r3, r2
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e80:	4662      	mov	r2, ip
 8005e82:	f000 fa93 	bl	80063ac <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e86:	2000      	movs	r0, #0
 8005e88:	bd08      	pop	{r3, pc}
 8005e8a:	bf00      	nop

08005e8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e90:	2403      	movs	r4, #3
{
 8005e92:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005e94:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e98:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e9a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e9e:	f000 fa93 	bl	80063c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	bf00      	nop

08005ea8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005ea8:	468c      	mov	ip, r1
 8005eaa:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005eac:	2100      	movs	r1, #0
{
 8005eae:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005eb0:	4662      	mov	r2, ip
 8005eb2:	f000 fa89 	bl	80063c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	bd08      	pop	{r3, pc}
 8005eba:	bf00      	nop

08005ebc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ebc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ebe:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ec0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ec2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f000 fa6f 	bl	80063ac <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ece:	2000      	movs	r0, #0
 8005ed0:	bd08      	pop	{r3, pc}
 8005ed2:	bf00      	nop

08005ed4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ed6:	2105      	movs	r1, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ed8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005eda:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f000 fa71 	bl	80063c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	bd08      	pop	{r3, pc}
 8005eea:	bf00      	nop

08005eec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4917      	ldr	r1, [pc, #92]	; (8005f50 <MX_USB_DEVICE_Init+0x64>)
 8005ef2:	4818      	ldr	r0, [pc, #96]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005ef4:	f7ff fbcc 	bl	8005690 <USBD_Init>
 8005ef8:	b970      	cbnz	r0, 8005f18 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005efa:	4917      	ldr	r1, [pc, #92]	; (8005f58 <MX_USB_DEVICE_Init+0x6c>)
 8005efc:	4815      	ldr	r0, [pc, #84]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005efe:	f7ff fbdd 	bl	80056bc <USBD_RegisterClass>
 8005f02:	b988      	cbnz	r0, 8005f28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f04:	4915      	ldr	r1, [pc, #84]	; (8005f5c <MX_USB_DEVICE_Init+0x70>)
 8005f06:	4813      	ldr	r0, [pc, #76]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005f08:	f7ff fb72 	bl	80055f0 <USBD_CDC_RegisterInterface>
 8005f0c:	b9a0      	cbnz	r0, 8005f38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f0e:	4811      	ldr	r0, [pc, #68]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005f10:	f7ff fbdc 	bl	80056cc <USBD_Start>
 8005f14:	b9b8      	cbnz	r0, 8005f46 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f16:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005f18:	f7fb fa16 	bl	8001348 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <MX_USB_DEVICE_Init+0x6c>)
 8005f1e:	480d      	ldr	r0, [pc, #52]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005f20:	f7ff fbcc 	bl	80056bc <USBD_RegisterClass>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0ed      	beq.n	8005f04 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005f28:	f7fb fa0e 	bl	8001348 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f2c:	490b      	ldr	r1, [pc, #44]	; (8005f5c <MX_USB_DEVICE_Init+0x70>)
 8005f2e:	4809      	ldr	r0, [pc, #36]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005f30:	f7ff fb5e 	bl	80055f0 <USBD_CDC_RegisterInterface>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0ea      	beq.n	8005f0e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005f38:	f7fb fa06 	bl	8001348 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f3c:	4805      	ldr	r0, [pc, #20]	; (8005f54 <MX_USB_DEVICE_Init+0x68>)
 8005f3e:	f7ff fbc5 	bl	80056cc <USBD_Start>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d0e7      	beq.n	8005f16 <MX_USB_DEVICE_Init+0x2a>
}
 8005f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005f4a:	f7fb b9fd 	b.w	8001348 <Error_Handler>
 8005f4e:	bf00      	nop
 8005f50:	2000013c 	.word	0x2000013c
 8005f54:	20000880 	.word	0x20000880
 8005f58:	2000001c 	.word	0x2000001c
 8005f5c:	2000012c 	.word	0x2000012c

08005f60 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005f60:	2000      	movs	r0, #0
 8005f62:	4770      	bx	lr

08005f64 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005f64:	2000      	movs	r0, #0
 8005f66:	4770      	bx	lr

08005f68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f6a:	4c05      	ldr	r4, [pc, #20]	; (8005f80 <CDC_Receive_FS+0x18>)
{
 8005f6c:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff fb50 	bl	8005614 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff fb6f 	bl	8005658 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000880 	.word	0x20000880

08005f84 <CDC_Init_FS>:
{
 8005f84:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f86:	4c06      	ldr	r4, [pc, #24]	; (8005fa0 <CDC_Init_FS+0x1c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4905      	ldr	r1, [pc, #20]	; (8005fa4 <CDC_Init_FS+0x20>)
 8005f8e:	f7ff fb37 	bl	8005600 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f92:	4620      	mov	r0, r4
 8005f94:	4904      	ldr	r1, [pc, #16]	; (8005fa8 <CDC_Init_FS+0x24>)
 8005f96:	f7ff fb3d 	bl	8005614 <USBD_CDC_SetRxBuffer>
}
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000880 	.word	0x20000880
 8005fa4:	20000f44 	.word	0x20000f44
 8005fa8:	20000b44 	.word	0x20000b44

08005fac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005fac:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005fae:	4c09      	ldr	r4, [pc, #36]	; (8005fd4 <CDC_Transmit_FS+0x28>)
 8005fb0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8005fb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fb8:	b10b      	cbz	r3, 8005fbe <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8005fba:	2001      	movs	r0, #1
 8005fbc:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7ff fb1c 	bl	8005600 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005fc8:	4620      	mov	r0, r4
}
 8005fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005fce:	f7ff bb29 	b.w	8005624 <USBD_CDC_TransmitPacket>
 8005fd2:	bf00      	nop
 8005fd4:	20000880 	.word	0x20000880

08005fd8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fd8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005fda:	4801      	ldr	r0, [pc, #4]	; (8005fe0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fdc:	800b      	strh	r3, [r1, #0]
}
 8005fde:	4770      	bx	lr
 8005fe0:	20000158 	.word	0x20000158

08005fe4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005fe4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005fe6:	4801      	ldr	r0, [pc, #4]	; (8005fec <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005fe8:	800b      	strh	r3, [r1, #0]
}
 8005fea:	4770      	bx	lr
 8005fec:	2000016c 	.word	0x2000016c

08005ff0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff0:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ff2:	4c04      	ldr	r4, [pc, #16]	; (8006004 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005ff4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ff6:	4804      	ldr	r0, [pc, #16]	; (8006008 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	f7ff ff05 	bl	8005e08 <USBD_GetString>
  return USBD_StrDesc;
}
 8005ffe:	4620      	mov	r0, r4
 8006000:	bd10      	pop	{r4, pc}
 8006002:	bf00      	nop
 8006004:	20001344 	.word	0x20001344
 8006008:	0800b1ac 	.word	0x0800b1ac

0800600c <USBD_FS_ProductStrDescriptor>:
{
 800600c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800600e:	4c04      	ldr	r4, [pc, #16]	; (8006020 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006010:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006012:	4804      	ldr	r0, [pc, #16]	; (8006024 <USBD_FS_ProductStrDescriptor+0x18>)
 8006014:	4621      	mov	r1, r4
 8006016:	f7ff fef7 	bl	8005e08 <USBD_GetString>
}
 800601a:	4620      	mov	r0, r4
 800601c:	bd10      	pop	{r4, pc}
 800601e:	bf00      	nop
 8006020:	20001344 	.word	0x20001344
 8006024:	0800b1c0 	.word	0x0800b1c0

08006028 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006028:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800602a:	4c04      	ldr	r4, [pc, #16]	; (800603c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800602c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800602e:	4804      	ldr	r0, [pc, #16]	; (8006040 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006030:	4621      	mov	r1, r4
 8006032:	f7ff fee9 	bl	8005e08 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006036:	4620      	mov	r0, r4
 8006038:	bd10      	pop	{r4, pc}
 800603a:	bf00      	nop
 800603c:	20001344 	.word	0x20001344
 8006040:	0800b1d8 	.word	0x0800b1d8

08006044 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006044:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006046:	4c04      	ldr	r4, [pc, #16]	; (8006058 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006048:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800604a:	4804      	ldr	r0, [pc, #16]	; (800605c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800604c:	4621      	mov	r1, r4
 800604e:	f7ff fedb 	bl	8005e08 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006052:	4620      	mov	r0, r4
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	20001344 	.word	0x20001344
 800605c:	0800b1e4 	.word	0x0800b1e4

08006060 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006060:	f04f 0c1a 	mov.w	ip, #26
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006064:	4a44      	ldr	r2, [pc, #272]	; (8006178 <USBD_FS_SerialStrDescriptor+0x118>)
 8006066:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800606a:	f8d2 07f0 	ldr.w	r0, [r2, #2032]	; 0x7f0
  *length = USB_SIZ_STRING_SERIAL;
 800606e:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8006072:	181b      	adds	r3, r3, r0
 8006074:	d101      	bne.n	800607a <USBD_FS_SerialStrDescriptor+0x1a>
}
 8006076:	4841      	ldr	r0, [pc, #260]	; (800617c <USBD_FS_SerialStrDescriptor+0x11c>)
 8006078:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800607a:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800607e:	f8d2 17ec 	ldr.w	r1, [r2, #2028]	; 0x7ec
    if (((value >> 28)) < 0xA)
 8006082:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006084:	4a3d      	ldr	r2, [pc, #244]	; (800617c <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8006086:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800608a:	bf2c      	ite	cs
 800608c:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800608e:	3030      	addcc	r0, #48	; 0x30
 8006090:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8006092:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006096:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006098:	bf8c      	ite	hi
 800609a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800609c:	3030      	addls	r0, #48	; 0x30
 800609e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80060a0:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80060a4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060a6:	bf8c      	ite	hi
 80060a8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80060aa:	3030      	addls	r0, #48	; 0x30
 80060ac:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80060ae:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80060b2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060b4:	bf8c      	ite	hi
 80060b6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80060b8:	3030      	addls	r0, #48	; 0x30
 80060ba:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80060bc:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80060c0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060c2:	bf8c      	ite	hi
 80060c4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80060c6:	3030      	addls	r0, #48	; 0x30
 80060c8:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80060ca:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80060ce:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060d0:	bf8c      	ite	hi
 80060d2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80060d4:	3030      	addls	r0, #48	; 0x30
 80060d6:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80060d8:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80060dc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060de:	bf8c      	ite	hi
 80060e0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80060e2:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80060e4:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 80060e8:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80060ea:	f04f 0c00 	mov.w	ip, #0
 80060ee:	2000      	movs	r0, #0
 80060f0:	f882 c005 	strb.w	ip, [r2, #5]
 80060f4:	73d0      	strb	r0, [r2, #15]
 80060f6:	f04f 0c00 	mov.w	ip, #0
 80060fa:	2000      	movs	r0, #0
 80060fc:	f882 c007 	strb.w	ip, [r2, #7]
 8006100:	7450      	strb	r0, [r2, #17]
 8006102:	f04f 0c00 	mov.w	ip, #0
 8006106:	2000      	movs	r0, #0
 8006108:	f882 c009 	strb.w	ip, [r2, #9]
 800610c:	74d0      	strb	r0, [r2, #19]
 800610e:	f04f 0c00 	mov.w	ip, #0
 8006112:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800611a:	bf94      	ite	ls
 800611c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800611e:	3337      	addhi	r3, #55	; 0x37
 8006120:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8006122:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 8006126:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800612a:	bf2c      	ite	cs
 800612c:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800612e:	3330      	addcc	r3, #48	; 0x30
 8006130:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8006132:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8006136:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006138:	bf8c      	ite	hi
 800613a:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800613c:	3330      	addls	r3, #48	; 0x30
 800613e:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8006140:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8006144:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006146:	bf8c      	ite	hi
 8006148:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800614a:	3330      	addls	r3, #48	; 0x30
 800614c:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800614e:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8006152:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006154:	bf94      	ite	ls
 8006156:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006158:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800615a:	f882 c00b 	strb.w	ip, [r2, #11]
 800615e:	7550      	strb	r0, [r2, #21]
 8006160:	f04f 0c00 	mov.w	ip, #0
 8006164:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006166:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	75d0      	strb	r0, [r2, #23]
 800616c:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8006170:	4802      	ldr	r0, [pc, #8]	; (800617c <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8006172:	7653      	strb	r3, [r2, #25]
}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	1ffff000 	.word	0x1ffff000
 800617c:	20000170 	.word	0x20000170

08006180 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <HAL_PCD_MspInit+0x3c>)
 8006182:	6802      	ldr	r2, [r0, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d000      	beq.n	800618a <HAL_PCD_MspInit+0xa>
 8006188:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800618c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006190:	69d9      	ldr	r1, [r3, #28]
{
 8006192:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8006194:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006198:	61d9      	str	r1, [r3, #28]
 800619a:	69db      	ldr	r3, [r3, #28]
{
 800619c:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800619e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80061a4:	2014      	movs	r0, #20
 80061a6:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80061a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80061aa:	f7fb fde7 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80061ae:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80061b0:	b003      	add	sp, #12
 80061b2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80061b6:	f7fb be1f 	b.w	8001df8 <HAL_NVIC_EnableIRQ>
 80061ba:	bf00      	nop
 80061bc:	40005c00 	.word	0x40005c00

080061c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061c0:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80061c2:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80061c6:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 80061ca:	f7ff ba9b 	b.w	8005704 <USBD_LL_SetupStage>
 80061ce:	bf00      	nop

080061d0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061d0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80061d4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80061d8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80061dc:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80061e0:	f7ff bac0 	b.w	8005764 <USBD_LL_DataOutStage>

080061e4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061e4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80061e8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80061ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ee:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80061f2:	f7ff baf5 	b.w	80057e0 <USBD_LL_DataInStage>
 80061f6:	bf00      	nop

080061f8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061f8:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80061fc:	f7ff bb96 	b.w	800592c <USBD_LL_SOF>

08006200 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006200:	6883      	ldr	r3, [r0, #8]
{
 8006202:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006204:	2b02      	cmp	r3, #2
{
 8006206:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006208:	d001      	beq.n	800620e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800620a:	f7fb f89d 	bl	8001348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800620e:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8006212:	2101      	movs	r1, #1
 8006214:	f7ff fb72 	bl	80058fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006218:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 800621c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006220:	f7ff bb44 	b.w	80058ac <USBD_LL_Reset>

08006224 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006224:	b510      	push	{r4, lr}
 8006226:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006228:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800622c:	f7ff fb6a 	bl	8005904 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006230:	69a3      	ldr	r3, [r4, #24]
 8006232:	b123      	cbz	r3, 800623e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006234:	4a02      	ldr	r2, [pc, #8]	; (8006240 <HAL_PCD_SuspendCallback+0x1c>)
 8006236:	6913      	ldr	r3, [r2, #16]
 8006238:	f043 0306 	orr.w	r3, r3, #6
 800623c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800623e:	bd10      	pop	{r4, pc}
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006244:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006248:	f7ff bb66 	b.w	8005918 <USBD_LL_Resume>

0800624c <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800624c:	2208      	movs	r2, #8
{
 800624e:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006250:	2400      	movs	r4, #0
 8006252:	2500      	movs	r5, #0
  hpcd_USB_FS.pData = pdev;
 8006254:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006256:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006258:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800625a:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800625c:	e9c3 4506 	strd	r4, r5, [r3, #24]
{
 8006260:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006262:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.pData = pdev;
 8006266:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800626a:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800626c:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006270:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Instance = USB;
 8006272:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006274:	f7fc fabc 	bl	80027f0 <HAL_PCD_Init>
 8006278:	bb30      	cbnz	r0, 80062c8 <USBD_LL_Init+0x7c>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800627a:	2200      	movs	r2, #0
 800627c:	2318      	movs	r3, #24
 800627e:	4611      	mov	r1, r2
 8006280:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006284:	f7fd fa12 	bl	80036ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006288:	2358      	movs	r3, #88	; 0x58
 800628a:	2200      	movs	r2, #0
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006292:	f7fd fa0b 	bl	80036ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006296:	23c0      	movs	r3, #192	; 0xc0
 8006298:	2200      	movs	r2, #0
 800629a:	2181      	movs	r1, #129	; 0x81
 800629c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80062a0:	f7fd fa04 	bl	80036ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80062a4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062a8:	2200      	movs	r2, #0
 80062aa:	2101      	movs	r1, #1
 80062ac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80062b0:	f7fd f9fc 	bl	80036ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80062b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062b8:	2200      	movs	r2, #0
 80062ba:	2182      	movs	r1, #130	; 0x82
 80062bc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80062c0:	f7fd f9f4 	bl	80036ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80062c4:	2000      	movs	r0, #0
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 80062c8:	f7fb f83e 	bl	8001348 <Error_Handler>
 80062cc:	e7d5      	b.n	800627a <USBD_LL_Init+0x2e>
 80062ce:	bf00      	nop
 80062d0:	20001548 	.word	0x20001548
 80062d4:	40005c00 	.word	0x40005c00

080062d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80062da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062de:	f7fc fb03 	bl	80028e8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80062e2:	2803      	cmp	r0, #3
 80062e4:	bf96      	itet	ls
 80062e6:	4b02      	ldrls	r3, [pc, #8]	; (80062f0 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80062e8:	2002      	movhi	r0, #2
 80062ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80062ec:	bd08      	pop	{r3, pc}
 80062ee:	bf00      	nop
 80062f0:	0800b1f4 	.word	0x0800b1f4

080062f4 <USBD_LL_OpenEP>:
{
 80062f4:	4694      	mov	ip, r2
 80062f6:	b508      	push	{r3, lr}
 80062f8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062fe:	4663      	mov	r3, ip
 8006300:	f7fd f8b2 	bl	8003468 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006304:	2803      	cmp	r0, #3
 8006306:	bf96      	itet	ls
 8006308:	4b01      	ldrls	r3, [pc, #4]	; (8006310 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800630a:	2002      	movhi	r0, #2
 800630c:	5c18      	ldrbls	r0, [r3, r0]
}
 800630e:	bd08      	pop	{r3, pc}
 8006310:	0800b1f4 	.word	0x0800b1f4

08006314 <USBD_LL_CloseEP>:
{
 8006314:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006316:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800631a:	f7fd f8d9 	bl	80034d0 <HAL_PCD_EP_Close>
  switch (hal_status)
 800631e:	2803      	cmp	r0, #3
 8006320:	bf96      	itet	ls
 8006322:	4b02      	ldrls	r3, [pc, #8]	; (800632c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006324:	2002      	movhi	r0, #2
 8006326:	5c18      	ldrbls	r0, [r3, r0]
}
 8006328:	bd08      	pop	{r3, pc}
 800632a:	bf00      	nop
 800632c:	0800b1f4 	.word	0x0800b1f4

08006330 <USBD_LL_StallEP>:
{
 8006330:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006332:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006336:	f7fd f941 	bl	80035bc <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800633a:	2803      	cmp	r0, #3
 800633c:	bf96      	itet	ls
 800633e:	4b02      	ldrls	r3, [pc, #8]	; (8006348 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006340:	2002      	movhi	r0, #2
 8006342:	5c18      	ldrbls	r0, [r3, r0]
}
 8006344:	bd08      	pop	{r3, pc}
 8006346:	bf00      	nop
 8006348:	0800b1f4 	.word	0x0800b1f4

0800634c <USBD_LL_ClearStallEP>:
{
 800634c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800634e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006352:	f7fd f971 	bl	8003638 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006356:	2803      	cmp	r0, #3
 8006358:	bf96      	itet	ls
 800635a:	4b02      	ldrls	r3, [pc, #8]	; (8006364 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800635c:	2002      	movhi	r0, #2
 800635e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006360:	bd08      	pop	{r3, pc}
 8006362:	bf00      	nop
 8006364:	0800b1f4 	.word	0x0800b1f4

08006368 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006368:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800636a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800636e:	d406      	bmi.n	800637e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006370:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006374:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006378:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 800637c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800637e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006382:	3101      	adds	r1, #1
 8006384:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006388:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800638c:	7898      	ldrb	r0, [r3, #2]
 800638e:	4770      	bx	lr

08006390 <USBD_LL_SetUSBAddress>:
{
 8006390:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006392:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006396:	f7fd f851 	bl	800343c <HAL_PCD_SetAddress>
  switch (hal_status)
 800639a:	2803      	cmp	r0, #3
 800639c:	bf96      	itet	ls
 800639e:	4b02      	ldrls	r3, [pc, #8]	; (80063a8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80063a0:	2002      	movhi	r0, #2
 80063a2:	5c18      	ldrbls	r0, [r3, r0]
}
 80063a4:	bd08      	pop	{r3, pc}
 80063a6:	bf00      	nop
 80063a8:	0800b1f4 	.word	0x0800b1f4

080063ac <USBD_LL_Transmit>:
{
 80063ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80063ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80063b2:	f7fd f8df 	bl	8003574 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80063b6:	2803      	cmp	r0, #3
 80063b8:	bf96      	itet	ls
 80063ba:	4b02      	ldrls	r3, [pc, #8]	; (80063c4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80063bc:	2002      	movhi	r0, #2
 80063be:	5c18      	ldrbls	r0, [r3, r0]
}
 80063c0:	bd08      	pop	{r3, pc}
 80063c2:	bf00      	nop
 80063c4:	0800b1f4 	.word	0x0800b1f4

080063c8 <USBD_LL_PrepareReceive>:
{
 80063c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80063ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80063ce:	f7fd f8af 	bl	8003530 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80063d2:	2803      	cmp	r0, #3
 80063d4:	bf96      	itet	ls
 80063d6:	4b02      	ldrls	r3, [pc, #8]	; (80063e0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80063d8:	2002      	movhi	r0, #2
 80063da:	5c18      	ldrbls	r0, [r3, r0]
}
 80063dc:	bd08      	pop	{r3, pc}
 80063de:	bf00      	nop
 80063e0:	0800b1f4 	.word	0x0800b1f4

080063e4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80063e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80063e8:	f7fd b8ba 	b.w	8003560 <HAL_PCD_EP_GetRxCount>

080063ec <USBD_static_malloc>:
}
 80063ec:	4800      	ldr	r0, [pc, #0]	; (80063f0 <USBD_static_malloc+0x4>)
 80063ee:	4770      	bx	lr
 80063f0:	20001838 	.word	0x20001838

080063f4 <USBD_static_free>:
}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <HAL_PCDEx_SetConnectionState>:
}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <__cvt>:
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006402:	461f      	mov	r7, r3
 8006404:	bfbb      	ittet	lt
 8006406:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800640a:	461f      	movlt	r7, r3
 800640c:	2300      	movge	r3, #0
 800640e:	232d      	movlt	r3, #45	; 0x2d
 8006410:	b088      	sub	sp, #32
 8006412:	4614      	mov	r4, r2
 8006414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006416:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006418:	7013      	strb	r3, [r2, #0]
 800641a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800641c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006420:	f023 0820 	bic.w	r8, r3, #32
 8006424:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006428:	d005      	beq.n	8006436 <__cvt+0x3a>
 800642a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800642e:	d100      	bne.n	8006432 <__cvt+0x36>
 8006430:	3501      	adds	r5, #1
 8006432:	2302      	movs	r3, #2
 8006434:	e000      	b.n	8006438 <__cvt+0x3c>
 8006436:	2303      	movs	r3, #3
 8006438:	aa07      	add	r2, sp, #28
 800643a:	9204      	str	r2, [sp, #16]
 800643c:	aa06      	add	r2, sp, #24
 800643e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006442:	e9cd 3500 	strd	r3, r5, [sp]
 8006446:	4622      	mov	r2, r4
 8006448:	463b      	mov	r3, r7
 800644a:	f000 fe6d 	bl	8007128 <_dtoa_r>
 800644e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006452:	4606      	mov	r6, r0
 8006454:	d102      	bne.n	800645c <__cvt+0x60>
 8006456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006458:	07db      	lsls	r3, r3, #31
 800645a:	d522      	bpl.n	80064a2 <__cvt+0xa6>
 800645c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006460:	eb06 0905 	add.w	r9, r6, r5
 8006464:	d110      	bne.n	8006488 <__cvt+0x8c>
 8006466:	7833      	ldrb	r3, [r6, #0]
 8006468:	2b30      	cmp	r3, #48	; 0x30
 800646a:	d10a      	bne.n	8006482 <__cvt+0x86>
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	4620      	mov	r0, r4
 8006472:	4639      	mov	r1, r7
 8006474:	f7fa fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8006478:	b918      	cbnz	r0, 8006482 <__cvt+0x86>
 800647a:	f1c5 0501 	rsb	r5, r5, #1
 800647e:	f8ca 5000 	str.w	r5, [sl]
 8006482:	f8da 3000 	ldr.w	r3, [sl]
 8006486:	4499      	add	r9, r3
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	4620      	mov	r0, r4
 800648e:	4639      	mov	r1, r7
 8006490:	f7fa fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8006494:	b108      	cbz	r0, 800649a <__cvt+0x9e>
 8006496:	f8cd 901c 	str.w	r9, [sp, #28]
 800649a:	2230      	movs	r2, #48	; 0x30
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	454b      	cmp	r3, r9
 80064a0:	d307      	bcc.n	80064b2 <__cvt+0xb6>
 80064a2:	4630      	mov	r0, r6
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064a8:	1b9b      	subs	r3, r3, r6
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	b008      	add	sp, #32
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	9107      	str	r1, [sp, #28]
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e7f0      	b.n	800649c <__cvt+0xa0>

080064ba <__exponent>:
 80064ba:	4603      	mov	r3, r0
 80064bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064be:	2900      	cmp	r1, #0
 80064c0:	f803 2b02 	strb.w	r2, [r3], #2
 80064c4:	bfb6      	itet	lt
 80064c6:	222d      	movlt	r2, #45	; 0x2d
 80064c8:	222b      	movge	r2, #43	; 0x2b
 80064ca:	4249      	neglt	r1, r1
 80064cc:	2909      	cmp	r1, #9
 80064ce:	7042      	strb	r2, [r0, #1]
 80064d0:	dd2a      	ble.n	8006528 <__exponent+0x6e>
 80064d2:	f10d 0207 	add.w	r2, sp, #7
 80064d6:	4617      	mov	r7, r2
 80064d8:	260a      	movs	r6, #10
 80064da:	fb91 f5f6 	sdiv	r5, r1, r6
 80064de:	4694      	mov	ip, r2
 80064e0:	fb06 1415 	mls	r4, r6, r5, r1
 80064e4:	3430      	adds	r4, #48	; 0x30
 80064e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80064ea:	460c      	mov	r4, r1
 80064ec:	2c63      	cmp	r4, #99	; 0x63
 80064ee:	4629      	mov	r1, r5
 80064f0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80064f4:	dcf1      	bgt.n	80064da <__exponent+0x20>
 80064f6:	3130      	adds	r1, #48	; 0x30
 80064f8:	f1ac 0402 	sub.w	r4, ip, #2
 80064fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006500:	4622      	mov	r2, r4
 8006502:	1c41      	adds	r1, r0, #1
 8006504:	42ba      	cmp	r2, r7
 8006506:	d30a      	bcc.n	800651e <__exponent+0x64>
 8006508:	f10d 0209 	add.w	r2, sp, #9
 800650c:	eba2 020c 	sub.w	r2, r2, ip
 8006510:	42bc      	cmp	r4, r7
 8006512:	bf88      	it	hi
 8006514:	2200      	movhi	r2, #0
 8006516:	4413      	add	r3, r2
 8006518:	1a18      	subs	r0, r3, r0
 800651a:	b003      	add	sp, #12
 800651c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006522:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006526:	e7ed      	b.n	8006504 <__exponent+0x4a>
 8006528:	2330      	movs	r3, #48	; 0x30
 800652a:	3130      	adds	r1, #48	; 0x30
 800652c:	7083      	strb	r3, [r0, #2]
 800652e:	70c1      	strb	r1, [r0, #3]
 8006530:	1d03      	adds	r3, r0, #4
 8006532:	e7f1      	b.n	8006518 <__exponent+0x5e>

08006534 <_printf_float>:
 8006534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	b091      	sub	sp, #68	; 0x44
 800653a:	460c      	mov	r4, r1
 800653c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006540:	4616      	mov	r6, r2
 8006542:	461f      	mov	r7, r3
 8006544:	4605      	mov	r5, r0
 8006546:	f000 fcd3 	bl	8006ef0 <_localeconv_r>
 800654a:	6803      	ldr	r3, [r0, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	f7f9 fdfe 	bl	8000150 <strlen>
 8006554:	2300      	movs	r3, #0
 8006556:	930e      	str	r3, [sp, #56]	; 0x38
 8006558:	f8d8 3000 	ldr.w	r3, [r8]
 800655c:	900a      	str	r0, [sp, #40]	; 0x28
 800655e:	3307      	adds	r3, #7
 8006560:	f023 0307 	bic.w	r3, r3, #7
 8006564:	f103 0208 	add.w	r2, r3, #8
 8006568:	f894 9018 	ldrb.w	r9, [r4, #24]
 800656c:	f8d4 b000 	ldr.w	fp, [r4]
 8006570:	f8c8 2000 	str.w	r2, [r8]
 8006574:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006578:	4652      	mov	r2, sl
 800657a:	4643      	mov	r3, r8
 800657c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006580:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006584:	930b      	str	r3, [sp, #44]	; 0x2c
 8006586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800658a:	4650      	mov	r0, sl
 800658c:	4b9c      	ldr	r3, [pc, #624]	; (8006800 <_printf_float+0x2cc>)
 800658e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006590:	f7fa fa3c 	bl	8000a0c <__aeabi_dcmpun>
 8006594:	bb70      	cbnz	r0, 80065f4 <_printf_float+0xc0>
 8006596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659a:	4650      	mov	r0, sl
 800659c:	4b98      	ldr	r3, [pc, #608]	; (8006800 <_printf_float+0x2cc>)
 800659e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065a0:	f7fa fa16 	bl	80009d0 <__aeabi_dcmple>
 80065a4:	bb30      	cbnz	r0, 80065f4 <_printf_float+0xc0>
 80065a6:	2200      	movs	r2, #0
 80065a8:	2300      	movs	r3, #0
 80065aa:	4650      	mov	r0, sl
 80065ac:	4641      	mov	r1, r8
 80065ae:	f7fa fa05 	bl	80009bc <__aeabi_dcmplt>
 80065b2:	b110      	cbz	r0, 80065ba <_printf_float+0x86>
 80065b4:	232d      	movs	r3, #45	; 0x2d
 80065b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ba:	4a92      	ldr	r2, [pc, #584]	; (8006804 <_printf_float+0x2d0>)
 80065bc:	4b92      	ldr	r3, [pc, #584]	; (8006808 <_printf_float+0x2d4>)
 80065be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80065c2:	bf94      	ite	ls
 80065c4:	4690      	movls	r8, r2
 80065c6:	4698      	movhi	r8, r3
 80065c8:	2303      	movs	r3, #3
 80065ca:	f04f 0a00 	mov.w	sl, #0
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	f02b 0304 	bic.w	r3, fp, #4
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	4633      	mov	r3, r6
 80065d8:	4621      	mov	r1, r4
 80065da:	4628      	mov	r0, r5
 80065dc:	9700      	str	r7, [sp, #0]
 80065de:	aa0f      	add	r2, sp, #60	; 0x3c
 80065e0:	f000 f9d6 	bl	8006990 <_printf_common>
 80065e4:	3001      	adds	r0, #1
 80065e6:	f040 8090 	bne.w	800670a <_printf_float+0x1d6>
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ee:	b011      	add	sp, #68	; 0x44
 80065f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f4:	4652      	mov	r2, sl
 80065f6:	4643      	mov	r3, r8
 80065f8:	4650      	mov	r0, sl
 80065fa:	4641      	mov	r1, r8
 80065fc:	f7fa fa06 	bl	8000a0c <__aeabi_dcmpun>
 8006600:	b148      	cbz	r0, 8006616 <_printf_float+0xe2>
 8006602:	f1b8 0f00 	cmp.w	r8, #0
 8006606:	bfb8      	it	lt
 8006608:	232d      	movlt	r3, #45	; 0x2d
 800660a:	4a80      	ldr	r2, [pc, #512]	; (800680c <_printf_float+0x2d8>)
 800660c:	bfb8      	it	lt
 800660e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006612:	4b7f      	ldr	r3, [pc, #508]	; (8006810 <_printf_float+0x2dc>)
 8006614:	e7d3      	b.n	80065be <_printf_float+0x8a>
 8006616:	6863      	ldr	r3, [r4, #4]
 8006618:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	d142      	bne.n	80066a6 <_printf_float+0x172>
 8006620:	2306      	movs	r3, #6
 8006622:	6063      	str	r3, [r4, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	9206      	str	r2, [sp, #24]
 8006628:	aa0e      	add	r2, sp, #56	; 0x38
 800662a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800662e:	aa0d      	add	r2, sp, #52	; 0x34
 8006630:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006634:	9203      	str	r2, [sp, #12]
 8006636:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800663a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	6863      	ldr	r3, [r4, #4]
 8006642:	4652      	mov	r2, sl
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4628      	mov	r0, r5
 8006648:	4643      	mov	r3, r8
 800664a:	910b      	str	r1, [sp, #44]	; 0x2c
 800664c:	f7ff fed6 	bl	80063fc <__cvt>
 8006650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006652:	4680      	mov	r8, r0
 8006654:	2947      	cmp	r1, #71	; 0x47
 8006656:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006658:	d108      	bne.n	800666c <_printf_float+0x138>
 800665a:	1cc8      	adds	r0, r1, #3
 800665c:	db02      	blt.n	8006664 <_printf_float+0x130>
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	4299      	cmp	r1, r3
 8006662:	dd40      	ble.n	80066e6 <_printf_float+0x1b2>
 8006664:	f1a9 0902 	sub.w	r9, r9, #2
 8006668:	fa5f f989 	uxtb.w	r9, r9
 800666c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006670:	d81f      	bhi.n	80066b2 <_printf_float+0x17e>
 8006672:	464a      	mov	r2, r9
 8006674:	3901      	subs	r1, #1
 8006676:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800667a:	910d      	str	r1, [sp, #52]	; 0x34
 800667c:	f7ff ff1d 	bl	80064ba <__exponent>
 8006680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006682:	4682      	mov	sl, r0
 8006684:	1813      	adds	r3, r2, r0
 8006686:	2a01      	cmp	r2, #1
 8006688:	6123      	str	r3, [r4, #16]
 800668a:	dc02      	bgt.n	8006692 <_printf_float+0x15e>
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	07d2      	lsls	r2, r2, #31
 8006690:	d501      	bpl.n	8006696 <_printf_float+0x162>
 8006692:	3301      	adds	r3, #1
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800669a:	2b00      	cmp	r3, #0
 800669c:	d09b      	beq.n	80065d6 <_printf_float+0xa2>
 800669e:	232d      	movs	r3, #45	; 0x2d
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a4:	e797      	b.n	80065d6 <_printf_float+0xa2>
 80066a6:	2947      	cmp	r1, #71	; 0x47
 80066a8:	d1bc      	bne.n	8006624 <_printf_float+0xf0>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ba      	bne.n	8006624 <_printf_float+0xf0>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7b7      	b.n	8006622 <_printf_float+0xee>
 80066b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80066b6:	d118      	bne.n	80066ea <_printf_float+0x1b6>
 80066b8:	2900      	cmp	r1, #0
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	dd0b      	ble.n	80066d6 <_printf_float+0x1a2>
 80066be:	6121      	str	r1, [r4, #16]
 80066c0:	b913      	cbnz	r3, 80066c8 <_printf_float+0x194>
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	07d0      	lsls	r0, r2, #31
 80066c6:	d502      	bpl.n	80066ce <_printf_float+0x19a>
 80066c8:	3301      	adds	r3, #1
 80066ca:	440b      	add	r3, r1
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	f04f 0a00 	mov.w	sl, #0
 80066d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80066d4:	e7df      	b.n	8006696 <_printf_float+0x162>
 80066d6:	b913      	cbnz	r3, 80066de <_printf_float+0x1aa>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	07d2      	lsls	r2, r2, #31
 80066dc:	d501      	bpl.n	80066e2 <_printf_float+0x1ae>
 80066de:	3302      	adds	r3, #2
 80066e0:	e7f4      	b.n	80066cc <_printf_float+0x198>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7f2      	b.n	80066cc <_printf_float+0x198>
 80066e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80066ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ec:	4299      	cmp	r1, r3
 80066ee:	db05      	blt.n	80066fc <_printf_float+0x1c8>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	6121      	str	r1, [r4, #16]
 80066f4:	07d8      	lsls	r0, r3, #31
 80066f6:	d5ea      	bpl.n	80066ce <_printf_float+0x19a>
 80066f8:	1c4b      	adds	r3, r1, #1
 80066fa:	e7e7      	b.n	80066cc <_printf_float+0x198>
 80066fc:	2900      	cmp	r1, #0
 80066fe:	bfcc      	ite	gt
 8006700:	2201      	movgt	r2, #1
 8006702:	f1c1 0202 	rsble	r2, r1, #2
 8006706:	4413      	add	r3, r2
 8006708:	e7e0      	b.n	80066cc <_printf_float+0x198>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	055a      	lsls	r2, r3, #21
 800670e:	d407      	bmi.n	8006720 <_printf_float+0x1ec>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	4642      	mov	r2, r8
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d12b      	bne.n	8006776 <_printf_float+0x242>
 800671e:	e764      	b.n	80065ea <_printf_float+0xb6>
 8006720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006724:	f240 80dd 	bls.w	80068e2 <_printf_float+0x3ae>
 8006728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	f7fa f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8006734:	2800      	cmp	r0, #0
 8006736:	d033      	beq.n	80067a0 <_printf_float+0x26c>
 8006738:	2301      	movs	r3, #1
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	4a35      	ldr	r2, [pc, #212]	; (8006814 <_printf_float+0x2e0>)
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af51 	beq.w	80065ea <_printf_float+0xb6>
 8006748:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800674c:	429a      	cmp	r2, r3
 800674e:	db02      	blt.n	8006756 <_printf_float+0x222>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	07d8      	lsls	r0, r3, #31
 8006754:	d50f      	bpl.n	8006776 <_printf_float+0x242>
 8006756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	f43f af42 	beq.w	80065ea <_printf_float+0xb6>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	f104 091a 	add.w	r9, r4, #26
 800676e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006770:	3b01      	subs	r3, #1
 8006772:	4543      	cmp	r3, r8
 8006774:	dc09      	bgt.n	800678a <_printf_float+0x256>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	079b      	lsls	r3, r3, #30
 800677a:	f100 8104 	bmi.w	8006986 <_printf_float+0x452>
 800677e:	68e0      	ldr	r0, [r4, #12]
 8006780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006782:	4298      	cmp	r0, r3
 8006784:	bfb8      	it	lt
 8006786:	4618      	movlt	r0, r3
 8006788:	e731      	b.n	80065ee <_printf_float+0xba>
 800678a:	2301      	movs	r3, #1
 800678c:	464a      	mov	r2, r9
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f af28 	beq.w	80065ea <_printf_float+0xb6>
 800679a:	f108 0801 	add.w	r8, r8, #1
 800679e:	e7e6      	b.n	800676e <_printf_float+0x23a>
 80067a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dc38      	bgt.n	8006818 <_printf_float+0x2e4>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	4a19      	ldr	r2, [pc, #100]	; (8006814 <_printf_float+0x2e0>)
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	f43f af1a 	beq.w	80065ea <_printf_float+0xb6>
 80067b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d102      	bne.n	80067c4 <_printf_float+0x290>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07d9      	lsls	r1, r3, #31
 80067c2:	d5d8      	bpl.n	8006776 <_printf_float+0x242>
 80067c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af0b 	beq.w	80065ea <_printf_float+0xb6>
 80067d4:	f04f 0900 	mov.w	r9, #0
 80067d8:	f104 0a1a 	add.w	sl, r4, #26
 80067dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067de:	425b      	negs	r3, r3
 80067e0:	454b      	cmp	r3, r9
 80067e2:	dc01      	bgt.n	80067e8 <_printf_float+0x2b4>
 80067e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067e6:	e794      	b.n	8006712 <_printf_float+0x1de>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f aef9 	beq.w	80065ea <_printf_float+0xb6>
 80067f8:	f109 0901 	add.w	r9, r9, #1
 80067fc:	e7ee      	b.n	80067dc <_printf_float+0x2a8>
 80067fe:	bf00      	nop
 8006800:	7fefffff 	.word	0x7fefffff
 8006804:	0800b1f8 	.word	0x0800b1f8
 8006808:	0800b1fc 	.word	0x0800b1fc
 800680c:	0800b200 	.word	0x0800b200
 8006810:	0800b204 	.word	0x0800b204
 8006814:	0800b208 	.word	0x0800b208
 8006818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800681a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800681c:	429a      	cmp	r2, r3
 800681e:	bfa8      	it	ge
 8006820:	461a      	movge	r2, r3
 8006822:	2a00      	cmp	r2, #0
 8006824:	4691      	mov	r9, r2
 8006826:	dc37      	bgt.n	8006898 <_printf_float+0x364>
 8006828:	f04f 0b00 	mov.w	fp, #0
 800682c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006830:	f104 021a 	add.w	r2, r4, #26
 8006834:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006838:	ebaa 0309 	sub.w	r3, sl, r9
 800683c:	455b      	cmp	r3, fp
 800683e:	dc33      	bgt.n	80068a8 <_printf_float+0x374>
 8006840:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006844:	429a      	cmp	r2, r3
 8006846:	db3b      	blt.n	80068c0 <_printf_float+0x38c>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07da      	lsls	r2, r3, #31
 800684c:	d438      	bmi.n	80068c0 <_printf_float+0x38c>
 800684e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006852:	eba2 0903 	sub.w	r9, r2, r3
 8006856:	eba2 020a 	sub.w	r2, r2, sl
 800685a:	4591      	cmp	r9, r2
 800685c:	bfa8      	it	ge
 800685e:	4691      	movge	r9, r2
 8006860:	f1b9 0f00 	cmp.w	r9, #0
 8006864:	dc34      	bgt.n	80068d0 <_printf_float+0x39c>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800686e:	f104 0a1a 	add.w	sl, r4, #26
 8006872:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	eba3 0309 	sub.w	r3, r3, r9
 800687c:	4543      	cmp	r3, r8
 800687e:	f77f af7a 	ble.w	8006776 <_printf_float+0x242>
 8006882:	2301      	movs	r3, #1
 8006884:	4652      	mov	r2, sl
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f aeac 	beq.w	80065ea <_printf_float+0xb6>
 8006892:	f108 0801 	add.w	r8, r8, #1
 8006896:	e7ec      	b.n	8006872 <_printf_float+0x33e>
 8006898:	4613      	mov	r3, r2
 800689a:	4631      	mov	r1, r6
 800689c:	4642      	mov	r2, r8
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	d1c0      	bne.n	8006828 <_printf_float+0x2f4>
 80068a6:	e6a0      	b.n	80065ea <_printf_float+0xb6>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f ae99 	beq.w	80065ea <_printf_float+0xb6>
 80068b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068ba:	f10b 0b01 	add.w	fp, fp, #1
 80068be:	e7b9      	b.n	8006834 <_printf_float+0x300>
 80068c0:	4631      	mov	r1, r6
 80068c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	d1bf      	bne.n	800684e <_printf_float+0x31a>
 80068ce:	e68c      	b.n	80065ea <_printf_float+0xb6>
 80068d0:	464b      	mov	r3, r9
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	eb08 020a 	add.w	r2, r8, sl
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	d1c2      	bne.n	8006866 <_printf_float+0x332>
 80068e0:	e683      	b.n	80065ea <_printf_float+0xb6>
 80068e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068e4:	2a01      	cmp	r2, #1
 80068e6:	dc01      	bgt.n	80068ec <_printf_float+0x3b8>
 80068e8:	07db      	lsls	r3, r3, #31
 80068ea:	d539      	bpl.n	8006960 <_printf_float+0x42c>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4642      	mov	r2, r8
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f ae77 	beq.w	80065ea <_printf_float+0xb6>
 80068fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f ae6f 	beq.w	80065ea <_printf_float+0xb6>
 800690c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006918:	f7fa f846 	bl	80009a8 <__aeabi_dcmpeq>
 800691c:	b9d8      	cbnz	r0, 8006956 <_printf_float+0x422>
 800691e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8006922:	f108 0201 	add.w	r2, r8, #1
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	d10e      	bne.n	800694e <_printf_float+0x41a>
 8006930:	e65b      	b.n	80065ea <_printf_float+0xb6>
 8006932:	2301      	movs	r3, #1
 8006934:	464a      	mov	r2, r9
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f ae54 	beq.w	80065ea <_printf_float+0xb6>
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006948:	3b01      	subs	r3, #1
 800694a:	4543      	cmp	r3, r8
 800694c:	dcf1      	bgt.n	8006932 <_printf_float+0x3fe>
 800694e:	4653      	mov	r3, sl
 8006950:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006954:	e6de      	b.n	8006714 <_printf_float+0x1e0>
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	f104 091a 	add.w	r9, r4, #26
 800695e:	e7f2      	b.n	8006946 <_printf_float+0x412>
 8006960:	2301      	movs	r3, #1
 8006962:	4642      	mov	r2, r8
 8006964:	e7df      	b.n	8006926 <_printf_float+0x3f2>
 8006966:	2301      	movs	r3, #1
 8006968:	464a      	mov	r2, r9
 800696a:	4631      	mov	r1, r6
 800696c:	4628      	mov	r0, r5
 800696e:	47b8      	blx	r7
 8006970:	3001      	adds	r0, #1
 8006972:	f43f ae3a 	beq.w	80065ea <_printf_float+0xb6>
 8006976:	f108 0801 	add.w	r8, r8, #1
 800697a:	68e3      	ldr	r3, [r4, #12]
 800697c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800697e:	1a5b      	subs	r3, r3, r1
 8006980:	4543      	cmp	r3, r8
 8006982:	dcf0      	bgt.n	8006966 <_printf_float+0x432>
 8006984:	e6fb      	b.n	800677e <_printf_float+0x24a>
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	f104 0919 	add.w	r9, r4, #25
 800698e:	e7f4      	b.n	800697a <_printf_float+0x446>

08006990 <_printf_common>:
 8006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	4616      	mov	r6, r2
 8006996:	4699      	mov	r9, r3
 8006998:	688a      	ldr	r2, [r1, #8]
 800699a:	690b      	ldr	r3, [r1, #16]
 800699c:	4607      	mov	r7, r0
 800699e:	4293      	cmp	r3, r2
 80069a0:	bfb8      	it	lt
 80069a2:	4613      	movlt	r3, r2
 80069a4:	6033      	str	r3, [r6, #0]
 80069a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069aa:	460c      	mov	r4, r1
 80069ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069b0:	b10a      	cbz	r2, 80069b6 <_printf_common+0x26>
 80069b2:	3301      	adds	r3, #1
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	0699      	lsls	r1, r3, #26
 80069ba:	bf42      	ittt	mi
 80069bc:	6833      	ldrmi	r3, [r6, #0]
 80069be:	3302      	addmi	r3, #2
 80069c0:	6033      	strmi	r3, [r6, #0]
 80069c2:	6825      	ldr	r5, [r4, #0]
 80069c4:	f015 0506 	ands.w	r5, r5, #6
 80069c8:	d106      	bne.n	80069d8 <_printf_common+0x48>
 80069ca:	f104 0a19 	add.w	sl, r4, #25
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	6832      	ldr	r2, [r6, #0]
 80069d2:	1a9b      	subs	r3, r3, r2
 80069d4:	42ab      	cmp	r3, r5
 80069d6:	dc2b      	bgt.n	8006a30 <_printf_common+0xa0>
 80069d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069dc:	1e13      	subs	r3, r2, #0
 80069de:	6822      	ldr	r2, [r4, #0]
 80069e0:	bf18      	it	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	0692      	lsls	r2, r2, #26
 80069e6:	d430      	bmi.n	8006a4a <_printf_common+0xba>
 80069e8:	4649      	mov	r1, r9
 80069ea:	4638      	mov	r0, r7
 80069ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f0:	47c0      	blx	r8
 80069f2:	3001      	adds	r0, #1
 80069f4:	d023      	beq.n	8006a3e <_printf_common+0xae>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	6922      	ldr	r2, [r4, #16]
 80069fa:	f003 0306 	and.w	r3, r3, #6
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	bf14      	ite	ne
 8006a02:	2500      	movne	r5, #0
 8006a04:	6833      	ldreq	r3, [r6, #0]
 8006a06:	f04f 0600 	mov.w	r6, #0
 8006a0a:	bf08      	it	eq
 8006a0c:	68e5      	ldreq	r5, [r4, #12]
 8006a0e:	f104 041a 	add.w	r4, r4, #26
 8006a12:	bf08      	it	eq
 8006a14:	1aed      	subeq	r5, r5, r3
 8006a16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006a1a:	bf08      	it	eq
 8006a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a20:	4293      	cmp	r3, r2
 8006a22:	bfc4      	itt	gt
 8006a24:	1a9b      	subgt	r3, r3, r2
 8006a26:	18ed      	addgt	r5, r5, r3
 8006a28:	42b5      	cmp	r5, r6
 8006a2a:	d11a      	bne.n	8006a62 <_printf_common+0xd2>
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e008      	b.n	8006a42 <_printf_common+0xb2>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4652      	mov	r2, sl
 8006a34:	4649      	mov	r1, r9
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d103      	bne.n	8006a46 <_printf_common+0xb6>
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a46:	3501      	adds	r5, #1
 8006a48:	e7c1      	b.n	80069ce <_printf_common+0x3e>
 8006a4a:	2030      	movs	r0, #48	; 0x30
 8006a4c:	18e1      	adds	r1, r4, r3
 8006a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a58:	4422      	add	r2, r4
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a60:	e7c2      	b.n	80069e8 <_printf_common+0x58>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4622      	mov	r2, r4
 8006a66:	4649      	mov	r1, r9
 8006a68:	4638      	mov	r0, r7
 8006a6a:	47c0      	blx	r8
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d0e6      	beq.n	8006a3e <_printf_common+0xae>
 8006a70:	3601      	adds	r6, #1
 8006a72:	e7d9      	b.n	8006a28 <_printf_common+0x98>

08006a74 <_printf_i>:
 8006a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	7e0f      	ldrb	r7, [r1, #24]
 8006a7a:	4691      	mov	r9, r2
 8006a7c:	2f78      	cmp	r7, #120	; 0x78
 8006a7e:	4680      	mov	r8, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	469a      	mov	sl, r3
 8006a84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a8a:	d807      	bhi.n	8006a9c <_printf_i+0x28>
 8006a8c:	2f62      	cmp	r7, #98	; 0x62
 8006a8e:	d80a      	bhi.n	8006aa6 <_printf_i+0x32>
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	f000 80d5 	beq.w	8006c40 <_printf_i+0x1cc>
 8006a96:	2f58      	cmp	r7, #88	; 0x58
 8006a98:	f000 80c1 	beq.w	8006c1e <_printf_i+0x1aa>
 8006a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aa4:	e03a      	b.n	8006b1c <_printf_i+0xa8>
 8006aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aaa:	2b15      	cmp	r3, #21
 8006aac:	d8f6      	bhi.n	8006a9c <_printf_i+0x28>
 8006aae:	a101      	add	r1, pc, #4	; (adr r1, 8006ab4 <_printf_i+0x40>)
 8006ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ab4:	08006b0d 	.word	0x08006b0d
 8006ab8:	08006b21 	.word	0x08006b21
 8006abc:	08006a9d 	.word	0x08006a9d
 8006ac0:	08006a9d 	.word	0x08006a9d
 8006ac4:	08006a9d 	.word	0x08006a9d
 8006ac8:	08006a9d 	.word	0x08006a9d
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006a9d 	.word	0x08006a9d
 8006ad4:	08006a9d 	.word	0x08006a9d
 8006ad8:	08006a9d 	.word	0x08006a9d
 8006adc:	08006a9d 	.word	0x08006a9d
 8006ae0:	08006c27 	.word	0x08006c27
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006be1 	.word	0x08006be1
 8006aec:	08006a9d 	.word	0x08006a9d
 8006af0:	08006a9d 	.word	0x08006a9d
 8006af4:	08006c49 	.word	0x08006c49
 8006af8:	08006a9d 	.word	0x08006a9d
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006a9d 	.word	0x08006a9d
 8006b04:	08006a9d 	.word	0x08006a9d
 8006b08:	08006be9 	.word	0x08006be9
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	1d1a      	adds	r2, r3, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	602a      	str	r2, [r5, #0]
 8006b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0a0      	b.n	8006c62 <_printf_i+0x1ee>
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	682b      	ldr	r3, [r5, #0]
 8006b24:	0607      	lsls	r7, r0, #24
 8006b26:	f103 0104 	add.w	r1, r3, #4
 8006b2a:	6029      	str	r1, [r5, #0]
 8006b2c:	d501      	bpl.n	8006b32 <_printf_i+0xbe>
 8006b2e:	681e      	ldr	r6, [r3, #0]
 8006b30:	e003      	b.n	8006b3a <_printf_i+0xc6>
 8006b32:	0646      	lsls	r6, r0, #25
 8006b34:	d5fb      	bpl.n	8006b2e <_printf_i+0xba>
 8006b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	da03      	bge.n	8006b46 <_printf_i+0xd2>
 8006b3e:	232d      	movs	r3, #45	; 0x2d
 8006b40:	4276      	negs	r6, r6
 8006b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b46:	230a      	movs	r3, #10
 8006b48:	4859      	ldr	r0, [pc, #356]	; (8006cb0 <_printf_i+0x23c>)
 8006b4a:	e012      	b.n	8006b72 <_printf_i+0xfe>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	1d19      	adds	r1, r3, #4
 8006b52:	6029      	str	r1, [r5, #0]
 8006b54:	0605      	lsls	r5, r0, #24
 8006b56:	d501      	bpl.n	8006b5c <_printf_i+0xe8>
 8006b58:	681e      	ldr	r6, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <_printf_i+0xee>
 8006b5c:	0641      	lsls	r1, r0, #25
 8006b5e:	d5fb      	bpl.n	8006b58 <_printf_i+0xe4>
 8006b60:	881e      	ldrh	r6, [r3, #0]
 8006b62:	2f6f      	cmp	r7, #111	; 0x6f
 8006b64:	bf0c      	ite	eq
 8006b66:	2308      	moveq	r3, #8
 8006b68:	230a      	movne	r3, #10
 8006b6a:	4851      	ldr	r0, [pc, #324]	; (8006cb0 <_printf_i+0x23c>)
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b72:	6865      	ldr	r5, [r4, #4]
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	bfa8      	it	ge
 8006b78:	6821      	ldrge	r1, [r4, #0]
 8006b7a:	60a5      	str	r5, [r4, #8]
 8006b7c:	bfa4      	itt	ge
 8006b7e:	f021 0104 	bicge.w	r1, r1, #4
 8006b82:	6021      	strge	r1, [r4, #0]
 8006b84:	b90e      	cbnz	r6, 8006b8a <_printf_i+0x116>
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	d04b      	beq.n	8006c22 <_printf_i+0x1ae>
 8006b8a:	4615      	mov	r5, r2
 8006b8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b90:	fb03 6711 	mls	r7, r3, r1, r6
 8006b94:	5dc7      	ldrb	r7, [r0, r7]
 8006b96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b9a:	4637      	mov	r7, r6
 8006b9c:	42bb      	cmp	r3, r7
 8006b9e:	460e      	mov	r6, r1
 8006ba0:	d9f4      	bls.n	8006b8c <_printf_i+0x118>
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d10b      	bne.n	8006bbe <_printf_i+0x14a>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	07de      	lsls	r6, r3, #31
 8006baa:	d508      	bpl.n	8006bbe <_printf_i+0x14a>
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	6861      	ldr	r1, [r4, #4]
 8006bb0:	4299      	cmp	r1, r3
 8006bb2:	bfde      	ittt	le
 8006bb4:	2330      	movle	r3, #48	; 0x30
 8006bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bbe:	1b52      	subs	r2, r2, r5
 8006bc0:	6122      	str	r2, [r4, #16]
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	f8cd a000 	str.w	sl, [sp]
 8006bcc:	aa03      	add	r2, sp, #12
 8006bce:	f7ff fedf 	bl	8006990 <_printf_common>
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d14a      	bne.n	8006c6c <_printf_i+0x1f8>
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bda:	b004      	add	sp, #16
 8006bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	f043 0320 	orr.w	r3, r3, #32
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	2778      	movs	r7, #120	; 0x78
 8006bea:	4832      	ldr	r0, [pc, #200]	; (8006cb4 <_printf_i+0x240>)
 8006bec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	6829      	ldr	r1, [r5, #0]
 8006bf4:	061f      	lsls	r7, r3, #24
 8006bf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bfa:	d402      	bmi.n	8006c02 <_printf_i+0x18e>
 8006bfc:	065f      	lsls	r7, r3, #25
 8006bfe:	bf48      	it	mi
 8006c00:	b2b6      	uxthmi	r6, r6
 8006c02:	07df      	lsls	r7, r3, #31
 8006c04:	bf48      	it	mi
 8006c06:	f043 0320 	orrmi.w	r3, r3, #32
 8006c0a:	6029      	str	r1, [r5, #0]
 8006c0c:	bf48      	it	mi
 8006c0e:	6023      	strmi	r3, [r4, #0]
 8006c10:	b91e      	cbnz	r6, 8006c1a <_printf_i+0x1a6>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	f023 0320 	bic.w	r3, r3, #32
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	e7a6      	b.n	8006b6c <_printf_i+0xf8>
 8006c1e:	4824      	ldr	r0, [pc, #144]	; (8006cb0 <_printf_i+0x23c>)
 8006c20:	e7e4      	b.n	8006bec <_printf_i+0x178>
 8006c22:	4615      	mov	r5, r2
 8006c24:	e7bd      	b.n	8006ba2 <_printf_i+0x12e>
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	6826      	ldr	r6, [r4, #0]
 8006c2a:	1d18      	adds	r0, r3, #4
 8006c2c:	6961      	ldr	r1, [r4, #20]
 8006c2e:	6028      	str	r0, [r5, #0]
 8006c30:	0635      	lsls	r5, r6, #24
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	d501      	bpl.n	8006c3a <_printf_i+0x1c6>
 8006c36:	6019      	str	r1, [r3, #0]
 8006c38:	e002      	b.n	8006c40 <_printf_i+0x1cc>
 8006c3a:	0670      	lsls	r0, r6, #25
 8006c3c:	d5fb      	bpl.n	8006c36 <_printf_i+0x1c2>
 8006c3e:	8019      	strh	r1, [r3, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	4615      	mov	r5, r2
 8006c44:	6123      	str	r3, [r4, #16]
 8006c46:	e7bc      	b.n	8006bc2 <_printf_i+0x14e>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	1d1a      	adds	r2, r3, #4
 8006c4e:	602a      	str	r2, [r5, #0]
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	6862      	ldr	r2, [r4, #4]
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f9c1 	bl	8006fdc <memchr>
 8006c5a:	b108      	cbz	r0, 8006c60 <_printf_i+0x1ec>
 8006c5c:	1b40      	subs	r0, r0, r5
 8006c5e:	6060      	str	r0, [r4, #4]
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	6123      	str	r3, [r4, #16]
 8006c64:	2300      	movs	r3, #0
 8006c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6a:	e7aa      	b.n	8006bc2 <_printf_i+0x14e>
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	47d0      	blx	sl
 8006c76:	3001      	adds	r0, #1
 8006c78:	d0ad      	beq.n	8006bd6 <_printf_i+0x162>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	079b      	lsls	r3, r3, #30
 8006c7e:	d413      	bmi.n	8006ca8 <_printf_i+0x234>
 8006c80:	68e0      	ldr	r0, [r4, #12]
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	4298      	cmp	r0, r3
 8006c86:	bfb8      	it	lt
 8006c88:	4618      	movlt	r0, r3
 8006c8a:	e7a6      	b.n	8006bda <_printf_i+0x166>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4632      	mov	r2, r6
 8006c90:	4649      	mov	r1, r9
 8006c92:	4640      	mov	r0, r8
 8006c94:	47d0      	blx	sl
 8006c96:	3001      	adds	r0, #1
 8006c98:	d09d      	beq.n	8006bd6 <_printf_i+0x162>
 8006c9a:	3501      	adds	r5, #1
 8006c9c:	68e3      	ldr	r3, [r4, #12]
 8006c9e:	9903      	ldr	r1, [sp, #12]
 8006ca0:	1a5b      	subs	r3, r3, r1
 8006ca2:	42ab      	cmp	r3, r5
 8006ca4:	dcf2      	bgt.n	8006c8c <_printf_i+0x218>
 8006ca6:	e7eb      	b.n	8006c80 <_printf_i+0x20c>
 8006ca8:	2500      	movs	r5, #0
 8006caa:	f104 0619 	add.w	r6, r4, #25
 8006cae:	e7f5      	b.n	8006c9c <_printf_i+0x228>
 8006cb0:	0800b20a 	.word	0x0800b20a
 8006cb4:	0800b21b 	.word	0x0800b21b

08006cb8 <std>:
 8006cb8:	2300      	movs	r3, #0
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cc6:	6083      	str	r3, [r0, #8]
 8006cc8:	8181      	strh	r1, [r0, #12]
 8006cca:	6643      	str	r3, [r0, #100]	; 0x64
 8006ccc:	81c2      	strh	r2, [r0, #14]
 8006cce:	6183      	str	r3, [r0, #24]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	305c      	adds	r0, #92	; 0x5c
 8006cd6:	f000 f902 	bl	8006ede <memset>
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <std+0x38>)
 8006cdc:	6224      	str	r4, [r4, #32]
 8006cde:	6263      	str	r3, [r4, #36]	; 0x24
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <std+0x3c>)
 8006ce2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <std+0x40>)
 8006ce6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <std+0x44>)
 8006cea:	6323      	str	r3, [r4, #48]	; 0x30
 8006cec:	bd10      	pop	{r4, pc}
 8006cee:	bf00      	nop
 8006cf0:	08006e59 	.word	0x08006e59
 8006cf4:	08006e7b 	.word	0x08006e7b
 8006cf8:	08006eb3 	.word	0x08006eb3
 8006cfc:	08006ed7 	.word	0x08006ed7

08006d00 <stdio_exit_handler>:
 8006d00:	4a02      	ldr	r2, [pc, #8]	; (8006d0c <stdio_exit_handler+0xc>)
 8006d02:	4903      	ldr	r1, [pc, #12]	; (8006d10 <stdio_exit_handler+0x10>)
 8006d04:	4803      	ldr	r0, [pc, #12]	; (8006d14 <stdio_exit_handler+0x14>)
 8006d06:	f000 b869 	b.w	8006ddc <_fwalk_sglue>
 8006d0a:	bf00      	nop
 8006d0c:	2000018c 	.word	0x2000018c
 8006d10:	0800898d 	.word	0x0800898d
 8006d14:	20000198 	.word	0x20000198

08006d18 <cleanup_stdio>:
 8006d18:	6841      	ldr	r1, [r0, #4]
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <cleanup_stdio+0x34>)
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	4604      	mov	r4, r0
 8006d22:	d001      	beq.n	8006d28 <cleanup_stdio+0x10>
 8006d24:	f001 fe32 	bl	800898c <_fflush_r>
 8006d28:	68a1      	ldr	r1, [r4, #8]
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <cleanup_stdio+0x38>)
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <cleanup_stdio+0x1e>
 8006d30:	4620      	mov	r0, r4
 8006d32:	f001 fe2b 	bl	800898c <_fflush_r>
 8006d36:	68e1      	ldr	r1, [r4, #12]
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <cleanup_stdio+0x3c>)
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d004      	beq.n	8006d48 <cleanup_stdio+0x30>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d44:	f001 be22 	b.w	800898c <_fflush_r>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20001a58 	.word	0x20001a58
 8006d50:	20001ac0 	.word	0x20001ac0
 8006d54:	20001b28 	.word	0x20001b28

08006d58 <global_stdio_init.part.0>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <global_stdio_init.part.0+0x30>)
 8006d5c:	4c0b      	ldr	r4, [pc, #44]	; (8006d8c <global_stdio_init.part.0+0x34>)
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <global_stdio_init.part.0+0x38>)
 8006d60:	4620      	mov	r0, r4
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	2104      	movs	r1, #4
 8006d66:	2200      	movs	r2, #0
 8006d68:	f7ff ffa6 	bl	8006cb8 <std>
 8006d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d70:	2201      	movs	r2, #1
 8006d72:	2109      	movs	r1, #9
 8006d74:	f7ff ffa0 	bl	8006cb8 <std>
 8006d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d82:	2112      	movs	r1, #18
 8006d84:	f7ff bf98 	b.w	8006cb8 <std>
 8006d88:	20001b90 	.word	0x20001b90
 8006d8c:	20001a58 	.word	0x20001a58
 8006d90:	08006d01 	.word	0x08006d01

08006d94 <__sfp_lock_acquire>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sfp_lock_acquire+0x8>)
 8006d96:	f000 b91f 	b.w	8006fd8 <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20001b99 	.word	0x20001b99

08006da0 <__sfp_lock_release>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__sfp_lock_release+0x8>)
 8006da2:	f000 b91a 	b.w	8006fda <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	20001b99 	.word	0x20001b99

08006dac <__sinit>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	f7ff fff0 	bl	8006d94 <__sfp_lock_acquire>
 8006db4:	6a23      	ldr	r3, [r4, #32]
 8006db6:	b11b      	cbz	r3, 8006dc0 <__sinit+0x14>
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f7ff bff0 	b.w	8006da0 <__sfp_lock_release>
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <__sinit+0x28>)
 8006dc2:	6223      	str	r3, [r4, #32]
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <__sinit+0x2c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f5      	bne.n	8006db8 <__sinit+0xc>
 8006dcc:	f7ff ffc4 	bl	8006d58 <global_stdio_init.part.0>
 8006dd0:	e7f2      	b.n	8006db8 <__sinit+0xc>
 8006dd2:	bf00      	nop
 8006dd4:	08006d19 	.word	0x08006d19
 8006dd8:	20001b90 	.word	0x20001b90

08006ddc <_fwalk_sglue>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4607      	mov	r7, r0
 8006de2:	4688      	mov	r8, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	2600      	movs	r6, #0
 8006de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dec:	f1b9 0901 	subs.w	r9, r9, #1
 8006df0:	d505      	bpl.n	8006dfe <_fwalk_sglue+0x22>
 8006df2:	6824      	ldr	r4, [r4, #0]
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	d1f7      	bne.n	8006de8 <_fwalk_sglue+0xc>
 8006df8:	4630      	mov	r0, r6
 8006dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d907      	bls.n	8006e14 <_fwalk_sglue+0x38>
 8006e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <_fwalk_sglue+0x38>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	4306      	orrs	r6, r0
 8006e14:	3568      	adds	r5, #104	; 0x68
 8006e16:	e7e9      	b.n	8006dec <_fwalk_sglue+0x10>

08006e18 <siprintf>:
 8006e18:	b40e      	push	{r1, r2, r3}
 8006e1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e1e:	b500      	push	{lr}
 8006e20:	b09c      	sub	sp, #112	; 0x70
 8006e22:	ab1d      	add	r3, sp, #116	; 0x74
 8006e24:	9002      	str	r0, [sp, #8]
 8006e26:	9006      	str	r0, [sp, #24]
 8006e28:	9107      	str	r1, [sp, #28]
 8006e2a:	9104      	str	r1, [sp, #16]
 8006e2c:	4808      	ldr	r0, [pc, #32]	; (8006e50 <siprintf+0x38>)
 8006e2e:	4909      	ldr	r1, [pc, #36]	; (8006e54 <siprintf+0x3c>)
 8006e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e34:	9105      	str	r1, [sp, #20]
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	a902      	add	r1, sp, #8
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	f001 fc26 	bl	800868c <_svfiprintf_r>
 8006e40:	2200      	movs	r2, #0
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	b01c      	add	sp, #112	; 0x70
 8006e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e4c:	b003      	add	sp, #12
 8006e4e:	4770      	bx	lr
 8006e50:	200001e4 	.word	0x200001e4
 8006e54:	ffff0208 	.word	0xffff0208

08006e58 <__sread>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e60:	f000 f86c 	bl	8006f3c <_read_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	bfab      	itete	ge
 8006e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e6c:	181b      	addge	r3, r3, r0
 8006e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e72:	bfac      	ite	ge
 8006e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e76:	81a3      	strhlt	r3, [r4, #12]
 8006e78:	bd10      	pop	{r4, pc}

08006e7a <__swrite>:
 8006e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7e:	461f      	mov	r7, r3
 8006e80:	898b      	ldrh	r3, [r1, #12]
 8006e82:	4605      	mov	r5, r0
 8006e84:	05db      	lsls	r3, r3, #23
 8006e86:	460c      	mov	r4, r1
 8006e88:	4616      	mov	r6, r2
 8006e8a:	d505      	bpl.n	8006e98 <__swrite+0x1e>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e94:	f000 f840 	bl	8006f18 <_lseek_r>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eae:	f000 b857 	b.w	8006f60 <_write_r>

08006eb2 <__sseek>:
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eba:	f000 f82d 	bl	8006f18 <_lseek_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	bf15      	itete	ne
 8006ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ece:	81a3      	strheq	r3, [r4, #12]
 8006ed0:	bf18      	it	ne
 8006ed2:	81a3      	strhne	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__sclose>:
 8006ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eda:	f000 b80d 	b.w	8006ef8 <_close_r>

08006ede <memset>:
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d100      	bne.n	8006ee8 <memset+0xa>
 8006ee6:	4770      	bx	lr
 8006ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8006eec:	e7f9      	b.n	8006ee2 <memset+0x4>
	...

08006ef0 <_localeconv_r>:
 8006ef0:	4800      	ldr	r0, [pc, #0]	; (8006ef4 <_localeconv_r+0x4>)
 8006ef2:	4770      	bx	lr
 8006ef4:	200002d8 	.word	0x200002d8

08006ef8 <_close_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	2300      	movs	r3, #0
 8006efc:	4d05      	ldr	r5, [pc, #20]	; (8006f14 <_close_r+0x1c>)
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	f7fa fe74 	bl	8001bf0 <_close>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_close_r+0x1a>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_close_r+0x1a>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20001b94 	.word	0x20001b94

08006f18 <_lseek_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	4d05      	ldr	r5, [pc, #20]	; (8006f38 <_lseek_r+0x20>)
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f7fa fe6e 	bl	8001c08 <_lseek>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_lseek_r+0x1e>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_lseek_r+0x1e>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20001b94 	.word	0x20001b94

08006f3c <_read_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	2200      	movs	r2, #0
 8006f46:	4d05      	ldr	r5, [pc, #20]	; (8006f5c <_read_r+0x20>)
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fa fe34 	bl	8001bb8 <_read>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_read_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_read_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	20001b94 	.word	0x20001b94

08006f60 <_write_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4d05      	ldr	r5, [pc, #20]	; (8006f80 <_write_r+0x20>)
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fe30 	bl	8001bd4 <_write>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_write_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_write_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20001b94 	.word	0x20001b94

08006f84 <__errno>:
 8006f84:	4b01      	ldr	r3, [pc, #4]	; (8006f8c <__errno+0x8>)
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	200001e4 	.word	0x200001e4

08006f90 <__libc_init_array>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	2600      	movs	r6, #0
 8006f94:	4d0c      	ldr	r5, [pc, #48]	; (8006fc8 <__libc_init_array+0x38>)
 8006f96:	4c0d      	ldr	r4, [pc, #52]	; (8006fcc <__libc_init_array+0x3c>)
 8006f98:	1b64      	subs	r4, r4, r5
 8006f9a:	10a4      	asrs	r4, r4, #2
 8006f9c:	42a6      	cmp	r6, r4
 8006f9e:	d109      	bne.n	8006fb4 <__libc_init_array+0x24>
 8006fa0:	f002 f886 	bl	80090b0 <_init>
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	4d0a      	ldr	r5, [pc, #40]	; (8006fd0 <__libc_init_array+0x40>)
 8006fa8:	4c0a      	ldr	r4, [pc, #40]	; (8006fd4 <__libc_init_array+0x44>)
 8006faa:	1b64      	subs	r4, r4, r5
 8006fac:	10a4      	asrs	r4, r4, #2
 8006fae:	42a6      	cmp	r6, r4
 8006fb0:	d105      	bne.n	8006fbe <__libc_init_array+0x2e>
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb8:	4798      	blx	r3
 8006fba:	3601      	adds	r6, #1
 8006fbc:	e7ee      	b.n	8006f9c <__libc_init_array+0xc>
 8006fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc2:	4798      	blx	r3
 8006fc4:	3601      	adds	r6, #1
 8006fc6:	e7f2      	b.n	8006fae <__libc_init_array+0x1e>
 8006fc8:	0800b56c 	.word	0x0800b56c
 8006fcc:	0800b56c 	.word	0x0800b56c
 8006fd0:	0800b56c 	.word	0x0800b56c
 8006fd4:	0800b570 	.word	0x0800b570

08006fd8 <__retarget_lock_acquire_recursive>:
 8006fd8:	4770      	bx	lr

08006fda <__retarget_lock_release_recursive>:
 8006fda:	4770      	bx	lr

08006fdc <memchr>:
 8006fdc:	4603      	mov	r3, r0
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	b2c9      	uxtb	r1, r1
 8006fe2:	4402      	add	r2, r0
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	d101      	bne.n	8006fee <memchr+0x12>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e003      	b.n	8006ff6 <memchr+0x1a>
 8006fee:	7804      	ldrb	r4, [r0, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	428c      	cmp	r4, r1
 8006ff4:	d1f6      	bne.n	8006fe4 <memchr+0x8>
 8006ff6:	bd10      	pop	{r4, pc}

08006ff8 <memcpy>:
 8006ff8:	440a      	add	r2, r1
 8006ffa:	4291      	cmp	r1, r2
 8006ffc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007000:	d100      	bne.n	8007004 <memcpy+0xc>
 8007002:	4770      	bx	lr
 8007004:	b510      	push	{r4, lr}
 8007006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800700a:	4291      	cmp	r1, r2
 800700c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007010:	d1f9      	bne.n	8007006 <memcpy+0xe>
 8007012:	bd10      	pop	{r4, pc}

08007014 <quorem>:
 8007014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	6903      	ldr	r3, [r0, #16]
 800701a:	690c      	ldr	r4, [r1, #16]
 800701c:	4607      	mov	r7, r0
 800701e:	42a3      	cmp	r3, r4
 8007020:	db7f      	blt.n	8007122 <quorem+0x10e>
 8007022:	3c01      	subs	r4, #1
 8007024:	f100 0514 	add.w	r5, r0, #20
 8007028:	f101 0814 	add.w	r8, r1, #20
 800702c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800703a:	3301      	adds	r3, #1
 800703c:	429a      	cmp	r2, r3
 800703e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007042:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007046:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800704a:	d331      	bcc.n	80070b0 <quorem+0x9c>
 800704c:	f04f 0e00 	mov.w	lr, #0
 8007050:	4640      	mov	r0, r8
 8007052:	46ac      	mov	ip, r5
 8007054:	46f2      	mov	sl, lr
 8007056:	f850 2b04 	ldr.w	r2, [r0], #4
 800705a:	b293      	uxth	r3, r2
 800705c:	fb06 e303 	mla	r3, r6, r3, lr
 8007060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007064:	0c1a      	lsrs	r2, r3, #16
 8007066:	b29b      	uxth	r3, r3
 8007068:	fb06 220e 	mla	r2, r6, lr, r2
 800706c:	ebaa 0303 	sub.w	r3, sl, r3
 8007070:	f8dc a000 	ldr.w	sl, [ip]
 8007074:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007078:	fa1f fa8a 	uxth.w	sl, sl
 800707c:	4453      	add	r3, sl
 800707e:	f8dc a000 	ldr.w	sl, [ip]
 8007082:	b292      	uxth	r2, r2
 8007084:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800708c:	b29b      	uxth	r3, r3
 800708e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007092:	4581      	cmp	r9, r0
 8007094:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007098:	f84c 3b04 	str.w	r3, [ip], #4
 800709c:	d2db      	bcs.n	8007056 <quorem+0x42>
 800709e:	f855 300b 	ldr.w	r3, [r5, fp]
 80070a2:	b92b      	cbnz	r3, 80070b0 <quorem+0x9c>
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	3b04      	subs	r3, #4
 80070a8:	429d      	cmp	r5, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	d32d      	bcc.n	800710a <quorem+0xf6>
 80070ae:	613c      	str	r4, [r7, #16]
 80070b0:	4638      	mov	r0, r7
 80070b2:	f001 f993 	bl	80083dc <__mcmp>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	db23      	blt.n	8007102 <quorem+0xee>
 80070ba:	4629      	mov	r1, r5
 80070bc:	2000      	movs	r0, #0
 80070be:	3601      	adds	r6, #1
 80070c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80070c4:	f8d1 c000 	ldr.w	ip, [r1]
 80070c8:	b293      	uxth	r3, r2
 80070ca:	1ac3      	subs	r3, r0, r3
 80070cc:	0c12      	lsrs	r2, r2, #16
 80070ce:	fa1f f08c 	uxth.w	r0, ip
 80070d2:	4403      	add	r3, r0
 80070d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80070d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070dc:	b29b      	uxth	r3, r3
 80070de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070e2:	45c1      	cmp	r9, r8
 80070e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070e8:	f841 3b04 	str.w	r3, [r1], #4
 80070ec:	d2e8      	bcs.n	80070c0 <quorem+0xac>
 80070ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f6:	b922      	cbnz	r2, 8007102 <quorem+0xee>
 80070f8:	3b04      	subs	r3, #4
 80070fa:	429d      	cmp	r5, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	d30a      	bcc.n	8007116 <quorem+0x102>
 8007100:	613c      	str	r4, [r7, #16]
 8007102:	4630      	mov	r0, r6
 8007104:	b003      	add	sp, #12
 8007106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	3b04      	subs	r3, #4
 800710e:	2a00      	cmp	r2, #0
 8007110:	d1cd      	bne.n	80070ae <quorem+0x9a>
 8007112:	3c01      	subs	r4, #1
 8007114:	e7c8      	b.n	80070a8 <quorem+0x94>
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	3b04      	subs	r3, #4
 800711a:	2a00      	cmp	r2, #0
 800711c:	d1f0      	bne.n	8007100 <quorem+0xec>
 800711e:	3c01      	subs	r4, #1
 8007120:	e7eb      	b.n	80070fa <quorem+0xe6>
 8007122:	2000      	movs	r0, #0
 8007124:	e7ee      	b.n	8007104 <quorem+0xf0>
	...

08007128 <_dtoa_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	4616      	mov	r6, r2
 800712e:	461f      	mov	r7, r3
 8007130:	69c4      	ldr	r4, [r0, #28]
 8007132:	b099      	sub	sp, #100	; 0x64
 8007134:	4605      	mov	r5, r0
 8007136:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800713a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800713e:	b974      	cbnz	r4, 800715e <_dtoa_r+0x36>
 8007140:	2010      	movs	r0, #16
 8007142:	f000 fe1d 	bl	8007d80 <malloc>
 8007146:	4602      	mov	r2, r0
 8007148:	61e8      	str	r0, [r5, #28]
 800714a:	b920      	cbnz	r0, 8007156 <_dtoa_r+0x2e>
 800714c:	21ef      	movs	r1, #239	; 0xef
 800714e:	4bac      	ldr	r3, [pc, #688]	; (8007400 <_dtoa_r+0x2d8>)
 8007150:	48ac      	ldr	r0, [pc, #688]	; (8007404 <_dtoa_r+0x2dc>)
 8007152:	f001 fc6d 	bl	8008a30 <__assert_func>
 8007156:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800715a:	6004      	str	r4, [r0, #0]
 800715c:	60c4      	str	r4, [r0, #12]
 800715e:	69eb      	ldr	r3, [r5, #28]
 8007160:	6819      	ldr	r1, [r3, #0]
 8007162:	b151      	cbz	r1, 800717a <_dtoa_r+0x52>
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	2301      	movs	r3, #1
 8007168:	4093      	lsls	r3, r2
 800716a:	604a      	str	r2, [r1, #4]
 800716c:	608b      	str	r3, [r1, #8]
 800716e:	4628      	mov	r0, r5
 8007170:	f000 fefa 	bl	8007f68 <_Bfree>
 8007174:	2200      	movs	r2, #0
 8007176:	69eb      	ldr	r3, [r5, #28]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	1e3b      	subs	r3, r7, #0
 800717c:	bfaf      	iteee	ge
 800717e:	2300      	movge	r3, #0
 8007180:	2201      	movlt	r2, #1
 8007182:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007186:	9305      	strlt	r3, [sp, #20]
 8007188:	bfa8      	it	ge
 800718a:	f8c8 3000 	strge.w	r3, [r8]
 800718e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007192:	4b9d      	ldr	r3, [pc, #628]	; (8007408 <_dtoa_r+0x2e0>)
 8007194:	bfb8      	it	lt
 8007196:	f8c8 2000 	strlt.w	r2, [r8]
 800719a:	ea33 0309 	bics.w	r3, r3, r9
 800719e:	d119      	bne.n	80071d4 <_dtoa_r+0xac>
 80071a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80071a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071ac:	4333      	orrs	r3, r6
 80071ae:	f000 8589 	beq.w	8007cc4 <_dtoa_r+0xb9c>
 80071b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071b4:	b953      	cbnz	r3, 80071cc <_dtoa_r+0xa4>
 80071b6:	4b95      	ldr	r3, [pc, #596]	; (800740c <_dtoa_r+0x2e4>)
 80071b8:	e023      	b.n	8007202 <_dtoa_r+0xda>
 80071ba:	4b95      	ldr	r3, [pc, #596]	; (8007410 <_dtoa_r+0x2e8>)
 80071bc:	9303      	str	r3, [sp, #12]
 80071be:	3308      	adds	r3, #8
 80071c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	9803      	ldr	r0, [sp, #12]
 80071c6:	b019      	add	sp, #100	; 0x64
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	4b8f      	ldr	r3, [pc, #572]	; (800740c <_dtoa_r+0x2e4>)
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	3303      	adds	r3, #3
 80071d2:	e7f5      	b.n	80071c0 <_dtoa_r+0x98>
 80071d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80071dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071e0:	2200      	movs	r2, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	f7f9 fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 80071e8:	4680      	mov	r8, r0
 80071ea:	b160      	cbz	r0, 8007206 <_dtoa_r+0xde>
 80071ec:	2301      	movs	r3, #1
 80071ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8562 	beq.w	8007cbe <_dtoa_r+0xb96>
 80071fa:	4b86      	ldr	r3, [pc, #536]	; (8007414 <_dtoa_r+0x2ec>)
 80071fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	e7de      	b.n	80071c4 <_dtoa_r+0x9c>
 8007206:	ab16      	add	r3, sp, #88	; 0x58
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	ab17      	add	r3, sp, #92	; 0x5c
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4628      	mov	r0, r5
 8007210:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007214:	f001 f98a 	bl	800852c <__d2b>
 8007218:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800721c:	4682      	mov	sl, r0
 800721e:	2c00      	cmp	r4, #0
 8007220:	d07e      	beq.n	8007320 <_dtoa_r+0x1f8>
 8007222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007228:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800722c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007230:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007234:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007238:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800723c:	4619      	mov	r1, r3
 800723e:	2200      	movs	r2, #0
 8007240:	4b75      	ldr	r3, [pc, #468]	; (8007418 <_dtoa_r+0x2f0>)
 8007242:	f7f8 ff91 	bl	8000168 <__aeabi_dsub>
 8007246:	a368      	add	r3, pc, #416	; (adr r3, 80073e8 <_dtoa_r+0x2c0>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 f944 	bl	80004d8 <__aeabi_dmul>
 8007250:	a367      	add	r3, pc, #412	; (adr r3, 80073f0 <_dtoa_r+0x2c8>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f8 ff89 	bl	800016c <__adddf3>
 800725a:	4606      	mov	r6, r0
 800725c:	4620      	mov	r0, r4
 800725e:	460f      	mov	r7, r1
 8007260:	f7f9 f8d0 	bl	8000404 <__aeabi_i2d>
 8007264:	a364      	add	r3, pc, #400	; (adr r3, 80073f8 <_dtoa_r+0x2d0>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f935 	bl	80004d8 <__aeabi_dmul>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4630      	mov	r0, r6
 8007274:	4639      	mov	r1, r7
 8007276:	f7f8 ff79 	bl	800016c <__adddf3>
 800727a:	4606      	mov	r6, r0
 800727c:	460f      	mov	r7, r1
 800727e:	f7f9 fbdb 	bl	8000a38 <__aeabi_d2iz>
 8007282:	2200      	movs	r2, #0
 8007284:	4683      	mov	fp, r0
 8007286:	2300      	movs	r3, #0
 8007288:	4630      	mov	r0, r6
 800728a:	4639      	mov	r1, r7
 800728c:	f7f9 fb96 	bl	80009bc <__aeabi_dcmplt>
 8007290:	b148      	cbz	r0, 80072a6 <_dtoa_r+0x17e>
 8007292:	4658      	mov	r0, fp
 8007294:	f7f9 f8b6 	bl	8000404 <__aeabi_i2d>
 8007298:	4632      	mov	r2, r6
 800729a:	463b      	mov	r3, r7
 800729c:	f7f9 fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80072a0:	b908      	cbnz	r0, 80072a6 <_dtoa_r+0x17e>
 80072a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072a6:	f1bb 0f16 	cmp.w	fp, #22
 80072aa:	d857      	bhi.n	800735c <_dtoa_r+0x234>
 80072ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072b0:	4b5a      	ldr	r3, [pc, #360]	; (800741c <_dtoa_r+0x2f4>)
 80072b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f9 fb7f 	bl	80009bc <__aeabi_dcmplt>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d04e      	beq.n	8007360 <_dtoa_r+0x238>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072cc:	1b1b      	subs	r3, r3, r4
 80072ce:	1e5a      	subs	r2, r3, #1
 80072d0:	bf46      	itte	mi
 80072d2:	f1c3 0901 	rsbmi	r9, r3, #1
 80072d6:	2300      	movmi	r3, #0
 80072d8:	f04f 0900 	movpl.w	r9, #0
 80072dc:	9209      	str	r2, [sp, #36]	; 0x24
 80072de:	bf48      	it	mi
 80072e0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80072e2:	f1bb 0f00 	cmp.w	fp, #0
 80072e6:	db3d      	blt.n	8007364 <_dtoa_r+0x23c>
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80072ee:	445b      	add	r3, fp
 80072f0:	9309      	str	r3, [sp, #36]	; 0x24
 80072f2:	2300      	movs	r3, #0
 80072f4:	930a      	str	r3, [sp, #40]	; 0x28
 80072f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072f8:	2b09      	cmp	r3, #9
 80072fa:	d867      	bhi.n	80073cc <_dtoa_r+0x2a4>
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	bfc4      	itt	gt
 8007300:	3b04      	subgt	r3, #4
 8007302:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007306:	bfc8      	it	gt
 8007308:	2400      	movgt	r4, #0
 800730a:	f1a3 0302 	sub.w	r3, r3, #2
 800730e:	bfd8      	it	le
 8007310:	2401      	movle	r4, #1
 8007312:	2b03      	cmp	r3, #3
 8007314:	f200 8086 	bhi.w	8007424 <_dtoa_r+0x2fc>
 8007318:	e8df f003 	tbb	[pc, r3]
 800731c:	5637392c 	.word	0x5637392c
 8007320:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007324:	441c      	add	r4, r3
 8007326:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800732a:	2b20      	cmp	r3, #32
 800732c:	bfc1      	itttt	gt
 800732e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007332:	fa09 f903 	lslgt.w	r9, r9, r3
 8007336:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800733a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800733e:	bfd6      	itet	le
 8007340:	f1c3 0320 	rsble	r3, r3, #32
 8007344:	ea49 0003 	orrgt.w	r0, r9, r3
 8007348:	fa06 f003 	lslle.w	r0, r6, r3
 800734c:	f7f9 f84a 	bl	80003e4 <__aeabi_ui2d>
 8007350:	2201      	movs	r2, #1
 8007352:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007356:	3c01      	subs	r4, #1
 8007358:	9213      	str	r2, [sp, #76]	; 0x4c
 800735a:	e76f      	b.n	800723c <_dtoa_r+0x114>
 800735c:	2301      	movs	r3, #1
 800735e:	e7b3      	b.n	80072c8 <_dtoa_r+0x1a0>
 8007360:	900f      	str	r0, [sp, #60]	; 0x3c
 8007362:	e7b2      	b.n	80072ca <_dtoa_r+0x1a2>
 8007364:	f1cb 0300 	rsb	r3, fp, #0
 8007368:	930a      	str	r3, [sp, #40]	; 0x28
 800736a:	2300      	movs	r3, #0
 800736c:	eba9 090b 	sub.w	r9, r9, fp
 8007370:	930e      	str	r3, [sp, #56]	; 0x38
 8007372:	e7c0      	b.n	80072f6 <_dtoa_r+0x1ce>
 8007374:	2300      	movs	r3, #0
 8007376:	930b      	str	r3, [sp, #44]	; 0x2c
 8007378:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc55      	bgt.n	800742a <_dtoa_r+0x302>
 800737e:	2301      	movs	r3, #1
 8007380:	461a      	mov	r2, r3
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	9308      	str	r3, [sp, #32]
 8007386:	9223      	str	r2, [sp, #140]	; 0x8c
 8007388:	e00b      	b.n	80073a2 <_dtoa_r+0x27a>
 800738a:	2301      	movs	r3, #1
 800738c:	e7f3      	b.n	8007376 <_dtoa_r+0x24e>
 800738e:	2300      	movs	r3, #0
 8007390:	930b      	str	r3, [sp, #44]	; 0x2c
 8007392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007394:	445b      	add	r3, fp
 8007396:	9306      	str	r3, [sp, #24]
 8007398:	3301      	adds	r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	9308      	str	r3, [sp, #32]
 800739e:	bfb8      	it	lt
 80073a0:	2301      	movlt	r3, #1
 80073a2:	2100      	movs	r1, #0
 80073a4:	2204      	movs	r2, #4
 80073a6:	69e8      	ldr	r0, [r5, #28]
 80073a8:	f102 0614 	add.w	r6, r2, #20
 80073ac:	429e      	cmp	r6, r3
 80073ae:	d940      	bls.n	8007432 <_dtoa_r+0x30a>
 80073b0:	6041      	str	r1, [r0, #4]
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 fd98 	bl	8007ee8 <_Balloc>
 80073b8:	9003      	str	r0, [sp, #12]
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d13c      	bne.n	8007438 <_dtoa_r+0x310>
 80073be:	4602      	mov	r2, r0
 80073c0:	f240 11af 	movw	r1, #431	; 0x1af
 80073c4:	4b16      	ldr	r3, [pc, #88]	; (8007420 <_dtoa_r+0x2f8>)
 80073c6:	e6c3      	b.n	8007150 <_dtoa_r+0x28>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7e1      	b.n	8007390 <_dtoa_r+0x268>
 80073cc:	2401      	movs	r4, #1
 80073ce:	2300      	movs	r3, #0
 80073d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80073d2:	9322      	str	r3, [sp, #136]	; 0x88
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d8:	2200      	movs	r2, #0
 80073da:	9306      	str	r3, [sp, #24]
 80073dc:	9308      	str	r3, [sp, #32]
 80073de:	2312      	movs	r3, #18
 80073e0:	e7d1      	b.n	8007386 <_dtoa_r+0x25e>
 80073e2:	bf00      	nop
 80073e4:	f3af 8000 	nop.w
 80073e8:	636f4361 	.word	0x636f4361
 80073ec:	3fd287a7 	.word	0x3fd287a7
 80073f0:	8b60c8b3 	.word	0x8b60c8b3
 80073f4:	3fc68a28 	.word	0x3fc68a28
 80073f8:	509f79fb 	.word	0x509f79fb
 80073fc:	3fd34413 	.word	0x3fd34413
 8007400:	0800b239 	.word	0x0800b239
 8007404:	0800b250 	.word	0x0800b250
 8007408:	7ff00000 	.word	0x7ff00000
 800740c:	0800b235 	.word	0x0800b235
 8007410:	0800b22c 	.word	0x0800b22c
 8007414:	0800b209 	.word	0x0800b209
 8007418:	3ff80000 	.word	0x3ff80000
 800741c:	0800b340 	.word	0x0800b340
 8007420:	0800b2a8 	.word	0x0800b2a8
 8007424:	2301      	movs	r3, #1
 8007426:	930b      	str	r3, [sp, #44]	; 0x2c
 8007428:	e7d4      	b.n	80073d4 <_dtoa_r+0x2ac>
 800742a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800742c:	9306      	str	r3, [sp, #24]
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	e7b7      	b.n	80073a2 <_dtoa_r+0x27a>
 8007432:	3101      	adds	r1, #1
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	e7b7      	b.n	80073a8 <_dtoa_r+0x280>
 8007438:	69eb      	ldr	r3, [r5, #28]
 800743a:	9a03      	ldr	r2, [sp, #12]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	9b08      	ldr	r3, [sp, #32]
 8007440:	2b0e      	cmp	r3, #14
 8007442:	f200 80a8 	bhi.w	8007596 <_dtoa_r+0x46e>
 8007446:	2c00      	cmp	r4, #0
 8007448:	f000 80a5 	beq.w	8007596 <_dtoa_r+0x46e>
 800744c:	f1bb 0f00 	cmp.w	fp, #0
 8007450:	dd34      	ble.n	80074bc <_dtoa_r+0x394>
 8007452:	4b9a      	ldr	r3, [pc, #616]	; (80076bc <_dtoa_r+0x594>)
 8007454:	f00b 020f 	and.w	r2, fp, #15
 8007458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800745c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007460:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007464:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007468:	ea4f 142b 	mov.w	r4, fp, asr #4
 800746c:	d016      	beq.n	800749c <_dtoa_r+0x374>
 800746e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007472:	4b93      	ldr	r3, [pc, #588]	; (80076c0 <_dtoa_r+0x598>)
 8007474:	2703      	movs	r7, #3
 8007476:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800747a:	f7f9 f957 	bl	800072c <__aeabi_ddiv>
 800747e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007482:	f004 040f 	and.w	r4, r4, #15
 8007486:	4e8e      	ldr	r6, [pc, #568]	; (80076c0 <_dtoa_r+0x598>)
 8007488:	b954      	cbnz	r4, 80074a0 <_dtoa_r+0x378>
 800748a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800748e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007492:	f7f9 f94b 	bl	800072c <__aeabi_ddiv>
 8007496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749a:	e029      	b.n	80074f0 <_dtoa_r+0x3c8>
 800749c:	2702      	movs	r7, #2
 800749e:	e7f2      	b.n	8007486 <_dtoa_r+0x35e>
 80074a0:	07e1      	lsls	r1, r4, #31
 80074a2:	d508      	bpl.n	80074b6 <_dtoa_r+0x38e>
 80074a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074ac:	f7f9 f814 	bl	80004d8 <__aeabi_dmul>
 80074b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074b4:	3701      	adds	r7, #1
 80074b6:	1064      	asrs	r4, r4, #1
 80074b8:	3608      	adds	r6, #8
 80074ba:	e7e5      	b.n	8007488 <_dtoa_r+0x360>
 80074bc:	f000 80a5 	beq.w	800760a <_dtoa_r+0x4e2>
 80074c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074c4:	f1cb 0400 	rsb	r4, fp, #0
 80074c8:	4b7c      	ldr	r3, [pc, #496]	; (80076bc <_dtoa_r+0x594>)
 80074ca:	f004 020f 	and.w	r2, r4, #15
 80074ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f8 ffff 	bl	80004d8 <__aeabi_dmul>
 80074da:	2702      	movs	r7, #2
 80074dc:	2300      	movs	r3, #0
 80074de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074e2:	4e77      	ldr	r6, [pc, #476]	; (80076c0 <_dtoa_r+0x598>)
 80074e4:	1124      	asrs	r4, r4, #4
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	f040 8084 	bne.w	80075f4 <_dtoa_r+0x4cc>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1d2      	bne.n	8007496 <_dtoa_r+0x36e>
 80074f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 8087 	beq.w	800760e <_dtoa_r+0x4e6>
 8007500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007504:	2200      	movs	r2, #0
 8007506:	4b6f      	ldr	r3, [pc, #444]	; (80076c4 <_dtoa_r+0x59c>)
 8007508:	f7f9 fa58 	bl	80009bc <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	d07e      	beq.n	800760e <_dtoa_r+0x4e6>
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d07b      	beq.n	800760e <_dtoa_r+0x4e6>
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	dd38      	ble.n	800758e <_dtoa_r+0x466>
 800751c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007520:	2200      	movs	r2, #0
 8007522:	4b69      	ldr	r3, [pc, #420]	; (80076c8 <_dtoa_r+0x5a0>)
 8007524:	f7f8 ffd8 	bl	80004d8 <__aeabi_dmul>
 8007528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800752c:	9c06      	ldr	r4, [sp, #24]
 800752e:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8007532:	3701      	adds	r7, #1
 8007534:	4638      	mov	r0, r7
 8007536:	f7f8 ff65 	bl	8000404 <__aeabi_i2d>
 800753a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800753e:	f7f8 ffcb 	bl	80004d8 <__aeabi_dmul>
 8007542:	2200      	movs	r2, #0
 8007544:	4b61      	ldr	r3, [pc, #388]	; (80076cc <_dtoa_r+0x5a4>)
 8007546:	f7f8 fe11 	bl	800016c <__adddf3>
 800754a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800754e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007552:	9611      	str	r6, [sp, #68]	; 0x44
 8007554:	2c00      	cmp	r4, #0
 8007556:	d15d      	bne.n	8007614 <_dtoa_r+0x4ec>
 8007558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800755c:	2200      	movs	r2, #0
 800755e:	4b5c      	ldr	r3, [pc, #368]	; (80076d0 <_dtoa_r+0x5a8>)
 8007560:	f7f8 fe02 	bl	8000168 <__aeabi_dsub>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800756c:	4633      	mov	r3, r6
 800756e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007570:	f7f9 fa42 	bl	80009f8 <__aeabi_dcmpgt>
 8007574:	2800      	cmp	r0, #0
 8007576:	f040 8295 	bne.w	8007aa4 <_dtoa_r+0x97c>
 800757a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007580:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007584:	f7f9 fa1a 	bl	80009bc <__aeabi_dcmplt>
 8007588:	2800      	cmp	r0, #0
 800758a:	f040 8289 	bne.w	8007aa0 <_dtoa_r+0x978>
 800758e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007592:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007598:	2b00      	cmp	r3, #0
 800759a:	f2c0 8151 	blt.w	8007840 <_dtoa_r+0x718>
 800759e:	f1bb 0f0e 	cmp.w	fp, #14
 80075a2:	f300 814d 	bgt.w	8007840 <_dtoa_r+0x718>
 80075a6:	4b45      	ldr	r3, [pc, #276]	; (80076bc <_dtoa_r+0x594>)
 80075a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80075b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f280 80da 	bge.w	8007770 <_dtoa_r+0x648>
 80075bc:	9b08      	ldr	r3, [sp, #32]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f300 80d6 	bgt.w	8007770 <_dtoa_r+0x648>
 80075c4:	f040 826b 	bne.w	8007a9e <_dtoa_r+0x976>
 80075c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b40      	ldr	r3, [pc, #256]	; (80076d0 <_dtoa_r+0x5a8>)
 80075d0:	f7f8 ff82 	bl	80004d8 <__aeabi_dmul>
 80075d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d8:	f7f9 fa04 	bl	80009e4 <__aeabi_dcmpge>
 80075dc:	9c08      	ldr	r4, [sp, #32]
 80075de:	4626      	mov	r6, r4
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f040 8241 	bne.w	8007a68 <_dtoa_r+0x940>
 80075e6:	2331      	movs	r3, #49	; 0x31
 80075e8:	9f03      	ldr	r7, [sp, #12]
 80075ea:	f10b 0b01 	add.w	fp, fp, #1
 80075ee:	f807 3b01 	strb.w	r3, [r7], #1
 80075f2:	e23d      	b.n	8007a70 <_dtoa_r+0x948>
 80075f4:	07e2      	lsls	r2, r4, #31
 80075f6:	d505      	bpl.n	8007604 <_dtoa_r+0x4dc>
 80075f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075fc:	f7f8 ff6c 	bl	80004d8 <__aeabi_dmul>
 8007600:	2301      	movs	r3, #1
 8007602:	3701      	adds	r7, #1
 8007604:	1064      	asrs	r4, r4, #1
 8007606:	3608      	adds	r6, #8
 8007608:	e76d      	b.n	80074e6 <_dtoa_r+0x3be>
 800760a:	2702      	movs	r7, #2
 800760c:	e770      	b.n	80074f0 <_dtoa_r+0x3c8>
 800760e:	46d8      	mov	r8, fp
 8007610:	9c08      	ldr	r4, [sp, #32]
 8007612:	e78f      	b.n	8007534 <_dtoa_r+0x40c>
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	4b29      	ldr	r3, [pc, #164]	; (80076bc <_dtoa_r+0x594>)
 8007618:	4421      	add	r1, r4
 800761a:	9112      	str	r1, [sp, #72]	; 0x48
 800761c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800761e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007622:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800762a:	2900      	cmp	r1, #0
 800762c:	d054      	beq.n	80076d8 <_dtoa_r+0x5b0>
 800762e:	2000      	movs	r0, #0
 8007630:	4928      	ldr	r1, [pc, #160]	; (80076d4 <_dtoa_r+0x5ac>)
 8007632:	f7f9 f87b 	bl	800072c <__aeabi_ddiv>
 8007636:	463b      	mov	r3, r7
 8007638:	4632      	mov	r2, r6
 800763a:	f7f8 fd95 	bl	8000168 <__aeabi_dsub>
 800763e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007642:	9f03      	ldr	r7, [sp, #12]
 8007644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007648:	f7f9 f9f6 	bl	8000a38 <__aeabi_d2iz>
 800764c:	4604      	mov	r4, r0
 800764e:	f7f8 fed9 	bl	8000404 <__aeabi_i2d>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800765a:	f7f8 fd85 	bl	8000168 <__aeabi_dsub>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	3430      	adds	r4, #48	; 0x30
 8007664:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800766c:	f807 4b01 	strb.w	r4, [r7], #1
 8007670:	f7f9 f9a4 	bl	80009bc <__aeabi_dcmplt>
 8007674:	2800      	cmp	r0, #0
 8007676:	d173      	bne.n	8007760 <_dtoa_r+0x638>
 8007678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800767c:	2000      	movs	r0, #0
 800767e:	4911      	ldr	r1, [pc, #68]	; (80076c4 <_dtoa_r+0x59c>)
 8007680:	f7f8 fd72 	bl	8000168 <__aeabi_dsub>
 8007684:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007688:	f7f9 f998 	bl	80009bc <__aeabi_dcmplt>
 800768c:	2800      	cmp	r0, #0
 800768e:	f040 80b6 	bne.w	80077fe <_dtoa_r+0x6d6>
 8007692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007694:	429f      	cmp	r7, r3
 8007696:	f43f af7a 	beq.w	800758e <_dtoa_r+0x466>
 800769a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800769e:	2200      	movs	r2, #0
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <_dtoa_r+0x5a0>)
 80076a2:	f7f8 ff19 	bl	80004d8 <__aeabi_dmul>
 80076a6:	2200      	movs	r2, #0
 80076a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <_dtoa_r+0x5a0>)
 80076b2:	f7f8 ff11 	bl	80004d8 <__aeabi_dmul>
 80076b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076ba:	e7c3      	b.n	8007644 <_dtoa_r+0x51c>
 80076bc:	0800b340 	.word	0x0800b340
 80076c0:	0800b318 	.word	0x0800b318
 80076c4:	3ff00000 	.word	0x3ff00000
 80076c8:	40240000 	.word	0x40240000
 80076cc:	401c0000 	.word	0x401c0000
 80076d0:	40140000 	.word	0x40140000
 80076d4:	3fe00000 	.word	0x3fe00000
 80076d8:	4630      	mov	r0, r6
 80076da:	4639      	mov	r1, r7
 80076dc:	f7f8 fefc 	bl	80004d8 <__aeabi_dmul>
 80076e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076e6:	9c03      	ldr	r4, [sp, #12]
 80076e8:	9314      	str	r3, [sp, #80]	; 0x50
 80076ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ee:	f7f9 f9a3 	bl	8000a38 <__aeabi_d2iz>
 80076f2:	9015      	str	r0, [sp, #84]	; 0x54
 80076f4:	f7f8 fe86 	bl	8000404 <__aeabi_i2d>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007700:	f7f8 fd32 	bl	8000168 <__aeabi_dsub>
 8007704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007706:	4606      	mov	r6, r0
 8007708:	3330      	adds	r3, #48	; 0x30
 800770a:	f804 3b01 	strb.w	r3, [r4], #1
 800770e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007710:	460f      	mov	r7, r1
 8007712:	429c      	cmp	r4, r3
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	d124      	bne.n	8007764 <_dtoa_r+0x63c>
 800771a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800771e:	4baf      	ldr	r3, [pc, #700]	; (80079dc <_dtoa_r+0x8b4>)
 8007720:	f7f8 fd24 	bl	800016c <__adddf3>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4630      	mov	r0, r6
 800772a:	4639      	mov	r1, r7
 800772c:	f7f9 f964 	bl	80009f8 <__aeabi_dcmpgt>
 8007730:	2800      	cmp	r0, #0
 8007732:	d163      	bne.n	80077fc <_dtoa_r+0x6d4>
 8007734:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007738:	2000      	movs	r0, #0
 800773a:	49a8      	ldr	r1, [pc, #672]	; (80079dc <_dtoa_r+0x8b4>)
 800773c:	f7f8 fd14 	bl	8000168 <__aeabi_dsub>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f9 f938 	bl	80009bc <__aeabi_dcmplt>
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f af1e 	beq.w	800758e <_dtoa_r+0x466>
 8007752:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007754:	1e7b      	subs	r3, r7, #1
 8007756:	9314      	str	r3, [sp, #80]	; 0x50
 8007758:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800775c:	2b30      	cmp	r3, #48	; 0x30
 800775e:	d0f8      	beq.n	8007752 <_dtoa_r+0x62a>
 8007760:	46c3      	mov	fp, r8
 8007762:	e03b      	b.n	80077dc <_dtoa_r+0x6b4>
 8007764:	4b9e      	ldr	r3, [pc, #632]	; (80079e0 <_dtoa_r+0x8b8>)
 8007766:	f7f8 feb7 	bl	80004d8 <__aeabi_dmul>
 800776a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800776e:	e7bc      	b.n	80076ea <_dtoa_r+0x5c2>
 8007770:	9f03      	ldr	r7, [sp, #12]
 8007772:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	f7f8 ffd5 	bl	800072c <__aeabi_ddiv>
 8007782:	f7f9 f959 	bl	8000a38 <__aeabi_d2iz>
 8007786:	4604      	mov	r4, r0
 8007788:	f7f8 fe3c 	bl	8000404 <__aeabi_i2d>
 800778c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007790:	f7f8 fea2 	bl	80004d8 <__aeabi_dmul>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4640      	mov	r0, r8
 800779a:	4649      	mov	r1, r9
 800779c:	f7f8 fce4 	bl	8000168 <__aeabi_dsub>
 80077a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80077a4:	f807 6b01 	strb.w	r6, [r7], #1
 80077a8:	9e03      	ldr	r6, [sp, #12]
 80077aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80077ae:	1bbe      	subs	r6, r7, r6
 80077b0:	45b4      	cmp	ip, r6
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	d136      	bne.n	8007826 <_dtoa_r+0x6fe>
 80077b8:	f7f8 fcd8 	bl	800016c <__adddf3>
 80077bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077c0:	4680      	mov	r8, r0
 80077c2:	4689      	mov	r9, r1
 80077c4:	f7f9 f918 	bl	80009f8 <__aeabi_dcmpgt>
 80077c8:	bb58      	cbnz	r0, 8007822 <_dtoa_r+0x6fa>
 80077ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f7f9 f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80077d6:	b108      	cbz	r0, 80077dc <_dtoa_r+0x6b4>
 80077d8:	07e3      	lsls	r3, r4, #31
 80077da:	d422      	bmi.n	8007822 <_dtoa_r+0x6fa>
 80077dc:	4651      	mov	r1, sl
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 fbc2 	bl	8007f68 <_Bfree>
 80077e4:	2300      	movs	r3, #0
 80077e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077e8:	703b      	strb	r3, [r7, #0]
 80077ea:	f10b 0301 	add.w	r3, fp, #1
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f43f ace6 	beq.w	80071c4 <_dtoa_r+0x9c>
 80077f8:	601f      	str	r7, [r3, #0]
 80077fa:	e4e3      	b.n	80071c4 <_dtoa_r+0x9c>
 80077fc:	4627      	mov	r7, r4
 80077fe:	463b      	mov	r3, r7
 8007800:	461f      	mov	r7, r3
 8007802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007806:	2a39      	cmp	r2, #57	; 0x39
 8007808:	d107      	bne.n	800781a <_dtoa_r+0x6f2>
 800780a:	9a03      	ldr	r2, [sp, #12]
 800780c:	429a      	cmp	r2, r3
 800780e:	d1f7      	bne.n	8007800 <_dtoa_r+0x6d8>
 8007810:	2230      	movs	r2, #48	; 0x30
 8007812:	9903      	ldr	r1, [sp, #12]
 8007814:	f108 0801 	add.w	r8, r8, #1
 8007818:	700a      	strb	r2, [r1, #0]
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	3201      	adds	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e79e      	b.n	8007760 <_dtoa_r+0x638>
 8007822:	46d8      	mov	r8, fp
 8007824:	e7eb      	b.n	80077fe <_dtoa_r+0x6d6>
 8007826:	2200      	movs	r2, #0
 8007828:	4b6d      	ldr	r3, [pc, #436]	; (80079e0 <_dtoa_r+0x8b8>)
 800782a:	f7f8 fe55 	bl	80004d8 <__aeabi_dmul>
 800782e:	2200      	movs	r2, #0
 8007830:	2300      	movs	r3, #0
 8007832:	4680      	mov	r8, r0
 8007834:	4689      	mov	r9, r1
 8007836:	f7f9 f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 800783a:	2800      	cmp	r0, #0
 800783c:	d09b      	beq.n	8007776 <_dtoa_r+0x64e>
 800783e:	e7cd      	b.n	80077dc <_dtoa_r+0x6b4>
 8007840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007842:	2a00      	cmp	r2, #0
 8007844:	f000 80c4 	beq.w	80079d0 <_dtoa_r+0x8a8>
 8007848:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800784a:	2a01      	cmp	r2, #1
 800784c:	f300 80a8 	bgt.w	80079a0 <_dtoa_r+0x878>
 8007850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007852:	2a00      	cmp	r2, #0
 8007854:	f000 80a0 	beq.w	8007998 <_dtoa_r+0x870>
 8007858:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800785c:	464f      	mov	r7, r9
 800785e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007862:	2101      	movs	r1, #1
 8007864:	441a      	add	r2, r3
 8007866:	4628      	mov	r0, r5
 8007868:	4499      	add	r9, r3
 800786a:	9209      	str	r2, [sp, #36]	; 0x24
 800786c:	f000 fc32 	bl	80080d4 <__i2b>
 8007870:	4606      	mov	r6, r0
 8007872:	b15f      	cbz	r7, 800788c <_dtoa_r+0x764>
 8007874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	dd08      	ble.n	800788c <_dtoa_r+0x764>
 800787a:	42bb      	cmp	r3, r7
 800787c:	bfa8      	it	ge
 800787e:	463b      	movge	r3, r7
 8007880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007882:	eba9 0903 	sub.w	r9, r9, r3
 8007886:	1aff      	subs	r7, r7, r3
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	9309      	str	r3, [sp, #36]	; 0x24
 800788c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788e:	b1f3      	cbz	r3, 80078ce <_dtoa_r+0x7a6>
 8007890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80a0 	beq.w	80079d8 <_dtoa_r+0x8b0>
 8007898:	2c00      	cmp	r4, #0
 800789a:	dd10      	ble.n	80078be <_dtoa_r+0x796>
 800789c:	4631      	mov	r1, r6
 800789e:	4622      	mov	r2, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fcd5 	bl	8008250 <__pow5mult>
 80078a6:	4652      	mov	r2, sl
 80078a8:	4601      	mov	r1, r0
 80078aa:	4606      	mov	r6, r0
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fc27 	bl	8008100 <__multiply>
 80078b2:	4680      	mov	r8, r0
 80078b4:	4651      	mov	r1, sl
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 fb56 	bl	8007f68 <_Bfree>
 80078bc:	46c2      	mov	sl, r8
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	1b1a      	subs	r2, r3, r4
 80078c2:	d004      	beq.n	80078ce <_dtoa_r+0x7a6>
 80078c4:	4651      	mov	r1, sl
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fcc2 	bl	8008250 <__pow5mult>
 80078cc:	4682      	mov	sl, r0
 80078ce:	2101      	movs	r1, #1
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 fbff 	bl	80080d4 <__i2b>
 80078d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d8:	4604      	mov	r4, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f340 8082 	ble.w	80079e4 <_dtoa_r+0x8bc>
 80078e0:	461a      	mov	r2, r3
 80078e2:	4601      	mov	r1, r0
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 fcb3 	bl	8008250 <__pow5mult>
 80078ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ec:	4604      	mov	r4, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	dd7b      	ble.n	80079ea <_dtoa_r+0x8c2>
 80078f2:	f04f 0800 	mov.w	r8, #0
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078fc:	6918      	ldr	r0, [r3, #16]
 80078fe:	f000 fb9b 	bl	8008038 <__hi0bits>
 8007902:	f1c0 0020 	rsb	r0, r0, #32
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	4418      	add	r0, r3
 800790a:	f010 001f 	ands.w	r0, r0, #31
 800790e:	f000 8092 	beq.w	8007a36 <_dtoa_r+0x90e>
 8007912:	f1c0 0320 	rsb	r3, r0, #32
 8007916:	2b04      	cmp	r3, #4
 8007918:	f340 8085 	ble.w	8007a26 <_dtoa_r+0x8fe>
 800791c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791e:	f1c0 001c 	rsb	r0, r0, #28
 8007922:	4403      	add	r3, r0
 8007924:	4481      	add	r9, r0
 8007926:	4407      	add	r7, r0
 8007928:	9309      	str	r3, [sp, #36]	; 0x24
 800792a:	f1b9 0f00 	cmp.w	r9, #0
 800792e:	dd05      	ble.n	800793c <_dtoa_r+0x814>
 8007930:	4651      	mov	r1, sl
 8007932:	464a      	mov	r2, r9
 8007934:	4628      	mov	r0, r5
 8007936:	f000 fce5 	bl	8008304 <__lshift>
 800793a:	4682      	mov	sl, r0
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	dd05      	ble.n	800794e <_dtoa_r+0x826>
 8007942:	4621      	mov	r1, r4
 8007944:	461a      	mov	r2, r3
 8007946:	4628      	mov	r0, r5
 8007948:	f000 fcdc 	bl	8008304 <__lshift>
 800794c:	4604      	mov	r4, r0
 800794e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d072      	beq.n	8007a3a <_dtoa_r+0x912>
 8007954:	4621      	mov	r1, r4
 8007956:	4650      	mov	r0, sl
 8007958:	f000 fd40 	bl	80083dc <__mcmp>
 800795c:	2800      	cmp	r0, #0
 800795e:	da6c      	bge.n	8007a3a <_dtoa_r+0x912>
 8007960:	2300      	movs	r3, #0
 8007962:	4651      	mov	r1, sl
 8007964:	220a      	movs	r2, #10
 8007966:	4628      	mov	r0, r5
 8007968:	f000 fb20 	bl	8007fac <__multadd>
 800796c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800796e:	4682      	mov	sl, r0
 8007970:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 81ac 	beq.w	8007cd2 <_dtoa_r+0xbaa>
 800797a:	2300      	movs	r3, #0
 800797c:	4631      	mov	r1, r6
 800797e:	220a      	movs	r2, #10
 8007980:	4628      	mov	r0, r5
 8007982:	f000 fb13 	bl	8007fac <__multadd>
 8007986:	9b06      	ldr	r3, [sp, #24]
 8007988:	4606      	mov	r6, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f300 8093 	bgt.w	8007ab6 <_dtoa_r+0x98e>
 8007990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007992:	2b02      	cmp	r3, #2
 8007994:	dc59      	bgt.n	8007a4a <_dtoa_r+0x922>
 8007996:	e08e      	b.n	8007ab6 <_dtoa_r+0x98e>
 8007998:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800799a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800799e:	e75d      	b.n	800785c <_dtoa_r+0x734>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	1e5c      	subs	r4, r3, #1
 80079a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	bfbf      	itttt	lt
 80079aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079ac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80079ae:	1ae3      	sublt	r3, r4, r3
 80079b0:	18d2      	addlt	r2, r2, r3
 80079b2:	bfa8      	it	ge
 80079b4:	1b1c      	subge	r4, r3, r4
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	bfbe      	ittt	lt
 80079ba:	940a      	strlt	r4, [sp, #40]	; 0x28
 80079bc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80079be:	2400      	movlt	r4, #0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bfb5      	itete	lt
 80079c4:	eba9 0703 	sublt.w	r7, r9, r3
 80079c8:	464f      	movge	r7, r9
 80079ca:	2300      	movlt	r3, #0
 80079cc:	9b08      	ldrge	r3, [sp, #32]
 80079ce:	e747      	b.n	8007860 <_dtoa_r+0x738>
 80079d0:	464f      	mov	r7, r9
 80079d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80079d6:	e74c      	b.n	8007872 <_dtoa_r+0x74a>
 80079d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079da:	e773      	b.n	80078c4 <_dtoa_r+0x79c>
 80079dc:	3fe00000 	.word	0x3fe00000
 80079e0:	40240000 	.word	0x40240000
 80079e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	dc18      	bgt.n	8007a1c <_dtoa_r+0x8f4>
 80079ea:	9b04      	ldr	r3, [sp, #16]
 80079ec:	b9b3      	cbnz	r3, 8007a1c <_dtoa_r+0x8f4>
 80079ee:	9b05      	ldr	r3, [sp, #20]
 80079f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f4:	b993      	cbnz	r3, 8007a1c <_dtoa_r+0x8f4>
 80079f6:	9b05      	ldr	r3, [sp, #20]
 80079f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079fc:	0d1b      	lsrs	r3, r3, #20
 80079fe:	051b      	lsls	r3, r3, #20
 8007a00:	b17b      	cbz	r3, 8007a22 <_dtoa_r+0x8fa>
 8007a02:	f04f 0801 	mov.w	r8, #1
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	f109 0901 	add.w	r9, r9, #1
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f47f af6f 	bne.w	80078f6 <_dtoa_r+0x7ce>
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e774      	b.n	8007906 <_dtoa_r+0x7de>
 8007a1c:	f04f 0800 	mov.w	r8, #0
 8007a20:	e7f6      	b.n	8007a10 <_dtoa_r+0x8e8>
 8007a22:	4698      	mov	r8, r3
 8007a24:	e7f4      	b.n	8007a10 <_dtoa_r+0x8e8>
 8007a26:	d080      	beq.n	800792a <_dtoa_r+0x802>
 8007a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2a:	331c      	adds	r3, #28
 8007a2c:	441a      	add	r2, r3
 8007a2e:	4499      	add	r9, r3
 8007a30:	441f      	add	r7, r3
 8007a32:	9209      	str	r2, [sp, #36]	; 0x24
 8007a34:	e779      	b.n	800792a <_dtoa_r+0x802>
 8007a36:	4603      	mov	r3, r0
 8007a38:	e7f6      	b.n	8007a28 <_dtoa_r+0x900>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc34      	bgt.n	8007aaa <_dtoa_r+0x982>
 8007a40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	dd31      	ble.n	8007aaa <_dtoa_r+0x982>
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	9306      	str	r3, [sp, #24]
 8007a4a:	9b06      	ldr	r3, [sp, #24]
 8007a4c:	b963      	cbnz	r3, 8007a68 <_dtoa_r+0x940>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	2205      	movs	r2, #5
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 faaa 	bl	8007fac <__multadd>
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	f000 fcbd 	bl	80083dc <__mcmp>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f73f adbf 	bgt.w	80075e6 <_dtoa_r+0x4be>
 8007a68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a6a:	9f03      	ldr	r7, [sp, #12]
 8007a6c:	ea6f 0b03 	mvn.w	fp, r3
 8007a70:	f04f 0800 	mov.w	r8, #0
 8007a74:	4621      	mov	r1, r4
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fa76 	bl	8007f68 <_Bfree>
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	f43f aead 	beq.w	80077dc <_dtoa_r+0x6b4>
 8007a82:	f1b8 0f00 	cmp.w	r8, #0
 8007a86:	d005      	beq.n	8007a94 <_dtoa_r+0x96c>
 8007a88:	45b0      	cmp	r8, r6
 8007a8a:	d003      	beq.n	8007a94 <_dtoa_r+0x96c>
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 fa6a 	bl	8007f68 <_Bfree>
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 fa66 	bl	8007f68 <_Bfree>
 8007a9c:	e69e      	b.n	80077dc <_dtoa_r+0x6b4>
 8007a9e:	2400      	movs	r4, #0
 8007aa0:	4626      	mov	r6, r4
 8007aa2:	e7e1      	b.n	8007a68 <_dtoa_r+0x940>
 8007aa4:	46c3      	mov	fp, r8
 8007aa6:	4626      	mov	r6, r4
 8007aa8:	e59d      	b.n	80075e6 <_dtoa_r+0x4be>
 8007aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80c8 	beq.w	8007c42 <_dtoa_r+0xb1a>
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	9306      	str	r3, [sp, #24]
 8007ab6:	2f00      	cmp	r7, #0
 8007ab8:	dd05      	ble.n	8007ac6 <_dtoa_r+0x99e>
 8007aba:	4631      	mov	r1, r6
 8007abc:	463a      	mov	r2, r7
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 fc20 	bl	8008304 <__lshift>
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	d05b      	beq.n	8007b84 <_dtoa_r+0xa5c>
 8007acc:	4628      	mov	r0, r5
 8007ace:	6871      	ldr	r1, [r6, #4]
 8007ad0:	f000 fa0a 	bl	8007ee8 <_Balloc>
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	b928      	cbnz	r0, 8007ae4 <_dtoa_r+0x9bc>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ade:	4b81      	ldr	r3, [pc, #516]	; (8007ce4 <_dtoa_r+0xbbc>)
 8007ae0:	f7ff bb36 	b.w	8007150 <_dtoa_r+0x28>
 8007ae4:	6932      	ldr	r2, [r6, #16]
 8007ae6:	f106 010c 	add.w	r1, r6, #12
 8007aea:	3202      	adds	r2, #2
 8007aec:	0092      	lsls	r2, r2, #2
 8007aee:	300c      	adds	r0, #12
 8007af0:	f7ff fa82 	bl	8006ff8 <memcpy>
 8007af4:	2201      	movs	r2, #1
 8007af6:	4639      	mov	r1, r7
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 fc03 	bl	8008304 <__lshift>
 8007afe:	46b0      	mov	r8, r6
 8007b00:	4606      	mov	r6, r0
 8007b02:	9b03      	ldr	r3, [sp, #12]
 8007b04:	9a03      	ldr	r2, [sp, #12]
 8007b06:	3301      	adds	r3, #1
 8007b08:	9308      	str	r3, [sp, #32]
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	930a      	str	r3, [sp, #40]	; 0x28
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	4650      	mov	r0, sl
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	f7ff fa77 	bl	8007014 <quorem>
 8007b26:	4641      	mov	r1, r8
 8007b28:	9006      	str	r0, [sp, #24]
 8007b2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f000 fc54 	bl	80083dc <__mcmp>
 8007b34:	4632      	mov	r2, r6
 8007b36:	9009      	str	r0, [sp, #36]	; 0x24
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 fc6a 	bl	8008414 <__mdiff>
 8007b40:	68c2      	ldr	r2, [r0, #12]
 8007b42:	4607      	mov	r7, r0
 8007b44:	bb02      	cbnz	r2, 8007b88 <_dtoa_r+0xa60>
 8007b46:	4601      	mov	r1, r0
 8007b48:	4650      	mov	r0, sl
 8007b4a:	f000 fc47 	bl	80083dc <__mcmp>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	4639      	mov	r1, r7
 8007b52:	4628      	mov	r0, r5
 8007b54:	920c      	str	r2, [sp, #48]	; 0x30
 8007b56:	f000 fa07 	bl	8007f68 <_Bfree>
 8007b5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b5e:	9f08      	ldr	r7, [sp, #32]
 8007b60:	ea43 0102 	orr.w	r1, r3, r2
 8007b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b66:	4319      	orrs	r1, r3
 8007b68:	d110      	bne.n	8007b8c <_dtoa_r+0xa64>
 8007b6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b6e:	d029      	beq.n	8007bc4 <_dtoa_r+0xa9c>
 8007b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd02      	ble.n	8007b7c <_dtoa_r+0xa54>
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	f883 9000 	strb.w	r9, [r3]
 8007b82:	e777      	b.n	8007a74 <_dtoa_r+0x94c>
 8007b84:	4630      	mov	r0, r6
 8007b86:	e7ba      	b.n	8007afe <_dtoa_r+0x9d6>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	e7e1      	b.n	8007b50 <_dtoa_r+0xa28>
 8007b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	db04      	blt.n	8007b9c <_dtoa_r+0xa74>
 8007b92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b94:	430b      	orrs	r3, r1
 8007b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	d120      	bne.n	8007bde <_dtoa_r+0xab6>
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	dded      	ble.n	8007b7c <_dtoa_r+0xa54>
 8007ba0:	4651      	mov	r1, sl
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 fbad 	bl	8008304 <__lshift>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4682      	mov	sl, r0
 8007bae:	f000 fc15 	bl	80083dc <__mcmp>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	dc03      	bgt.n	8007bbe <_dtoa_r+0xa96>
 8007bb6:	d1e1      	bne.n	8007b7c <_dtoa_r+0xa54>
 8007bb8:	f019 0f01 	tst.w	r9, #1
 8007bbc:	d0de      	beq.n	8007b7c <_dtoa_r+0xa54>
 8007bbe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bc2:	d1d8      	bne.n	8007b76 <_dtoa_r+0xa4e>
 8007bc4:	2339      	movs	r3, #57	; 0x39
 8007bc6:	9a04      	ldr	r2, [sp, #16]
 8007bc8:	7013      	strb	r3, [r2, #0]
 8007bca:	463b      	mov	r3, r7
 8007bcc:	461f      	mov	r7, r3
 8007bce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2a39      	cmp	r2, #57	; 0x39
 8007bd6:	d06b      	beq.n	8007cb0 <_dtoa_r+0xb88>
 8007bd8:	3201      	adds	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e74a      	b.n	8007a74 <_dtoa_r+0x94c>
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	dd07      	ble.n	8007bf2 <_dtoa_r+0xaca>
 8007be2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007be6:	d0ed      	beq.n	8007bc4 <_dtoa_r+0xa9c>
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	f109 0301 	add.w	r3, r9, #1
 8007bee:	7013      	strb	r3, [r2, #0]
 8007bf0:	e740      	b.n	8007a74 <_dtoa_r+0x94c>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bf6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d042      	beq.n	8007c84 <_dtoa_r+0xb5c>
 8007bfe:	4651      	mov	r1, sl
 8007c00:	2300      	movs	r3, #0
 8007c02:	220a      	movs	r2, #10
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 f9d1 	bl	8007fac <__multadd>
 8007c0a:	45b0      	cmp	r8, r6
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	f04f 020a 	mov.w	r2, #10
 8007c16:	4641      	mov	r1, r8
 8007c18:	4628      	mov	r0, r5
 8007c1a:	d107      	bne.n	8007c2c <_dtoa_r+0xb04>
 8007c1c:	f000 f9c6 	bl	8007fac <__multadd>
 8007c20:	4680      	mov	r8, r0
 8007c22:	4606      	mov	r6, r0
 8007c24:	9b08      	ldr	r3, [sp, #32]
 8007c26:	3301      	adds	r3, #1
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	e775      	b.n	8007b18 <_dtoa_r+0x9f0>
 8007c2c:	f000 f9be 	bl	8007fac <__multadd>
 8007c30:	4631      	mov	r1, r6
 8007c32:	4680      	mov	r8, r0
 8007c34:	2300      	movs	r3, #0
 8007c36:	220a      	movs	r2, #10
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 f9b7 	bl	8007fac <__multadd>
 8007c3e:	4606      	mov	r6, r0
 8007c40:	e7f0      	b.n	8007c24 <_dtoa_r+0xafc>
 8007c42:	9b08      	ldr	r3, [sp, #32]
 8007c44:	9306      	str	r3, [sp, #24]
 8007c46:	9f03      	ldr	r7, [sp, #12]
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7ff f9e2 	bl	8007014 <quorem>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c56:	f807 9b01 	strb.w	r9, [r7], #1
 8007c5a:	1afa      	subs	r2, r7, r3
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	dd07      	ble.n	8007c72 <_dtoa_r+0xb4a>
 8007c62:	4651      	mov	r1, sl
 8007c64:	2300      	movs	r3, #0
 8007c66:	220a      	movs	r2, #10
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f99f 	bl	8007fac <__multadd>
 8007c6e:	4682      	mov	sl, r0
 8007c70:	e7ea      	b.n	8007c48 <_dtoa_r+0xb20>
 8007c72:	9b06      	ldr	r3, [sp, #24]
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bfcc      	ite	gt
 8007c7c:	461f      	movgt	r7, r3
 8007c7e:	2701      	movle	r7, #1
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	441f      	add	r7, r3
 8007c84:	4651      	mov	r1, sl
 8007c86:	2201      	movs	r2, #1
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 fb3b 	bl	8008304 <__lshift>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4682      	mov	sl, r0
 8007c92:	f000 fba3 	bl	80083dc <__mcmp>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	dc97      	bgt.n	8007bca <_dtoa_r+0xaa2>
 8007c9a:	d102      	bne.n	8007ca2 <_dtoa_r+0xb7a>
 8007c9c:	f019 0f01 	tst.w	r9, #1
 8007ca0:	d193      	bne.n	8007bca <_dtoa_r+0xaa2>
 8007ca2:	463b      	mov	r3, r7
 8007ca4:	461f      	mov	r7, r3
 8007ca6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007caa:	2a30      	cmp	r2, #48	; 0x30
 8007cac:	d0fa      	beq.n	8007ca4 <_dtoa_r+0xb7c>
 8007cae:	e6e1      	b.n	8007a74 <_dtoa_r+0x94c>
 8007cb0:	9a03      	ldr	r2, [sp, #12]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d18a      	bne.n	8007bcc <_dtoa_r+0xaa4>
 8007cb6:	2331      	movs	r3, #49	; 0x31
 8007cb8:	f10b 0b01 	add.w	fp, fp, #1
 8007cbc:	e797      	b.n	8007bee <_dtoa_r+0xac6>
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <_dtoa_r+0xbc0>)
 8007cc0:	f7ff ba9f 	b.w	8007202 <_dtoa_r+0xda>
 8007cc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f47f aa77 	bne.w	80071ba <_dtoa_r+0x92>
 8007ccc:	4b07      	ldr	r3, [pc, #28]	; (8007cec <_dtoa_r+0xbc4>)
 8007cce:	f7ff ba98 	b.w	8007202 <_dtoa_r+0xda>
 8007cd2:	9b06      	ldr	r3, [sp, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dcb6      	bgt.n	8007c46 <_dtoa_r+0xb1e>
 8007cd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	f73f aeb5 	bgt.w	8007a4a <_dtoa_r+0x922>
 8007ce0:	e7b1      	b.n	8007c46 <_dtoa_r+0xb1e>
 8007ce2:	bf00      	nop
 8007ce4:	0800b2a8 	.word	0x0800b2a8
 8007ce8:	0800b208 	.word	0x0800b208
 8007cec:	0800b22c 	.word	0x0800b22c

08007cf0 <_free_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d040      	beq.n	8007d7a <_free_r+0x8a>
 8007cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cfc:	1f0c      	subs	r4, r1, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfb8      	it	lt
 8007d02:	18e4      	addlt	r4, r4, r3
 8007d04:	f000 f8e4 	bl	8007ed0 <__malloc_lock>
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <_free_r+0x8c>)
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	b933      	cbnz	r3, 8007d1c <_free_r+0x2c>
 8007d0e:	6063      	str	r3, [r4, #4]
 8007d10:	6014      	str	r4, [r2, #0]
 8007d12:	4628      	mov	r0, r5
 8007d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d18:	f000 b8e0 	b.w	8007edc <__malloc_unlock>
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	d908      	bls.n	8007d32 <_free_r+0x42>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	1821      	adds	r1, r4, r0
 8007d24:	428b      	cmp	r3, r1
 8007d26:	bf01      	itttt	eq
 8007d28:	6819      	ldreq	r1, [r3, #0]
 8007d2a:	685b      	ldreq	r3, [r3, #4]
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	e7ed      	b.n	8007d0e <_free_r+0x1e>
 8007d32:	461a      	mov	r2, r3
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	b10b      	cbz	r3, 8007d3c <_free_r+0x4c>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d9fa      	bls.n	8007d32 <_free_r+0x42>
 8007d3c:	6811      	ldr	r1, [r2, #0]
 8007d3e:	1850      	adds	r0, r2, r1
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d10b      	bne.n	8007d5c <_free_r+0x6c>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	4401      	add	r1, r0
 8007d48:	1850      	adds	r0, r2, r1
 8007d4a:	4283      	cmp	r3, r0
 8007d4c:	6011      	str	r1, [r2, #0]
 8007d4e:	d1e0      	bne.n	8007d12 <_free_r+0x22>
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4408      	add	r0, r1
 8007d56:	6010      	str	r0, [r2, #0]
 8007d58:	6053      	str	r3, [r2, #4]
 8007d5a:	e7da      	b.n	8007d12 <_free_r+0x22>
 8007d5c:	d902      	bls.n	8007d64 <_free_r+0x74>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	e7d6      	b.n	8007d12 <_free_r+0x22>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	1821      	adds	r1, r4, r0
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	bf01      	itttt	eq
 8007d6c:	6819      	ldreq	r1, [r3, #0]
 8007d6e:	685b      	ldreq	r3, [r3, #4]
 8007d70:	1809      	addeq	r1, r1, r0
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	6063      	str	r3, [r4, #4]
 8007d76:	6054      	str	r4, [r2, #4]
 8007d78:	e7cb      	b.n	8007d12 <_free_r+0x22>
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20001b9c 	.word	0x20001b9c

08007d80 <malloc>:
 8007d80:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <malloc+0xc>)
 8007d82:	4601      	mov	r1, r0
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f000 b823 	b.w	8007dd0 <_malloc_r>
 8007d8a:	bf00      	nop
 8007d8c:	200001e4 	.word	0x200001e4

08007d90 <sbrk_aligned>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	4e0e      	ldr	r6, [pc, #56]	; (8007dcc <sbrk_aligned+0x3c>)
 8007d94:	460c      	mov	r4, r1
 8007d96:	6831      	ldr	r1, [r6, #0]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	b911      	cbnz	r1, 8007da2 <sbrk_aligned+0x12>
 8007d9c:	f000 fe38 	bl	8008a10 <_sbrk_r>
 8007da0:	6030      	str	r0, [r6, #0]
 8007da2:	4621      	mov	r1, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 fe33 	bl	8008a10 <_sbrk_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d00a      	beq.n	8007dc4 <sbrk_aligned+0x34>
 8007dae:	1cc4      	adds	r4, r0, #3
 8007db0:	f024 0403 	bic.w	r4, r4, #3
 8007db4:	42a0      	cmp	r0, r4
 8007db6:	d007      	beq.n	8007dc8 <sbrk_aligned+0x38>
 8007db8:	1a21      	subs	r1, r4, r0
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 fe28 	bl	8008a10 <_sbrk_r>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d101      	bne.n	8007dc8 <sbrk_aligned+0x38>
 8007dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007dc8:	4620      	mov	r0, r4
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	20001ba0 	.word	0x20001ba0

08007dd0 <_malloc_r>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	1ccd      	adds	r5, r1, #3
 8007dd6:	f025 0503 	bic.w	r5, r5, #3
 8007dda:	3508      	adds	r5, #8
 8007ddc:	2d0c      	cmp	r5, #12
 8007dde:	bf38      	it	cc
 8007de0:	250c      	movcc	r5, #12
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	4607      	mov	r7, r0
 8007de6:	db01      	blt.n	8007dec <_malloc_r+0x1c>
 8007de8:	42a9      	cmp	r1, r5
 8007dea:	d905      	bls.n	8007df8 <_malloc_r+0x28>
 8007dec:	230c      	movs	r3, #12
 8007dee:	2600      	movs	r6, #0
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	4630      	mov	r0, r6
 8007df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ecc <_malloc_r+0xfc>
 8007dfc:	f000 f868 	bl	8007ed0 <__malloc_lock>
 8007e00:	f8d8 3000 	ldr.w	r3, [r8]
 8007e04:	461c      	mov	r4, r3
 8007e06:	bb5c      	cbnz	r4, 8007e60 <_malloc_r+0x90>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f7ff ffc0 	bl	8007d90 <sbrk_aligned>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	4604      	mov	r4, r0
 8007e14:	d155      	bne.n	8007ec2 <_malloc_r+0xf2>
 8007e16:	f8d8 4000 	ldr.w	r4, [r8]
 8007e1a:	4626      	mov	r6, r4
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	d145      	bne.n	8007eac <_malloc_r+0xdc>
 8007e20:	2c00      	cmp	r4, #0
 8007e22:	d048      	beq.n	8007eb6 <_malloc_r+0xe6>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	4631      	mov	r1, r6
 8007e28:	4638      	mov	r0, r7
 8007e2a:	eb04 0903 	add.w	r9, r4, r3
 8007e2e:	f000 fdef 	bl	8008a10 <_sbrk_r>
 8007e32:	4581      	cmp	r9, r0
 8007e34:	d13f      	bne.n	8007eb6 <_malloc_r+0xe6>
 8007e36:	6821      	ldr	r1, [r4, #0]
 8007e38:	4638      	mov	r0, r7
 8007e3a:	1a6d      	subs	r5, r5, r1
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7ff ffa7 	bl	8007d90 <sbrk_aligned>
 8007e42:	3001      	adds	r0, #1
 8007e44:	d037      	beq.n	8007eb6 <_malloc_r+0xe6>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	442b      	add	r3, r5
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d038      	beq.n	8007ec6 <_malloc_r+0xf6>
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	42a2      	cmp	r2, r4
 8007e58:	d12b      	bne.n	8007eb2 <_malloc_r+0xe2>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	e00f      	b.n	8007e80 <_malloc_r+0xb0>
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	1b52      	subs	r2, r2, r5
 8007e64:	d41f      	bmi.n	8007ea6 <_malloc_r+0xd6>
 8007e66:	2a0b      	cmp	r2, #11
 8007e68:	d917      	bls.n	8007e9a <_malloc_r+0xca>
 8007e6a:	1961      	adds	r1, r4, r5
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	6025      	str	r5, [r4, #0]
 8007e70:	bf18      	it	ne
 8007e72:	6059      	strne	r1, [r3, #4]
 8007e74:	6863      	ldr	r3, [r4, #4]
 8007e76:	bf08      	it	eq
 8007e78:	f8c8 1000 	streq.w	r1, [r8]
 8007e7c:	5162      	str	r2, [r4, r5]
 8007e7e:	604b      	str	r3, [r1, #4]
 8007e80:	4638      	mov	r0, r7
 8007e82:	f104 060b 	add.w	r6, r4, #11
 8007e86:	f000 f829 	bl	8007edc <__malloc_unlock>
 8007e8a:	f026 0607 	bic.w	r6, r6, #7
 8007e8e:	1d23      	adds	r3, r4, #4
 8007e90:	1af2      	subs	r2, r6, r3
 8007e92:	d0ae      	beq.n	8007df2 <_malloc_r+0x22>
 8007e94:	1b9b      	subs	r3, r3, r6
 8007e96:	50a3      	str	r3, [r4, r2]
 8007e98:	e7ab      	b.n	8007df2 <_malloc_r+0x22>
 8007e9a:	42a3      	cmp	r3, r4
 8007e9c:	6862      	ldr	r2, [r4, #4]
 8007e9e:	d1dd      	bne.n	8007e5c <_malloc_r+0x8c>
 8007ea0:	f8c8 2000 	str.w	r2, [r8]
 8007ea4:	e7ec      	b.n	8007e80 <_malloc_r+0xb0>
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	6864      	ldr	r4, [r4, #4]
 8007eaa:	e7ac      	b.n	8007e06 <_malloc_r+0x36>
 8007eac:	4634      	mov	r4, r6
 8007eae:	6876      	ldr	r6, [r6, #4]
 8007eb0:	e7b4      	b.n	8007e1c <_malloc_r+0x4c>
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	e7cc      	b.n	8007e50 <_malloc_r+0x80>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	4638      	mov	r0, r7
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	f000 f80e 	bl	8007edc <__malloc_unlock>
 8007ec0:	e797      	b.n	8007df2 <_malloc_r+0x22>
 8007ec2:	6025      	str	r5, [r4, #0]
 8007ec4:	e7dc      	b.n	8007e80 <_malloc_r+0xb0>
 8007ec6:	605b      	str	r3, [r3, #4]
 8007ec8:	deff      	udf	#255	; 0xff
 8007eca:	bf00      	nop
 8007ecc:	20001b9c 	.word	0x20001b9c

08007ed0 <__malloc_lock>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	; (8007ed8 <__malloc_lock+0x8>)
 8007ed2:	f7ff b881 	b.w	8006fd8 <__retarget_lock_acquire_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	20001b98 	.word	0x20001b98

08007edc <__malloc_unlock>:
 8007edc:	4801      	ldr	r0, [pc, #4]	; (8007ee4 <__malloc_unlock+0x8>)
 8007ede:	f7ff b87c 	b.w	8006fda <__retarget_lock_release_recursive>
 8007ee2:	bf00      	nop
 8007ee4:	20001b98 	.word	0x20001b98

08007ee8 <_Balloc>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	69c6      	ldr	r6, [r0, #28]
 8007eec:	4604      	mov	r4, r0
 8007eee:	460d      	mov	r5, r1
 8007ef0:	b976      	cbnz	r6, 8007f10 <_Balloc+0x28>
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	f7ff ff44 	bl	8007d80 <malloc>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	61e0      	str	r0, [r4, #28]
 8007efc:	b920      	cbnz	r0, 8007f08 <_Balloc+0x20>
 8007efe:	216b      	movs	r1, #107	; 0x6b
 8007f00:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <_Balloc+0x78>)
 8007f02:	4818      	ldr	r0, [pc, #96]	; (8007f64 <_Balloc+0x7c>)
 8007f04:	f000 fd94 	bl	8008a30 <__assert_func>
 8007f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f0c:	6006      	str	r6, [r0, #0]
 8007f0e:	60c6      	str	r6, [r0, #12]
 8007f10:	69e6      	ldr	r6, [r4, #28]
 8007f12:	68f3      	ldr	r3, [r6, #12]
 8007f14:	b183      	cbz	r3, 8007f38 <_Balloc+0x50>
 8007f16:	69e3      	ldr	r3, [r4, #28]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f1e:	b9b8      	cbnz	r0, 8007f50 <_Balloc+0x68>
 8007f20:	2101      	movs	r1, #1
 8007f22:	fa01 f605 	lsl.w	r6, r1, r5
 8007f26:	1d72      	adds	r2, r6, #5
 8007f28:	4620      	mov	r0, r4
 8007f2a:	0092      	lsls	r2, r2, #2
 8007f2c:	f000 fd9e 	bl	8008a6c <_calloc_r>
 8007f30:	b160      	cbz	r0, 8007f4c <_Balloc+0x64>
 8007f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f36:	e00e      	b.n	8007f56 <_Balloc+0x6e>
 8007f38:	2221      	movs	r2, #33	; 0x21
 8007f3a:	2104      	movs	r1, #4
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fd95 	bl	8008a6c <_calloc_r>
 8007f42:	69e3      	ldr	r3, [r4, #28]
 8007f44:	60f0      	str	r0, [r6, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e4      	bne.n	8007f16 <_Balloc+0x2e>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	6802      	ldr	r2, [r0, #0]
 8007f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f56:	2300      	movs	r3, #0
 8007f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f5c:	e7f7      	b.n	8007f4e <_Balloc+0x66>
 8007f5e:	bf00      	nop
 8007f60:	0800b239 	.word	0x0800b239
 8007f64:	0800b2b9 	.word	0x0800b2b9

08007f68 <_Bfree>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	69c6      	ldr	r6, [r0, #28]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	b976      	cbnz	r6, 8007f90 <_Bfree+0x28>
 8007f72:	2010      	movs	r0, #16
 8007f74:	f7ff ff04 	bl	8007d80 <malloc>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	61e8      	str	r0, [r5, #28]
 8007f7c:	b920      	cbnz	r0, 8007f88 <_Bfree+0x20>
 8007f7e:	218f      	movs	r1, #143	; 0x8f
 8007f80:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <_Bfree+0x3c>)
 8007f82:	4809      	ldr	r0, [pc, #36]	; (8007fa8 <_Bfree+0x40>)
 8007f84:	f000 fd54 	bl	8008a30 <__assert_func>
 8007f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f8c:	6006      	str	r6, [r0, #0]
 8007f8e:	60c6      	str	r6, [r0, #12]
 8007f90:	b13c      	cbz	r4, 8007fa2 <_Bfree+0x3a>
 8007f92:	69eb      	ldr	r3, [r5, #28]
 8007f94:	6862      	ldr	r2, [r4, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f9c:	6021      	str	r1, [r4, #0]
 8007f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	0800b239 	.word	0x0800b239
 8007fa8:	0800b2b9 	.word	0x0800b2b9

08007fac <__multadd>:
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	461e      	mov	r6, r3
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	690d      	ldr	r5, [r1, #16]
 8007fba:	f101 0c14 	add.w	ip, r1, #20
 8007fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	b299      	uxth	r1, r3
 8007fc6:	fb02 6101 	mla	r1, r2, r1, r6
 8007fca:	0c1e      	lsrs	r6, r3, #16
 8007fcc:	0c0b      	lsrs	r3, r1, #16
 8007fce:	fb02 3306 	mla	r3, r2, r6, r3
 8007fd2:	b289      	uxth	r1, r1
 8007fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fd8:	4285      	cmp	r5, r0
 8007fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fde:	f84c 1b04 	str.w	r1, [ip], #4
 8007fe2:	dcec      	bgt.n	8007fbe <__multadd+0x12>
 8007fe4:	b30e      	cbz	r6, 800802a <__multadd+0x7e>
 8007fe6:	68a3      	ldr	r3, [r4, #8]
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	dc19      	bgt.n	8008020 <__multadd+0x74>
 8007fec:	6861      	ldr	r1, [r4, #4]
 8007fee:	4638      	mov	r0, r7
 8007ff0:	3101      	adds	r1, #1
 8007ff2:	f7ff ff79 	bl	8007ee8 <_Balloc>
 8007ff6:	4680      	mov	r8, r0
 8007ff8:	b928      	cbnz	r0, 8008006 <__multadd+0x5a>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	21ba      	movs	r1, #186	; 0xba
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <__multadd+0x84>)
 8008000:	480c      	ldr	r0, [pc, #48]	; (8008034 <__multadd+0x88>)
 8008002:	f000 fd15 	bl	8008a30 <__assert_func>
 8008006:	6922      	ldr	r2, [r4, #16]
 8008008:	f104 010c 	add.w	r1, r4, #12
 800800c:	3202      	adds	r2, #2
 800800e:	0092      	lsls	r2, r2, #2
 8008010:	300c      	adds	r0, #12
 8008012:	f7fe fff1 	bl	8006ff8 <memcpy>
 8008016:	4621      	mov	r1, r4
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff ffa5 	bl	8007f68 <_Bfree>
 800801e:	4644      	mov	r4, r8
 8008020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008024:	3501      	adds	r5, #1
 8008026:	615e      	str	r6, [r3, #20]
 8008028:	6125      	str	r5, [r4, #16]
 800802a:	4620      	mov	r0, r4
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	0800b2a8 	.word	0x0800b2a8
 8008034:	0800b2b9 	.word	0x0800b2b9

08008038 <__hi0bits>:
 8008038:	0c02      	lsrs	r2, r0, #16
 800803a:	0412      	lsls	r2, r2, #16
 800803c:	4603      	mov	r3, r0
 800803e:	b9ca      	cbnz	r2, 8008074 <__hi0bits+0x3c>
 8008040:	0403      	lsls	r3, r0, #16
 8008042:	2010      	movs	r0, #16
 8008044:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008048:	bf04      	itt	eq
 800804a:	021b      	lsleq	r3, r3, #8
 800804c:	3008      	addeq	r0, #8
 800804e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008052:	bf04      	itt	eq
 8008054:	011b      	lsleq	r3, r3, #4
 8008056:	3004      	addeq	r0, #4
 8008058:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800805c:	bf04      	itt	eq
 800805e:	009b      	lsleq	r3, r3, #2
 8008060:	3002      	addeq	r0, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	db05      	blt.n	8008072 <__hi0bits+0x3a>
 8008066:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800806a:	f100 0001 	add.w	r0, r0, #1
 800806e:	bf08      	it	eq
 8008070:	2020      	moveq	r0, #32
 8008072:	4770      	bx	lr
 8008074:	2000      	movs	r0, #0
 8008076:	e7e5      	b.n	8008044 <__hi0bits+0xc>

08008078 <__lo0bits>:
 8008078:	6803      	ldr	r3, [r0, #0]
 800807a:	4602      	mov	r2, r0
 800807c:	f013 0007 	ands.w	r0, r3, #7
 8008080:	d00b      	beq.n	800809a <__lo0bits+0x22>
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	d421      	bmi.n	80080ca <__lo0bits+0x52>
 8008086:	0798      	lsls	r0, r3, #30
 8008088:	bf49      	itett	mi
 800808a:	085b      	lsrmi	r3, r3, #1
 800808c:	089b      	lsrpl	r3, r3, #2
 800808e:	2001      	movmi	r0, #1
 8008090:	6013      	strmi	r3, [r2, #0]
 8008092:	bf5c      	itt	pl
 8008094:	2002      	movpl	r0, #2
 8008096:	6013      	strpl	r3, [r2, #0]
 8008098:	4770      	bx	lr
 800809a:	b299      	uxth	r1, r3
 800809c:	b909      	cbnz	r1, 80080a2 <__lo0bits+0x2a>
 800809e:	2010      	movs	r0, #16
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	b2d9      	uxtb	r1, r3
 80080a4:	b909      	cbnz	r1, 80080aa <__lo0bits+0x32>
 80080a6:	3008      	adds	r0, #8
 80080a8:	0a1b      	lsrs	r3, r3, #8
 80080aa:	0719      	lsls	r1, r3, #28
 80080ac:	bf04      	itt	eq
 80080ae:	091b      	lsreq	r3, r3, #4
 80080b0:	3004      	addeq	r0, #4
 80080b2:	0799      	lsls	r1, r3, #30
 80080b4:	bf04      	itt	eq
 80080b6:	089b      	lsreq	r3, r3, #2
 80080b8:	3002      	addeq	r0, #2
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d403      	bmi.n	80080c6 <__lo0bits+0x4e>
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	f100 0001 	add.w	r0, r0, #1
 80080c4:	d003      	beq.n	80080ce <__lo0bits+0x56>
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	4770      	bx	lr
 80080ca:	2000      	movs	r0, #0
 80080cc:	4770      	bx	lr
 80080ce:	2020      	movs	r0, #32
 80080d0:	4770      	bx	lr
	...

080080d4 <__i2b>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	460c      	mov	r4, r1
 80080d8:	2101      	movs	r1, #1
 80080da:	f7ff ff05 	bl	8007ee8 <_Balloc>
 80080de:	4602      	mov	r2, r0
 80080e0:	b928      	cbnz	r0, 80080ee <__i2b+0x1a>
 80080e2:	f240 1145 	movw	r1, #325	; 0x145
 80080e6:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <__i2b+0x24>)
 80080e8:	4804      	ldr	r0, [pc, #16]	; (80080fc <__i2b+0x28>)
 80080ea:	f000 fca1 	bl	8008a30 <__assert_func>
 80080ee:	2301      	movs	r3, #1
 80080f0:	6144      	str	r4, [r0, #20]
 80080f2:	6103      	str	r3, [r0, #16]
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	bf00      	nop
 80080f8:	0800b2a8 	.word	0x0800b2a8
 80080fc:	0800b2b9 	.word	0x0800b2b9

08008100 <__multiply>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	4691      	mov	r9, r2
 8008106:	690a      	ldr	r2, [r1, #16]
 8008108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800810c:	460c      	mov	r4, r1
 800810e:	429a      	cmp	r2, r3
 8008110:	bfbe      	ittt	lt
 8008112:	460b      	movlt	r3, r1
 8008114:	464c      	movlt	r4, r9
 8008116:	4699      	movlt	r9, r3
 8008118:	6927      	ldr	r7, [r4, #16]
 800811a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	6861      	ldr	r1, [r4, #4]
 8008122:	eb07 060a 	add.w	r6, r7, sl
 8008126:	42b3      	cmp	r3, r6
 8008128:	b085      	sub	sp, #20
 800812a:	bfb8      	it	lt
 800812c:	3101      	addlt	r1, #1
 800812e:	f7ff fedb 	bl	8007ee8 <_Balloc>
 8008132:	b930      	cbnz	r0, 8008142 <__multiply+0x42>
 8008134:	4602      	mov	r2, r0
 8008136:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800813a:	4b43      	ldr	r3, [pc, #268]	; (8008248 <__multiply+0x148>)
 800813c:	4843      	ldr	r0, [pc, #268]	; (800824c <__multiply+0x14c>)
 800813e:	f000 fc77 	bl	8008a30 <__assert_func>
 8008142:	f100 0514 	add.w	r5, r0, #20
 8008146:	462b      	mov	r3, r5
 8008148:	2200      	movs	r2, #0
 800814a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800814e:	4543      	cmp	r3, r8
 8008150:	d321      	bcc.n	8008196 <__multiply+0x96>
 8008152:	f104 0314 	add.w	r3, r4, #20
 8008156:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800815a:	f109 0314 	add.w	r3, r9, #20
 800815e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008162:	9202      	str	r2, [sp, #8]
 8008164:	1b3a      	subs	r2, r7, r4
 8008166:	3a15      	subs	r2, #21
 8008168:	f022 0203 	bic.w	r2, r2, #3
 800816c:	3204      	adds	r2, #4
 800816e:	f104 0115 	add.w	r1, r4, #21
 8008172:	428f      	cmp	r7, r1
 8008174:	bf38      	it	cc
 8008176:	2204      	movcc	r2, #4
 8008178:	9201      	str	r2, [sp, #4]
 800817a:	9a02      	ldr	r2, [sp, #8]
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	429a      	cmp	r2, r3
 8008180:	d80c      	bhi.n	800819c <__multiply+0x9c>
 8008182:	2e00      	cmp	r6, #0
 8008184:	dd03      	ble.n	800818e <__multiply+0x8e>
 8008186:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800818a:	2b00      	cmp	r3, #0
 800818c:	d05a      	beq.n	8008244 <__multiply+0x144>
 800818e:	6106      	str	r6, [r0, #16]
 8008190:	b005      	add	sp, #20
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	f843 2b04 	str.w	r2, [r3], #4
 800819a:	e7d8      	b.n	800814e <__multiply+0x4e>
 800819c:	f8b3 a000 	ldrh.w	sl, [r3]
 80081a0:	f1ba 0f00 	cmp.w	sl, #0
 80081a4:	d023      	beq.n	80081ee <__multiply+0xee>
 80081a6:	46a9      	mov	r9, r5
 80081a8:	f04f 0c00 	mov.w	ip, #0
 80081ac:	f104 0e14 	add.w	lr, r4, #20
 80081b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081b4:	f8d9 1000 	ldr.w	r1, [r9]
 80081b8:	fa1f fb82 	uxth.w	fp, r2
 80081bc:	b289      	uxth	r1, r1
 80081be:	fb0a 110b 	mla	r1, sl, fp, r1
 80081c2:	4461      	add	r1, ip
 80081c4:	f8d9 c000 	ldr.w	ip, [r9]
 80081c8:	0c12      	lsrs	r2, r2, #16
 80081ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081ce:	fb0a c202 	mla	r2, sl, r2, ip
 80081d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081d6:	b289      	uxth	r1, r1
 80081d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081dc:	4577      	cmp	r7, lr
 80081de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081e2:	f849 1b04 	str.w	r1, [r9], #4
 80081e6:	d8e3      	bhi.n	80081b0 <__multiply+0xb0>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	f845 c002 	str.w	ip, [r5, r2]
 80081ee:	9a03      	ldr	r2, [sp, #12]
 80081f0:	3304      	adds	r3, #4
 80081f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081f6:	f1b9 0f00 	cmp.w	r9, #0
 80081fa:	d021      	beq.n	8008240 <__multiply+0x140>
 80081fc:	46ae      	mov	lr, r5
 80081fe:	f04f 0a00 	mov.w	sl, #0
 8008202:	6829      	ldr	r1, [r5, #0]
 8008204:	f104 0c14 	add.w	ip, r4, #20
 8008208:	f8bc b000 	ldrh.w	fp, [ip]
 800820c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008210:	b289      	uxth	r1, r1
 8008212:	fb09 220b 	mla	r2, r9, fp, r2
 8008216:	4452      	add	r2, sl
 8008218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800821c:	f84e 1b04 	str.w	r1, [lr], #4
 8008220:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008228:	f8be 1000 	ldrh.w	r1, [lr]
 800822c:	4567      	cmp	r7, ip
 800822e:	fb09 110a 	mla	r1, r9, sl, r1
 8008232:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008236:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800823a:	d8e5      	bhi.n	8008208 <__multiply+0x108>
 800823c:	9a01      	ldr	r2, [sp, #4]
 800823e:	50a9      	str	r1, [r5, r2]
 8008240:	3504      	adds	r5, #4
 8008242:	e79a      	b.n	800817a <__multiply+0x7a>
 8008244:	3e01      	subs	r6, #1
 8008246:	e79c      	b.n	8008182 <__multiply+0x82>
 8008248:	0800b2a8 	.word	0x0800b2a8
 800824c:	0800b2b9 	.word	0x0800b2b9

08008250 <__pow5mult>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4615      	mov	r5, r2
 8008256:	f012 0203 	ands.w	r2, r2, #3
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	d007      	beq.n	8008270 <__pow5mult+0x20>
 8008260:	4c25      	ldr	r4, [pc, #148]	; (80082f8 <__pow5mult+0xa8>)
 8008262:	3a01      	subs	r2, #1
 8008264:	2300      	movs	r3, #0
 8008266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800826a:	f7ff fe9f 	bl	8007fac <__multadd>
 800826e:	4607      	mov	r7, r0
 8008270:	10ad      	asrs	r5, r5, #2
 8008272:	d03d      	beq.n	80082f0 <__pow5mult+0xa0>
 8008274:	69f4      	ldr	r4, [r6, #28]
 8008276:	b97c      	cbnz	r4, 8008298 <__pow5mult+0x48>
 8008278:	2010      	movs	r0, #16
 800827a:	f7ff fd81 	bl	8007d80 <malloc>
 800827e:	4602      	mov	r2, r0
 8008280:	61f0      	str	r0, [r6, #28]
 8008282:	b928      	cbnz	r0, 8008290 <__pow5mult+0x40>
 8008284:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008288:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <__pow5mult+0xac>)
 800828a:	481d      	ldr	r0, [pc, #116]	; (8008300 <__pow5mult+0xb0>)
 800828c:	f000 fbd0 	bl	8008a30 <__assert_func>
 8008290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008294:	6004      	str	r4, [r0, #0]
 8008296:	60c4      	str	r4, [r0, #12]
 8008298:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800829c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082a0:	b94c      	cbnz	r4, 80082b6 <__pow5mult+0x66>
 80082a2:	f240 2171 	movw	r1, #625	; 0x271
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff14 	bl	80080d4 <__i2b>
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	f04f 0900 	mov.w	r9, #0
 80082ba:	07eb      	lsls	r3, r5, #31
 80082bc:	d50a      	bpl.n	80082d4 <__pow5mult+0x84>
 80082be:	4639      	mov	r1, r7
 80082c0:	4622      	mov	r2, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ff1c 	bl	8008100 <__multiply>
 80082c8:	4680      	mov	r8, r0
 80082ca:	4639      	mov	r1, r7
 80082cc:	4630      	mov	r0, r6
 80082ce:	f7ff fe4b 	bl	8007f68 <_Bfree>
 80082d2:	4647      	mov	r7, r8
 80082d4:	106d      	asrs	r5, r5, #1
 80082d6:	d00b      	beq.n	80082f0 <__pow5mult+0xa0>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	b938      	cbnz	r0, 80082ec <__pow5mult+0x9c>
 80082dc:	4622      	mov	r2, r4
 80082de:	4621      	mov	r1, r4
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff ff0d 	bl	8008100 <__multiply>
 80082e6:	6020      	str	r0, [r4, #0]
 80082e8:	f8c0 9000 	str.w	r9, [r0]
 80082ec:	4604      	mov	r4, r0
 80082ee:	e7e4      	b.n	80082ba <__pow5mult+0x6a>
 80082f0:	4638      	mov	r0, r7
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	bf00      	nop
 80082f8:	0800b408 	.word	0x0800b408
 80082fc:	0800b239 	.word	0x0800b239
 8008300:	0800b2b9 	.word	0x0800b2b9

08008304 <__lshift>:
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	460c      	mov	r4, r1
 800830a:	4607      	mov	r7, r0
 800830c:	4691      	mov	r9, r2
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	6849      	ldr	r1, [r1, #4]
 8008312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008316:	68a3      	ldr	r3, [r4, #8]
 8008318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800831c:	f108 0601 	add.w	r6, r8, #1
 8008320:	42b3      	cmp	r3, r6
 8008322:	db0b      	blt.n	800833c <__lshift+0x38>
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fddf 	bl	8007ee8 <_Balloc>
 800832a:	4605      	mov	r5, r0
 800832c:	b948      	cbnz	r0, 8008342 <__lshift+0x3e>
 800832e:	4602      	mov	r2, r0
 8008330:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <__lshift+0xd0>)
 8008336:	4828      	ldr	r0, [pc, #160]	; (80083d8 <__lshift+0xd4>)
 8008338:	f000 fb7a 	bl	8008a30 <__assert_func>
 800833c:	3101      	adds	r1, #1
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	e7ee      	b.n	8008320 <__lshift+0x1c>
 8008342:	2300      	movs	r3, #0
 8008344:	f100 0114 	add.w	r1, r0, #20
 8008348:	f100 0210 	add.w	r2, r0, #16
 800834c:	4618      	mov	r0, r3
 800834e:	4553      	cmp	r3, sl
 8008350:	db33      	blt.n	80083ba <__lshift+0xb6>
 8008352:	6920      	ldr	r0, [r4, #16]
 8008354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008358:	f104 0314 	add.w	r3, r4, #20
 800835c:	f019 091f 	ands.w	r9, r9, #31
 8008360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008368:	d02b      	beq.n	80083c2 <__lshift+0xbe>
 800836a:	468a      	mov	sl, r1
 800836c:	2200      	movs	r2, #0
 800836e:	f1c9 0e20 	rsb	lr, r9, #32
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	fa00 f009 	lsl.w	r0, r0, r9
 8008378:	4310      	orrs	r0, r2
 800837a:	f84a 0b04 	str.w	r0, [sl], #4
 800837e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008382:	459c      	cmp	ip, r3
 8008384:	fa22 f20e 	lsr.w	r2, r2, lr
 8008388:	d8f3      	bhi.n	8008372 <__lshift+0x6e>
 800838a:	ebac 0304 	sub.w	r3, ip, r4
 800838e:	3b15      	subs	r3, #21
 8008390:	f023 0303 	bic.w	r3, r3, #3
 8008394:	3304      	adds	r3, #4
 8008396:	f104 0015 	add.w	r0, r4, #21
 800839a:	4584      	cmp	ip, r0
 800839c:	bf38      	it	cc
 800839e:	2304      	movcc	r3, #4
 80083a0:	50ca      	str	r2, [r1, r3]
 80083a2:	b10a      	cbz	r2, 80083a8 <__lshift+0xa4>
 80083a4:	f108 0602 	add.w	r6, r8, #2
 80083a8:	3e01      	subs	r6, #1
 80083aa:	4638      	mov	r0, r7
 80083ac:	4621      	mov	r1, r4
 80083ae:	612e      	str	r6, [r5, #16]
 80083b0:	f7ff fdda 	bl	8007f68 <_Bfree>
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80083be:	3301      	adds	r3, #1
 80083c0:	e7c5      	b.n	800834e <__lshift+0x4a>
 80083c2:	3904      	subs	r1, #4
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	459c      	cmp	ip, r3
 80083ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80083ce:	d8f9      	bhi.n	80083c4 <__lshift+0xc0>
 80083d0:	e7ea      	b.n	80083a8 <__lshift+0xa4>
 80083d2:	bf00      	nop
 80083d4:	0800b2a8 	.word	0x0800b2a8
 80083d8:	0800b2b9 	.word	0x0800b2b9

080083dc <__mcmp>:
 80083dc:	4603      	mov	r3, r0
 80083de:	690a      	ldr	r2, [r1, #16]
 80083e0:	6900      	ldr	r0, [r0, #16]
 80083e2:	b530      	push	{r4, r5, lr}
 80083e4:	1a80      	subs	r0, r0, r2
 80083e6:	d10d      	bne.n	8008404 <__mcmp+0x28>
 80083e8:	3314      	adds	r3, #20
 80083ea:	3114      	adds	r1, #20
 80083ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083fc:	4295      	cmp	r5, r2
 80083fe:	d002      	beq.n	8008406 <__mcmp+0x2a>
 8008400:	d304      	bcc.n	800840c <__mcmp+0x30>
 8008402:	2001      	movs	r0, #1
 8008404:	bd30      	pop	{r4, r5, pc}
 8008406:	42a3      	cmp	r3, r4
 8008408:	d3f4      	bcc.n	80083f4 <__mcmp+0x18>
 800840a:	e7fb      	b.n	8008404 <__mcmp+0x28>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008410:	e7f8      	b.n	8008404 <__mcmp+0x28>
	...

08008414 <__mdiff>:
 8008414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	460d      	mov	r5, r1
 800841a:	4607      	mov	r7, r0
 800841c:	4611      	mov	r1, r2
 800841e:	4628      	mov	r0, r5
 8008420:	4614      	mov	r4, r2
 8008422:	f7ff ffdb 	bl	80083dc <__mcmp>
 8008426:	1e06      	subs	r6, r0, #0
 8008428:	d111      	bne.n	800844e <__mdiff+0x3a>
 800842a:	4631      	mov	r1, r6
 800842c:	4638      	mov	r0, r7
 800842e:	f7ff fd5b 	bl	8007ee8 <_Balloc>
 8008432:	4602      	mov	r2, r0
 8008434:	b928      	cbnz	r0, 8008442 <__mdiff+0x2e>
 8008436:	f240 2137 	movw	r1, #567	; 0x237
 800843a:	4b3a      	ldr	r3, [pc, #232]	; (8008524 <__mdiff+0x110>)
 800843c:	483a      	ldr	r0, [pc, #232]	; (8008528 <__mdiff+0x114>)
 800843e:	f000 faf7 	bl	8008a30 <__assert_func>
 8008442:	2301      	movs	r3, #1
 8008444:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008448:	4610      	mov	r0, r2
 800844a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844e:	bfa4      	itt	ge
 8008450:	4623      	movge	r3, r4
 8008452:	462c      	movge	r4, r5
 8008454:	4638      	mov	r0, r7
 8008456:	6861      	ldr	r1, [r4, #4]
 8008458:	bfa6      	itte	ge
 800845a:	461d      	movge	r5, r3
 800845c:	2600      	movge	r6, #0
 800845e:	2601      	movlt	r6, #1
 8008460:	f7ff fd42 	bl	8007ee8 <_Balloc>
 8008464:	4602      	mov	r2, r0
 8008466:	b918      	cbnz	r0, 8008470 <__mdiff+0x5c>
 8008468:	f240 2145 	movw	r1, #581	; 0x245
 800846c:	4b2d      	ldr	r3, [pc, #180]	; (8008524 <__mdiff+0x110>)
 800846e:	e7e5      	b.n	800843c <__mdiff+0x28>
 8008470:	f102 0814 	add.w	r8, r2, #20
 8008474:	46c2      	mov	sl, r8
 8008476:	f04f 0c00 	mov.w	ip, #0
 800847a:	6927      	ldr	r7, [r4, #16]
 800847c:	60c6      	str	r6, [r0, #12]
 800847e:	692e      	ldr	r6, [r5, #16]
 8008480:	f104 0014 	add.w	r0, r4, #20
 8008484:	f105 0914 	add.w	r9, r5, #20
 8008488:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800848c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008490:	3410      	adds	r4, #16
 8008492:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008496:	f859 3b04 	ldr.w	r3, [r9], #4
 800849a:	fa1f f18b 	uxth.w	r1, fp
 800849e:	4461      	add	r1, ip
 80084a0:	fa1f fc83 	uxth.w	ip, r3
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	eba1 010c 	sub.w	r1, r1, ip
 80084aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084b2:	b289      	uxth	r1, r1
 80084b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084b8:	454e      	cmp	r6, r9
 80084ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084be:	f84a 1b04 	str.w	r1, [sl], #4
 80084c2:	d8e6      	bhi.n	8008492 <__mdiff+0x7e>
 80084c4:	1b73      	subs	r3, r6, r5
 80084c6:	3b15      	subs	r3, #21
 80084c8:	f023 0303 	bic.w	r3, r3, #3
 80084cc:	3515      	adds	r5, #21
 80084ce:	3304      	adds	r3, #4
 80084d0:	42ae      	cmp	r6, r5
 80084d2:	bf38      	it	cc
 80084d4:	2304      	movcc	r3, #4
 80084d6:	4418      	add	r0, r3
 80084d8:	4443      	add	r3, r8
 80084da:	461e      	mov	r6, r3
 80084dc:	4605      	mov	r5, r0
 80084de:	4575      	cmp	r5, lr
 80084e0:	d30e      	bcc.n	8008500 <__mdiff+0xec>
 80084e2:	f10e 0103 	add.w	r1, lr, #3
 80084e6:	1a09      	subs	r1, r1, r0
 80084e8:	f021 0103 	bic.w	r1, r1, #3
 80084ec:	3803      	subs	r0, #3
 80084ee:	4586      	cmp	lr, r0
 80084f0:	bf38      	it	cc
 80084f2:	2100      	movcc	r1, #0
 80084f4:	440b      	add	r3, r1
 80084f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084fa:	b189      	cbz	r1, 8008520 <__mdiff+0x10c>
 80084fc:	6117      	str	r7, [r2, #16]
 80084fe:	e7a3      	b.n	8008448 <__mdiff+0x34>
 8008500:	f855 8b04 	ldr.w	r8, [r5], #4
 8008504:	fa1f f188 	uxth.w	r1, r8
 8008508:	4461      	add	r1, ip
 800850a:	140c      	asrs	r4, r1, #16
 800850c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008510:	b289      	uxth	r1, r1
 8008512:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008516:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800851a:	f846 1b04 	str.w	r1, [r6], #4
 800851e:	e7de      	b.n	80084de <__mdiff+0xca>
 8008520:	3f01      	subs	r7, #1
 8008522:	e7e8      	b.n	80084f6 <__mdiff+0xe2>
 8008524:	0800b2a8 	.word	0x0800b2a8
 8008528:	0800b2b9 	.word	0x0800b2b9

0800852c <__d2b>:
 800852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852e:	2101      	movs	r1, #1
 8008530:	4617      	mov	r7, r2
 8008532:	461c      	mov	r4, r3
 8008534:	9e08      	ldr	r6, [sp, #32]
 8008536:	f7ff fcd7 	bl	8007ee8 <_Balloc>
 800853a:	4605      	mov	r5, r0
 800853c:	b930      	cbnz	r0, 800854c <__d2b+0x20>
 800853e:	4602      	mov	r2, r0
 8008540:	f240 310f 	movw	r1, #783	; 0x30f
 8008544:	4b22      	ldr	r3, [pc, #136]	; (80085d0 <__d2b+0xa4>)
 8008546:	4823      	ldr	r0, [pc, #140]	; (80085d4 <__d2b+0xa8>)
 8008548:	f000 fa72 	bl	8008a30 <__assert_func>
 800854c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008550:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008554:	bb24      	cbnz	r4, 80085a0 <__d2b+0x74>
 8008556:	2f00      	cmp	r7, #0
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	d026      	beq.n	80085aa <__d2b+0x7e>
 800855c:	4668      	mov	r0, sp
 800855e:	9700      	str	r7, [sp, #0]
 8008560:	f7ff fd8a 	bl	8008078 <__lo0bits>
 8008564:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008568:	b1e8      	cbz	r0, 80085a6 <__d2b+0x7a>
 800856a:	f1c0 0320 	rsb	r3, r0, #32
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	430b      	orrs	r3, r1
 8008574:	40c2      	lsrs	r2, r0
 8008576:	616b      	str	r3, [r5, #20]
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	9b01      	ldr	r3, [sp, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	bf14      	ite	ne
 8008580:	2102      	movne	r1, #2
 8008582:	2101      	moveq	r1, #1
 8008584:	61ab      	str	r3, [r5, #24]
 8008586:	6129      	str	r1, [r5, #16]
 8008588:	b1bc      	cbz	r4, 80085ba <__d2b+0x8e>
 800858a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800858e:	4404      	add	r4, r0
 8008590:	6034      	str	r4, [r6, #0]
 8008592:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008598:	6018      	str	r0, [r3, #0]
 800859a:	4628      	mov	r0, r5
 800859c:	b003      	add	sp, #12
 800859e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a4:	e7d7      	b.n	8008556 <__d2b+0x2a>
 80085a6:	6169      	str	r1, [r5, #20]
 80085a8:	e7e7      	b.n	800857a <__d2b+0x4e>
 80085aa:	a801      	add	r0, sp, #4
 80085ac:	f7ff fd64 	bl	8008078 <__lo0bits>
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	2101      	movs	r1, #1
 80085b4:	616b      	str	r3, [r5, #20]
 80085b6:	3020      	adds	r0, #32
 80085b8:	e7e5      	b.n	8008586 <__d2b+0x5a>
 80085ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085be:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80085c2:	6030      	str	r0, [r6, #0]
 80085c4:	6918      	ldr	r0, [r3, #16]
 80085c6:	f7ff fd37 	bl	8008038 <__hi0bits>
 80085ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80085ce:	e7e2      	b.n	8008596 <__d2b+0x6a>
 80085d0:	0800b2a8 	.word	0x0800b2a8
 80085d4:	0800b2b9 	.word	0x0800b2b9

080085d8 <__ssputs_r>:
 80085d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085dc:	461f      	mov	r7, r3
 80085de:	688e      	ldr	r6, [r1, #8]
 80085e0:	4682      	mov	sl, r0
 80085e2:	42be      	cmp	r6, r7
 80085e4:	460c      	mov	r4, r1
 80085e6:	4690      	mov	r8, r2
 80085e8:	680b      	ldr	r3, [r1, #0]
 80085ea:	d82c      	bhi.n	8008646 <__ssputs_r+0x6e>
 80085ec:	898a      	ldrh	r2, [r1, #12]
 80085ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085f2:	d026      	beq.n	8008642 <__ssputs_r+0x6a>
 80085f4:	6965      	ldr	r5, [r4, #20]
 80085f6:	6909      	ldr	r1, [r1, #16]
 80085f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085fc:	eba3 0901 	sub.w	r9, r3, r1
 8008600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008604:	1c7b      	adds	r3, r7, #1
 8008606:	444b      	add	r3, r9
 8008608:	106d      	asrs	r5, r5, #1
 800860a:	429d      	cmp	r5, r3
 800860c:	bf38      	it	cc
 800860e:	461d      	movcc	r5, r3
 8008610:	0553      	lsls	r3, r2, #21
 8008612:	d527      	bpl.n	8008664 <__ssputs_r+0x8c>
 8008614:	4629      	mov	r1, r5
 8008616:	f7ff fbdb 	bl	8007dd0 <_malloc_r>
 800861a:	4606      	mov	r6, r0
 800861c:	b360      	cbz	r0, 8008678 <__ssputs_r+0xa0>
 800861e:	464a      	mov	r2, r9
 8008620:	6921      	ldr	r1, [r4, #16]
 8008622:	f7fe fce9 	bl	8006ff8 <memcpy>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800862c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	6126      	str	r6, [r4, #16]
 8008634:	444e      	add	r6, r9
 8008636:	6026      	str	r6, [r4, #0]
 8008638:	463e      	mov	r6, r7
 800863a:	6165      	str	r5, [r4, #20]
 800863c:	eba5 0509 	sub.w	r5, r5, r9
 8008640:	60a5      	str	r5, [r4, #8]
 8008642:	42be      	cmp	r6, r7
 8008644:	d900      	bls.n	8008648 <__ssputs_r+0x70>
 8008646:	463e      	mov	r6, r7
 8008648:	4632      	mov	r2, r6
 800864a:	4641      	mov	r1, r8
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	f000 f9c5 	bl	80089dc <memmove>
 8008652:	2000      	movs	r0, #0
 8008654:	68a3      	ldr	r3, [r4, #8]
 8008656:	1b9b      	subs	r3, r3, r6
 8008658:	60a3      	str	r3, [r4, #8]
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	4433      	add	r3, r6
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008664:	462a      	mov	r2, r5
 8008666:	f000 fa27 	bl	8008ab8 <_realloc_r>
 800866a:	4606      	mov	r6, r0
 800866c:	2800      	cmp	r0, #0
 800866e:	d1e0      	bne.n	8008632 <__ssputs_r+0x5a>
 8008670:	4650      	mov	r0, sl
 8008672:	6921      	ldr	r1, [r4, #16]
 8008674:	f7ff fb3c 	bl	8007cf0 <_free_r>
 8008678:	230c      	movs	r3, #12
 800867a:	f8ca 3000 	str.w	r3, [sl]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	e7e9      	b.n	8008660 <__ssputs_r+0x88>

0800868c <_svfiprintf_r>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	4698      	mov	r8, r3
 8008692:	898b      	ldrh	r3, [r1, #12]
 8008694:	4607      	mov	r7, r0
 8008696:	061b      	lsls	r3, r3, #24
 8008698:	460d      	mov	r5, r1
 800869a:	4614      	mov	r4, r2
 800869c:	b09d      	sub	sp, #116	; 0x74
 800869e:	d50e      	bpl.n	80086be <_svfiprintf_r+0x32>
 80086a0:	690b      	ldr	r3, [r1, #16]
 80086a2:	b963      	cbnz	r3, 80086be <_svfiprintf_r+0x32>
 80086a4:	2140      	movs	r1, #64	; 0x40
 80086a6:	f7ff fb93 	bl	8007dd0 <_malloc_r>
 80086aa:	6028      	str	r0, [r5, #0]
 80086ac:	6128      	str	r0, [r5, #16]
 80086ae:	b920      	cbnz	r0, 80086ba <_svfiprintf_r+0x2e>
 80086b0:	230c      	movs	r3, #12
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b8:	e0d0      	b.n	800885c <_svfiprintf_r+0x1d0>
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	616b      	str	r3, [r5, #20]
 80086be:	2300      	movs	r3, #0
 80086c0:	9309      	str	r3, [sp, #36]	; 0x24
 80086c2:	2320      	movs	r3, #32
 80086c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c8:	2330      	movs	r3, #48	; 0x30
 80086ca:	f04f 0901 	mov.w	r9, #1
 80086ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008874 <_svfiprintf_r+0x1e8>
 80086d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086da:	4623      	mov	r3, r4
 80086dc:	469a      	mov	sl, r3
 80086de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e2:	b10a      	cbz	r2, 80086e8 <_svfiprintf_r+0x5c>
 80086e4:	2a25      	cmp	r2, #37	; 0x25
 80086e6:	d1f9      	bne.n	80086dc <_svfiprintf_r+0x50>
 80086e8:	ebba 0b04 	subs.w	fp, sl, r4
 80086ec:	d00b      	beq.n	8008706 <_svfiprintf_r+0x7a>
 80086ee:	465b      	mov	r3, fp
 80086f0:	4622      	mov	r2, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff ff6f 	bl	80085d8 <__ssputs_r>
 80086fa:	3001      	adds	r0, #1
 80086fc:	f000 80a9 	beq.w	8008852 <_svfiprintf_r+0x1c6>
 8008700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008702:	445a      	add	r2, fp
 8008704:	9209      	str	r2, [sp, #36]	; 0x24
 8008706:	f89a 3000 	ldrb.w	r3, [sl]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 80a1 	beq.w	8008852 <_svfiprintf_r+0x1c6>
 8008710:	2300      	movs	r3, #0
 8008712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871a:	f10a 0a01 	add.w	sl, sl, #1
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008726:	931a      	str	r3, [sp, #104]	; 0x68
 8008728:	4654      	mov	r4, sl
 800872a:	2205      	movs	r2, #5
 800872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008730:	4850      	ldr	r0, [pc, #320]	; (8008874 <_svfiprintf_r+0x1e8>)
 8008732:	f7fe fc53 	bl	8006fdc <memchr>
 8008736:	9a04      	ldr	r2, [sp, #16]
 8008738:	b9d8      	cbnz	r0, 8008772 <_svfiprintf_r+0xe6>
 800873a:	06d0      	lsls	r0, r2, #27
 800873c:	bf44      	itt	mi
 800873e:	2320      	movmi	r3, #32
 8008740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008744:	0711      	lsls	r1, r2, #28
 8008746:	bf44      	itt	mi
 8008748:	232b      	movmi	r3, #43	; 0x2b
 800874a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874e:	f89a 3000 	ldrb.w	r3, [sl]
 8008752:	2b2a      	cmp	r3, #42	; 0x2a
 8008754:	d015      	beq.n	8008782 <_svfiprintf_r+0xf6>
 8008756:	4654      	mov	r4, sl
 8008758:	2000      	movs	r0, #0
 800875a:	f04f 0c0a 	mov.w	ip, #10
 800875e:	9a07      	ldr	r2, [sp, #28]
 8008760:	4621      	mov	r1, r4
 8008762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008766:	3b30      	subs	r3, #48	; 0x30
 8008768:	2b09      	cmp	r3, #9
 800876a:	d94d      	bls.n	8008808 <_svfiprintf_r+0x17c>
 800876c:	b1b0      	cbz	r0, 800879c <_svfiprintf_r+0x110>
 800876e:	9207      	str	r2, [sp, #28]
 8008770:	e014      	b.n	800879c <_svfiprintf_r+0x110>
 8008772:	eba0 0308 	sub.w	r3, r0, r8
 8008776:	fa09 f303 	lsl.w	r3, r9, r3
 800877a:	4313      	orrs	r3, r2
 800877c:	46a2      	mov	sl, r4
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	e7d2      	b.n	8008728 <_svfiprintf_r+0x9c>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	1d19      	adds	r1, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9103      	str	r1, [sp, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfbb      	ittet	lt
 800878e:	425b      	neglt	r3, r3
 8008790:	f042 0202 	orrlt.w	r2, r2, #2
 8008794:	9307      	strge	r3, [sp, #28]
 8008796:	9307      	strlt	r3, [sp, #28]
 8008798:	bfb8      	it	lt
 800879a:	9204      	strlt	r2, [sp, #16]
 800879c:	7823      	ldrb	r3, [r4, #0]
 800879e:	2b2e      	cmp	r3, #46	; 0x2e
 80087a0:	d10c      	bne.n	80087bc <_svfiprintf_r+0x130>
 80087a2:	7863      	ldrb	r3, [r4, #1]
 80087a4:	2b2a      	cmp	r3, #42	; 0x2a
 80087a6:	d134      	bne.n	8008812 <_svfiprintf_r+0x186>
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	3402      	adds	r4, #2
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	9203      	str	r2, [sp, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfb8      	it	lt
 80087b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087ba:	9305      	str	r3, [sp, #20]
 80087bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008878 <_svfiprintf_r+0x1ec>
 80087c0:	2203      	movs	r2, #3
 80087c2:	4650      	mov	r0, sl
 80087c4:	7821      	ldrb	r1, [r4, #0]
 80087c6:	f7fe fc09 	bl	8006fdc <memchr>
 80087ca:	b138      	cbz	r0, 80087dc <_svfiprintf_r+0x150>
 80087cc:	2240      	movs	r2, #64	; 0x40
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	eba0 000a 	sub.w	r0, r0, sl
 80087d4:	4082      	lsls	r2, r0
 80087d6:	4313      	orrs	r3, r2
 80087d8:	3401      	adds	r4, #1
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e0:	2206      	movs	r2, #6
 80087e2:	4826      	ldr	r0, [pc, #152]	; (800887c <_svfiprintf_r+0x1f0>)
 80087e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e8:	f7fe fbf8 	bl	8006fdc <memchr>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d038      	beq.n	8008862 <_svfiprintf_r+0x1d6>
 80087f0:	4b23      	ldr	r3, [pc, #140]	; (8008880 <_svfiprintf_r+0x1f4>)
 80087f2:	bb1b      	cbnz	r3, 800883c <_svfiprintf_r+0x1b0>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	3307      	adds	r3, #7
 80087f8:	f023 0307 	bic.w	r3, r3, #7
 80087fc:	3308      	adds	r3, #8
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008802:	4433      	add	r3, r6
 8008804:	9309      	str	r3, [sp, #36]	; 0x24
 8008806:	e768      	b.n	80086da <_svfiprintf_r+0x4e>
 8008808:	460c      	mov	r4, r1
 800880a:	2001      	movs	r0, #1
 800880c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008810:	e7a6      	b.n	8008760 <_svfiprintf_r+0xd4>
 8008812:	2300      	movs	r3, #0
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	4619      	mov	r1, r3
 800881a:	3401      	adds	r4, #1
 800881c:	9305      	str	r3, [sp, #20]
 800881e:	4620      	mov	r0, r4
 8008820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008824:	3a30      	subs	r2, #48	; 0x30
 8008826:	2a09      	cmp	r2, #9
 8008828:	d903      	bls.n	8008832 <_svfiprintf_r+0x1a6>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0c6      	beq.n	80087bc <_svfiprintf_r+0x130>
 800882e:	9105      	str	r1, [sp, #20]
 8008830:	e7c4      	b.n	80087bc <_svfiprintf_r+0x130>
 8008832:	4604      	mov	r4, r0
 8008834:	2301      	movs	r3, #1
 8008836:	fb0c 2101 	mla	r1, ip, r1, r2
 800883a:	e7f0      	b.n	800881e <_svfiprintf_r+0x192>
 800883c:	ab03      	add	r3, sp, #12
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	462a      	mov	r2, r5
 8008842:	4638      	mov	r0, r7
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <_svfiprintf_r+0x1f8>)
 8008846:	a904      	add	r1, sp, #16
 8008848:	f7fd fe74 	bl	8006534 <_printf_float>
 800884c:	1c42      	adds	r2, r0, #1
 800884e:	4606      	mov	r6, r0
 8008850:	d1d6      	bne.n	8008800 <_svfiprintf_r+0x174>
 8008852:	89ab      	ldrh	r3, [r5, #12]
 8008854:	065b      	lsls	r3, r3, #25
 8008856:	f53f af2d 	bmi.w	80086b4 <_svfiprintf_r+0x28>
 800885a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800885c:	b01d      	add	sp, #116	; 0x74
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	ab03      	add	r3, sp, #12
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	462a      	mov	r2, r5
 8008868:	4638      	mov	r0, r7
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <_svfiprintf_r+0x1f8>)
 800886c:	a904      	add	r1, sp, #16
 800886e:	f7fe f901 	bl	8006a74 <_printf_i>
 8008872:	e7eb      	b.n	800884c <_svfiprintf_r+0x1c0>
 8008874:	0800b414 	.word	0x0800b414
 8008878:	0800b41a 	.word	0x0800b41a
 800887c:	0800b41e 	.word	0x0800b41e
 8008880:	08006535 	.word	0x08006535
 8008884:	080085d9 	.word	0x080085d9

08008888 <__sflush_r>:
 8008888:	898a      	ldrh	r2, [r1, #12]
 800888a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888c:	4605      	mov	r5, r0
 800888e:	0710      	lsls	r0, r2, #28
 8008890:	460c      	mov	r4, r1
 8008892:	d457      	bmi.n	8008944 <__sflush_r+0xbc>
 8008894:	684b      	ldr	r3, [r1, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	dc04      	bgt.n	80088a4 <__sflush_r+0x1c>
 800889a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc01      	bgt.n	80088a4 <__sflush_r+0x1c>
 80088a0:	2000      	movs	r0, #0
 80088a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	d0fa      	beq.n	80088a0 <__sflush_r+0x18>
 80088aa:	2300      	movs	r3, #0
 80088ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088b0:	682f      	ldr	r7, [r5, #0]
 80088b2:	6a21      	ldr	r1, [r4, #32]
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	d032      	beq.n	800891e <__sflush_r+0x96>
 80088b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	075a      	lsls	r2, r3, #29
 80088be:	d505      	bpl.n	80088cc <__sflush_r+0x44>
 80088c0:	6863      	ldr	r3, [r4, #4]
 80088c2:	1ac0      	subs	r0, r0, r3
 80088c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088c6:	b10b      	cbz	r3, 80088cc <__sflush_r+0x44>
 80088c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ca:	1ac0      	subs	r0, r0, r3
 80088cc:	2300      	movs	r3, #0
 80088ce:	4602      	mov	r2, r0
 80088d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d2:	4628      	mov	r0, r5
 80088d4:	6a21      	ldr	r1, [r4, #32]
 80088d6:	47b0      	blx	r6
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	d106      	bne.n	80088ec <__sflush_r+0x64>
 80088de:	6829      	ldr	r1, [r5, #0]
 80088e0:	291d      	cmp	r1, #29
 80088e2:	d82b      	bhi.n	800893c <__sflush_r+0xb4>
 80088e4:	4a28      	ldr	r2, [pc, #160]	; (8008988 <__sflush_r+0x100>)
 80088e6:	410a      	asrs	r2, r1
 80088e8:	07d6      	lsls	r6, r2, #31
 80088ea:	d427      	bmi.n	800893c <__sflush_r+0xb4>
 80088ec:	2200      	movs	r2, #0
 80088ee:	6062      	str	r2, [r4, #4]
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	04d9      	lsls	r1, r3, #19
 80088f4:	6022      	str	r2, [r4, #0]
 80088f6:	d504      	bpl.n	8008902 <__sflush_r+0x7a>
 80088f8:	1c42      	adds	r2, r0, #1
 80088fa:	d101      	bne.n	8008900 <__sflush_r+0x78>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b903      	cbnz	r3, 8008902 <__sflush_r+0x7a>
 8008900:	6560      	str	r0, [r4, #84]	; 0x54
 8008902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008904:	602f      	str	r7, [r5, #0]
 8008906:	2900      	cmp	r1, #0
 8008908:	d0ca      	beq.n	80088a0 <__sflush_r+0x18>
 800890a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800890e:	4299      	cmp	r1, r3
 8008910:	d002      	beq.n	8008918 <__sflush_r+0x90>
 8008912:	4628      	mov	r0, r5
 8008914:	f7ff f9ec 	bl	8007cf0 <_free_r>
 8008918:	2000      	movs	r0, #0
 800891a:	6360      	str	r0, [r4, #52]	; 0x34
 800891c:	e7c1      	b.n	80088a2 <__sflush_r+0x1a>
 800891e:	2301      	movs	r3, #1
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	1c41      	adds	r1, r0, #1
 8008926:	d1c8      	bne.n	80088ba <__sflush_r+0x32>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0c5      	beq.n	80088ba <__sflush_r+0x32>
 800892e:	2b1d      	cmp	r3, #29
 8008930:	d001      	beq.n	8008936 <__sflush_r+0xae>
 8008932:	2b16      	cmp	r3, #22
 8008934:	d101      	bne.n	800893a <__sflush_r+0xb2>
 8008936:	602f      	str	r7, [r5, #0]
 8008938:	e7b2      	b.n	80088a0 <__sflush_r+0x18>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	e7ae      	b.n	80088a2 <__sflush_r+0x1a>
 8008944:	690f      	ldr	r7, [r1, #16]
 8008946:	2f00      	cmp	r7, #0
 8008948:	d0aa      	beq.n	80088a0 <__sflush_r+0x18>
 800894a:	0793      	lsls	r3, r2, #30
 800894c:	bf18      	it	ne
 800894e:	2300      	movne	r3, #0
 8008950:	680e      	ldr	r6, [r1, #0]
 8008952:	bf08      	it	eq
 8008954:	694b      	ldreq	r3, [r1, #20]
 8008956:	1bf6      	subs	r6, r6, r7
 8008958:	600f      	str	r7, [r1, #0]
 800895a:	608b      	str	r3, [r1, #8]
 800895c:	2e00      	cmp	r6, #0
 800895e:	dd9f      	ble.n	80088a0 <__sflush_r+0x18>
 8008960:	4633      	mov	r3, r6
 8008962:	463a      	mov	r2, r7
 8008964:	4628      	mov	r0, r5
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800896c:	47e0      	blx	ip
 800896e:	2800      	cmp	r0, #0
 8008970:	dc06      	bgt.n	8008980 <__sflush_r+0xf8>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e790      	b.n	80088a2 <__sflush_r+0x1a>
 8008980:	4407      	add	r7, r0
 8008982:	1a36      	subs	r6, r6, r0
 8008984:	e7ea      	b.n	800895c <__sflush_r+0xd4>
 8008986:	bf00      	nop
 8008988:	dfbffffe 	.word	0xdfbffffe

0800898c <_fflush_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	690b      	ldr	r3, [r1, #16]
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b913      	cbnz	r3, 800899c <_fflush_r+0x10>
 8008996:	2500      	movs	r5, #0
 8008998:	4628      	mov	r0, r5
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	b118      	cbz	r0, 80089a6 <_fflush_r+0x1a>
 800899e:	6a03      	ldr	r3, [r0, #32]
 80089a0:	b90b      	cbnz	r3, 80089a6 <_fflush_r+0x1a>
 80089a2:	f7fe fa03 	bl	8006dac <__sinit>
 80089a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f3      	beq.n	8008996 <_fflush_r+0xa>
 80089ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089b0:	07d0      	lsls	r0, r2, #31
 80089b2:	d404      	bmi.n	80089be <_fflush_r+0x32>
 80089b4:	0599      	lsls	r1, r3, #22
 80089b6:	d402      	bmi.n	80089be <_fflush_r+0x32>
 80089b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ba:	f7fe fb0d 	bl	8006fd8 <__retarget_lock_acquire_recursive>
 80089be:	4628      	mov	r0, r5
 80089c0:	4621      	mov	r1, r4
 80089c2:	f7ff ff61 	bl	8008888 <__sflush_r>
 80089c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089c8:	4605      	mov	r5, r0
 80089ca:	07da      	lsls	r2, r3, #31
 80089cc:	d4e4      	bmi.n	8008998 <_fflush_r+0xc>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	059b      	lsls	r3, r3, #22
 80089d2:	d4e1      	bmi.n	8008998 <_fflush_r+0xc>
 80089d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089d6:	f7fe fb00 	bl	8006fda <__retarget_lock_release_recursive>
 80089da:	e7dd      	b.n	8008998 <_fflush_r+0xc>

080089dc <memmove>:
 80089dc:	4288      	cmp	r0, r1
 80089de:	b510      	push	{r4, lr}
 80089e0:	eb01 0402 	add.w	r4, r1, r2
 80089e4:	d902      	bls.n	80089ec <memmove+0x10>
 80089e6:	4284      	cmp	r4, r0
 80089e8:	4623      	mov	r3, r4
 80089ea:	d807      	bhi.n	80089fc <memmove+0x20>
 80089ec:	1e43      	subs	r3, r0, #1
 80089ee:	42a1      	cmp	r1, r4
 80089f0:	d008      	beq.n	8008a04 <memmove+0x28>
 80089f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fa:	e7f8      	b.n	80089ee <memmove+0x12>
 80089fc:	4601      	mov	r1, r0
 80089fe:	4402      	add	r2, r0
 8008a00:	428a      	cmp	r2, r1
 8008a02:	d100      	bne.n	8008a06 <memmove+0x2a>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a0e:	e7f7      	b.n	8008a00 <memmove+0x24>

08008a10 <_sbrk_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	2300      	movs	r3, #0
 8008a14:	4d05      	ldr	r5, [pc, #20]	; (8008a2c <_sbrk_r+0x1c>)
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f9 f8f6 	bl	8001c0c <_sbrk>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_sbrk_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_sbrk_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20001b94 	.word	0x20001b94

08008a30 <__assert_func>:
 8008a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a32:	4614      	mov	r4, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <__assert_func+0x2c>)
 8008a38:	4605      	mov	r5, r0
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68d8      	ldr	r0, [r3, #12]
 8008a3e:	b14c      	cbz	r4, 8008a54 <__assert_func+0x24>
 8008a40:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <__assert_func+0x30>)
 8008a42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a46:	9100      	str	r1, [sp, #0]
 8008a48:	462b      	mov	r3, r5
 8008a4a:	4906      	ldr	r1, [pc, #24]	; (8008a64 <__assert_func+0x34>)
 8008a4c:	f000 f870 	bl	8008b30 <fiprintf>
 8008a50:	f000 f880 	bl	8008b54 <abort>
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <__assert_func+0x38>)
 8008a56:	461c      	mov	r4, r3
 8008a58:	e7f3      	b.n	8008a42 <__assert_func+0x12>
 8008a5a:	bf00      	nop
 8008a5c:	200001e4 	.word	0x200001e4
 8008a60:	0800b42f 	.word	0x0800b42f
 8008a64:	0800b43c 	.word	0x0800b43c
 8008a68:	0800b46a 	.word	0x0800b46a

08008a6c <_calloc_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a72:	b934      	cbnz	r4, 8008a82 <_calloc_r+0x16>
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7ff f9ab 	bl	8007dd0 <_malloc_r>
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	b928      	cbnz	r0, 8008a8a <_calloc_r+0x1e>
 8008a7e:	4630      	mov	r0, r6
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	220c      	movs	r2, #12
 8008a84:	2600      	movs	r6, #0
 8008a86:	6002      	str	r2, [r0, #0]
 8008a88:	e7f9      	b.n	8008a7e <_calloc_r+0x12>
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	f7fe fa26 	bl	8006ede <memset>
 8008a92:	e7f4      	b.n	8008a7e <_calloc_r+0x12>

08008a94 <__ascii_mbtowc>:
 8008a94:	b082      	sub	sp, #8
 8008a96:	b901      	cbnz	r1, 8008a9a <__ascii_mbtowc+0x6>
 8008a98:	a901      	add	r1, sp, #4
 8008a9a:	b142      	cbz	r2, 8008aae <__ascii_mbtowc+0x1a>
 8008a9c:	b14b      	cbz	r3, 8008ab2 <__ascii_mbtowc+0x1e>
 8008a9e:	7813      	ldrb	r3, [r2, #0]
 8008aa0:	600b      	str	r3, [r1, #0]
 8008aa2:	7812      	ldrb	r2, [r2, #0]
 8008aa4:	1e10      	subs	r0, r2, #0
 8008aa6:	bf18      	it	ne
 8008aa8:	2001      	movne	r0, #1
 8008aaa:	b002      	add	sp, #8
 8008aac:	4770      	bx	lr
 8008aae:	4610      	mov	r0, r2
 8008ab0:	e7fb      	b.n	8008aaa <__ascii_mbtowc+0x16>
 8008ab2:	f06f 0001 	mvn.w	r0, #1
 8008ab6:	e7f8      	b.n	8008aaa <__ascii_mbtowc+0x16>

08008ab8 <_realloc_r>:
 8008ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abc:	4680      	mov	r8, r0
 8008abe:	4614      	mov	r4, r2
 8008ac0:	460e      	mov	r6, r1
 8008ac2:	b921      	cbnz	r1, 8008ace <_realloc_r+0x16>
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	f7ff b981 	b.w	8007dd0 <_malloc_r>
 8008ace:	b92a      	cbnz	r2, 8008adc <_realloc_r+0x24>
 8008ad0:	f7ff f90e 	bl	8007cf0 <_free_r>
 8008ad4:	4625      	mov	r5, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	f000 f841 	bl	8008b62 <_malloc_usable_size_r>
 8008ae0:	4284      	cmp	r4, r0
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	d802      	bhi.n	8008aec <_realloc_r+0x34>
 8008ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aea:	d812      	bhi.n	8008b12 <_realloc_r+0x5a>
 8008aec:	4621      	mov	r1, r4
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7ff f96e 	bl	8007dd0 <_malloc_r>
 8008af4:	4605      	mov	r5, r0
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d0ed      	beq.n	8008ad6 <_realloc_r+0x1e>
 8008afa:	42bc      	cmp	r4, r7
 8008afc:	4622      	mov	r2, r4
 8008afe:	4631      	mov	r1, r6
 8008b00:	bf28      	it	cs
 8008b02:	463a      	movcs	r2, r7
 8008b04:	f7fe fa78 	bl	8006ff8 <memcpy>
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f7ff f8f0 	bl	8007cf0 <_free_r>
 8008b10:	e7e1      	b.n	8008ad6 <_realloc_r+0x1e>
 8008b12:	4635      	mov	r5, r6
 8008b14:	e7df      	b.n	8008ad6 <_realloc_r+0x1e>

08008b16 <__ascii_wctomb>:
 8008b16:	4603      	mov	r3, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	b141      	cbz	r1, 8008b2e <__ascii_wctomb+0x18>
 8008b1c:	2aff      	cmp	r2, #255	; 0xff
 8008b1e:	d904      	bls.n	8008b2a <__ascii_wctomb+0x14>
 8008b20:	228a      	movs	r2, #138	; 0x8a
 8008b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	4770      	bx	lr
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	700a      	strb	r2, [r1, #0]
 8008b2e:	4770      	bx	lr

08008b30 <fiprintf>:
 8008b30:	b40e      	push	{r1, r2, r3}
 8008b32:	b503      	push	{r0, r1, lr}
 8008b34:	4601      	mov	r1, r0
 8008b36:	ab03      	add	r3, sp, #12
 8008b38:	4805      	ldr	r0, [pc, #20]	; (8008b50 <fiprintf+0x20>)
 8008b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3e:	6800      	ldr	r0, [r0, #0]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	f000 f83d 	bl	8008bc0 <_vfiprintf_r>
 8008b46:	b002      	add	sp, #8
 8008b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b4c:	b003      	add	sp, #12
 8008b4e:	4770      	bx	lr
 8008b50:	200001e4 	.word	0x200001e4

08008b54 <abort>:
 8008b54:	2006      	movs	r0, #6
 8008b56:	b508      	push	{r3, lr}
 8008b58:	f000 fa0a 	bl	8008f70 <raise>
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	f7f9 f825 	bl	8001bac <_exit>

08008b62 <_malloc_usable_size_r>:
 8008b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b66:	1f18      	subs	r0, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bfbc      	itt	lt
 8008b6c:	580b      	ldrlt	r3, [r1, r0]
 8008b6e:	18c0      	addlt	r0, r0, r3
 8008b70:	4770      	bx	lr

08008b72 <__sfputc_r>:
 8008b72:	6893      	ldr	r3, [r2, #8]
 8008b74:	b410      	push	{r4}
 8008b76:	3b01      	subs	r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	6093      	str	r3, [r2, #8]
 8008b7c:	da07      	bge.n	8008b8e <__sfputc_r+0x1c>
 8008b7e:	6994      	ldr	r4, [r2, #24]
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	db01      	blt.n	8008b88 <__sfputc_r+0x16>
 8008b84:	290a      	cmp	r1, #10
 8008b86:	d102      	bne.n	8008b8e <__sfputc_r+0x1c>
 8008b88:	bc10      	pop	{r4}
 8008b8a:	f000 b933 	b.w	8008df4 <__swbuf_r>
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	1c58      	adds	r0, r3, #1
 8008b92:	6010      	str	r0, [r2, #0]
 8008b94:	7019      	strb	r1, [r3, #0]
 8008b96:	4608      	mov	r0, r1
 8008b98:	bc10      	pop	{r4}
 8008b9a:	4770      	bx	lr

08008b9c <__sfputs_r>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	18d5      	adds	r5, r2, r3
 8008ba6:	42ac      	cmp	r4, r5
 8008ba8:	d101      	bne.n	8008bae <__sfputs_r+0x12>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e007      	b.n	8008bbe <__sfputs_r+0x22>
 8008bae:	463a      	mov	r2, r7
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb6:	f7ff ffdc 	bl	8008b72 <__sfputc_r>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d1f3      	bne.n	8008ba6 <__sfputs_r+0xa>
 8008bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bc0 <_vfiprintf_r>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	4614      	mov	r4, r2
 8008bc8:	4698      	mov	r8, r3
 8008bca:	4606      	mov	r6, r0
 8008bcc:	b09d      	sub	sp, #116	; 0x74
 8008bce:	b118      	cbz	r0, 8008bd8 <_vfiprintf_r+0x18>
 8008bd0:	6a03      	ldr	r3, [r0, #32]
 8008bd2:	b90b      	cbnz	r3, 8008bd8 <_vfiprintf_r+0x18>
 8008bd4:	f7fe f8ea 	bl	8006dac <__sinit>
 8008bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bda:	07d9      	lsls	r1, r3, #31
 8008bdc:	d405      	bmi.n	8008bea <_vfiprintf_r+0x2a>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_vfiprintf_r+0x2a>
 8008be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be6:	f7fe f9f7 	bl	8006fd8 <__retarget_lock_acquire_recursive>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	071b      	lsls	r3, r3, #28
 8008bee:	d501      	bpl.n	8008bf4 <_vfiprintf_r+0x34>
 8008bf0:	692b      	ldr	r3, [r5, #16]
 8008bf2:	b99b      	cbnz	r3, 8008c1c <_vfiprintf_r+0x5c>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 f93a 	bl	8008e70 <__swsetup_r>
 8008bfc:	b170      	cbz	r0, 8008c1c <_vfiprintf_r+0x5c>
 8008bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c00:	07dc      	lsls	r4, r3, #31
 8008c02:	d504      	bpl.n	8008c0e <_vfiprintf_r+0x4e>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c08:	b01d      	add	sp, #116	; 0x74
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	0598      	lsls	r0, r3, #22
 8008c12:	d4f7      	bmi.n	8008c04 <_vfiprintf_r+0x44>
 8008c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c16:	f7fe f9e0 	bl	8006fda <__retarget_lock_release_recursive>
 8008c1a:	e7f3      	b.n	8008c04 <_vfiprintf_r+0x44>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	2320      	movs	r3, #32
 8008c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c26:	2330      	movs	r3, #48	; 0x30
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c30:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008de0 <_vfiprintf_r+0x220>
 8008c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c38:	4623      	mov	r3, r4
 8008c3a:	469a      	mov	sl, r3
 8008c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c40:	b10a      	cbz	r2, 8008c46 <_vfiprintf_r+0x86>
 8008c42:	2a25      	cmp	r2, #37	; 0x25
 8008c44:	d1f9      	bne.n	8008c3a <_vfiprintf_r+0x7a>
 8008c46:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4a:	d00b      	beq.n	8008c64 <_vfiprintf_r+0xa4>
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	4622      	mov	r2, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffa2 	bl	8008b9c <__sfputs_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f000 80a9 	beq.w	8008db0 <_vfiprintf_r+0x1f0>
 8008c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c60:	445a      	add	r2, fp
 8008c62:	9209      	str	r2, [sp, #36]	; 0x24
 8008c64:	f89a 3000 	ldrb.w	r3, [sl]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80a1 	beq.w	8008db0 <_vfiprintf_r+0x1f0>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c78:	f10a 0a01 	add.w	sl, sl, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c84:	931a      	str	r3, [sp, #104]	; 0x68
 8008c86:	4654      	mov	r4, sl
 8008c88:	2205      	movs	r2, #5
 8008c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8e:	4854      	ldr	r0, [pc, #336]	; (8008de0 <_vfiprintf_r+0x220>)
 8008c90:	f7fe f9a4 	bl	8006fdc <memchr>
 8008c94:	9a04      	ldr	r2, [sp, #16]
 8008c96:	b9d8      	cbnz	r0, 8008cd0 <_vfiprintf_r+0x110>
 8008c98:	06d1      	lsls	r1, r2, #27
 8008c9a:	bf44      	itt	mi
 8008c9c:	2320      	movmi	r3, #32
 8008c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca2:	0713      	lsls	r3, r2, #28
 8008ca4:	bf44      	itt	mi
 8008ca6:	232b      	movmi	r3, #43	; 0x2b
 8008ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cac:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb2:	d015      	beq.n	8008ce0 <_vfiprintf_r+0x120>
 8008cb4:	4654      	mov	r4, sl
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f04f 0c0a 	mov.w	ip, #10
 8008cbc:	9a07      	ldr	r2, [sp, #28]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc4:	3b30      	subs	r3, #48	; 0x30
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	d94d      	bls.n	8008d66 <_vfiprintf_r+0x1a6>
 8008cca:	b1b0      	cbz	r0, 8008cfa <_vfiprintf_r+0x13a>
 8008ccc:	9207      	str	r2, [sp, #28]
 8008cce:	e014      	b.n	8008cfa <_vfiprintf_r+0x13a>
 8008cd0:	eba0 0308 	sub.w	r3, r0, r8
 8008cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	46a2      	mov	sl, r4
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	e7d2      	b.n	8008c86 <_vfiprintf_r+0xc6>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	1d19      	adds	r1, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	9103      	str	r1, [sp, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbb      	ittet	lt
 8008cec:	425b      	neglt	r3, r3
 8008cee:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf2:	9307      	strge	r3, [sp, #28]
 8008cf4:	9307      	strlt	r3, [sp, #28]
 8008cf6:	bfb8      	it	lt
 8008cf8:	9204      	strlt	r2, [sp, #16]
 8008cfa:	7823      	ldrb	r3, [r4, #0]
 8008cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfe:	d10c      	bne.n	8008d1a <_vfiprintf_r+0x15a>
 8008d00:	7863      	ldrb	r3, [r4, #1]
 8008d02:	2b2a      	cmp	r3, #42	; 0x2a
 8008d04:	d134      	bne.n	8008d70 <_vfiprintf_r+0x1b0>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	3402      	adds	r4, #2
 8008d0a:	1d1a      	adds	r2, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9203      	str	r2, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfb8      	it	lt
 8008d14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d18:	9305      	str	r3, [sp, #20]
 8008d1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008de4 <_vfiprintf_r+0x224>
 8008d1e:	2203      	movs	r2, #3
 8008d20:	4650      	mov	r0, sl
 8008d22:	7821      	ldrb	r1, [r4, #0]
 8008d24:	f7fe f95a 	bl	8006fdc <memchr>
 8008d28:	b138      	cbz	r0, 8008d3a <_vfiprintf_r+0x17a>
 8008d2a:	2240      	movs	r2, #64	; 0x40
 8008d2c:	9b04      	ldr	r3, [sp, #16]
 8008d2e:	eba0 000a 	sub.w	r0, r0, sl
 8008d32:	4082      	lsls	r2, r0
 8008d34:	4313      	orrs	r3, r2
 8008d36:	3401      	adds	r4, #1
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3e:	2206      	movs	r2, #6
 8008d40:	4829      	ldr	r0, [pc, #164]	; (8008de8 <_vfiprintf_r+0x228>)
 8008d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d46:	f7fe f949 	bl	8006fdc <memchr>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d03f      	beq.n	8008dce <_vfiprintf_r+0x20e>
 8008d4e:	4b27      	ldr	r3, [pc, #156]	; (8008dec <_vfiprintf_r+0x22c>)
 8008d50:	bb1b      	cbnz	r3, 8008d9a <_vfiprintf_r+0x1da>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	3307      	adds	r3, #7
 8008d56:	f023 0307 	bic.w	r3, r3, #7
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d60:	443b      	add	r3, r7
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	e768      	b.n	8008c38 <_vfiprintf_r+0x78>
 8008d66:	460c      	mov	r4, r1
 8008d68:	2001      	movs	r0, #1
 8008d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d6e:	e7a6      	b.n	8008cbe <_vfiprintf_r+0xfe>
 8008d70:	2300      	movs	r3, #0
 8008d72:	f04f 0c0a 	mov.w	ip, #10
 8008d76:	4619      	mov	r1, r3
 8008d78:	3401      	adds	r4, #1
 8008d7a:	9305      	str	r3, [sp, #20]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d82:	3a30      	subs	r2, #48	; 0x30
 8008d84:	2a09      	cmp	r2, #9
 8008d86:	d903      	bls.n	8008d90 <_vfiprintf_r+0x1d0>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0c6      	beq.n	8008d1a <_vfiprintf_r+0x15a>
 8008d8c:	9105      	str	r1, [sp, #20]
 8008d8e:	e7c4      	b.n	8008d1a <_vfiprintf_r+0x15a>
 8008d90:	4604      	mov	r4, r0
 8008d92:	2301      	movs	r3, #1
 8008d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d98:	e7f0      	b.n	8008d7c <_vfiprintf_r+0x1bc>
 8008d9a:	ab03      	add	r3, sp, #12
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	462a      	mov	r2, r5
 8008da0:	4630      	mov	r0, r6
 8008da2:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <_vfiprintf_r+0x230>)
 8008da4:	a904      	add	r1, sp, #16
 8008da6:	f7fd fbc5 	bl	8006534 <_printf_float>
 8008daa:	4607      	mov	r7, r0
 8008dac:	1c78      	adds	r0, r7, #1
 8008dae:	d1d6      	bne.n	8008d5e <_vfiprintf_r+0x19e>
 8008db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db2:	07d9      	lsls	r1, r3, #31
 8008db4:	d405      	bmi.n	8008dc2 <_vfiprintf_r+0x202>
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	059a      	lsls	r2, r3, #22
 8008dba:	d402      	bmi.n	8008dc2 <_vfiprintf_r+0x202>
 8008dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dbe:	f7fe f90c 	bl	8006fda <__retarget_lock_release_recursive>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	065b      	lsls	r3, r3, #25
 8008dc6:	f53f af1d 	bmi.w	8008c04 <_vfiprintf_r+0x44>
 8008dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dcc:	e71c      	b.n	8008c08 <_vfiprintf_r+0x48>
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <_vfiprintf_r+0x230>)
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	f7fd fe4b 	bl	8006a74 <_printf_i>
 8008dde:	e7e4      	b.n	8008daa <_vfiprintf_r+0x1ea>
 8008de0:	0800b414 	.word	0x0800b414
 8008de4:	0800b41a 	.word	0x0800b41a
 8008de8:	0800b41e 	.word	0x0800b41e
 8008dec:	08006535 	.word	0x08006535
 8008df0:	08008b9d 	.word	0x08008b9d

08008df4 <__swbuf_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	b118      	cbz	r0, 8008e06 <__swbuf_r+0x12>
 8008dfe:	6a03      	ldr	r3, [r0, #32]
 8008e00:	b90b      	cbnz	r3, 8008e06 <__swbuf_r+0x12>
 8008e02:	f7fd ffd3 	bl	8006dac <__sinit>
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	071a      	lsls	r2, r3, #28
 8008e0e:	d525      	bpl.n	8008e5c <__swbuf_r+0x68>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b31b      	cbz	r3, 8008e5c <__swbuf_r+0x68>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	b2f6      	uxtb	r6, r6
 8008e1a:	1a98      	subs	r0, r3, r2
 8008e1c:	6963      	ldr	r3, [r4, #20]
 8008e1e:	4637      	mov	r7, r6
 8008e20:	4283      	cmp	r3, r0
 8008e22:	dc04      	bgt.n	8008e2e <__swbuf_r+0x3a>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	f7ff fdb0 	bl	800898c <_fflush_r>
 8008e2c:	b9e0      	cbnz	r0, 8008e68 <__swbuf_r+0x74>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6962      	ldr	r2, [r4, #20]
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x5a>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d506      	bpl.n	8008e58 <__swbuf_r+0x64>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d104      	bne.n	8008e58 <__swbuf_r+0x64>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fd9b 	bl	800898c <_fflush_r>
 8008e56:	b938      	cbnz	r0, 8008e68 <__swbuf_r+0x74>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f806 	bl	8008e70 <__swsetup_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0d5      	beq.n	8008e14 <__swbuf_r+0x20>
 8008e68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e6c:	e7f4      	b.n	8008e58 <__swbuf_r+0x64>
	...

08008e70 <__swsetup_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <__swsetup_r+0xac>)
 8008e74:	4605      	mov	r5, r0
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	460c      	mov	r4, r1
 8008e7a:	b118      	cbz	r0, 8008e84 <__swsetup_r+0x14>
 8008e7c:	6a03      	ldr	r3, [r0, #32]
 8008e7e:	b90b      	cbnz	r3, 8008e84 <__swsetup_r+0x14>
 8008e80:	f7fd ff94 	bl	8006dac <__sinit>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e8a:	0718      	lsls	r0, r3, #28
 8008e8c:	d422      	bmi.n	8008ed4 <__swsetup_r+0x64>
 8008e8e:	06d9      	lsls	r1, r3, #27
 8008e90:	d407      	bmi.n	8008ea2 <__swsetup_r+0x32>
 8008e92:	2309      	movs	r3, #9
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	e034      	b.n	8008f0c <__swsetup_r+0x9c>
 8008ea2:	0758      	lsls	r0, r3, #29
 8008ea4:	d512      	bpl.n	8008ecc <__swsetup_r+0x5c>
 8008ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea8:	b141      	cbz	r1, 8008ebc <__swsetup_r+0x4c>
 8008eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eae:	4299      	cmp	r1, r3
 8008eb0:	d002      	beq.n	8008eb8 <__swsetup_r+0x48>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7fe ff1c 	bl	8007cf0 <_free_r>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	6363      	str	r3, [r4, #52]	; 0x34
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	6063      	str	r3, [r4, #4]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f043 0308 	orr.w	r3, r3, #8
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	b94b      	cbnz	r3, 8008eec <__swsetup_r+0x7c>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee2:	d003      	beq.n	8008eec <__swsetup_r+0x7c>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 f883 	bl	8008ff2 <__smakebuf_r>
 8008eec:	89a0      	ldrh	r0, [r4, #12]
 8008eee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef2:	f010 0301 	ands.w	r3, r0, #1
 8008ef6:	d00a      	beq.n	8008f0e <__swsetup_r+0x9e>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	6963      	ldr	r3, [r4, #20]
 8008efe:	425b      	negs	r3, r3
 8008f00:	61a3      	str	r3, [r4, #24]
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	b943      	cbnz	r3, 8008f18 <__swsetup_r+0xa8>
 8008f06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f0a:	d1c4      	bne.n	8008e96 <__swsetup_r+0x26>
 8008f0c:	bd38      	pop	{r3, r4, r5, pc}
 8008f0e:	0781      	lsls	r1, r0, #30
 8008f10:	bf58      	it	pl
 8008f12:	6963      	ldrpl	r3, [r4, #20]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	e7f4      	b.n	8008f02 <__swsetup_r+0x92>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e7f7      	b.n	8008f0c <__swsetup_r+0x9c>
 8008f1c:	200001e4 	.word	0x200001e4

08008f20 <_raise_r>:
 8008f20:	291f      	cmp	r1, #31
 8008f22:	b538      	push	{r3, r4, r5, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	d904      	bls.n	8008f34 <_raise_r+0x14>
 8008f2a:	2316      	movs	r3, #22
 8008f2c:	6003      	str	r3, [r0, #0]
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f36:	b112      	cbz	r2, 8008f3e <_raise_r+0x1e>
 8008f38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f3c:	b94b      	cbnz	r3, 8008f52 <_raise_r+0x32>
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 f830 	bl	8008fa4 <_getpid_r>
 8008f44:	462a      	mov	r2, r5
 8008f46:	4601      	mov	r1, r0
 8008f48:	4620      	mov	r0, r4
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f000 b817 	b.w	8008f80 <_kill_r>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d00a      	beq.n	8008f6c <_raise_r+0x4c>
 8008f56:	1c59      	adds	r1, r3, #1
 8008f58:	d103      	bne.n	8008f62 <_raise_r+0x42>
 8008f5a:	2316      	movs	r3, #22
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	2001      	movs	r0, #1
 8008f60:	e7e7      	b.n	8008f32 <_raise_r+0x12>
 8008f62:	2400      	movs	r4, #0
 8008f64:	4628      	mov	r0, r5
 8008f66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f6a:	4798      	blx	r3
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7e0      	b.n	8008f32 <_raise_r+0x12>

08008f70 <raise>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <raise+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f7ff bfd3 	b.w	8008f20 <_raise_r>
 8008f7a:	bf00      	nop
 8008f7c:	200001e4 	.word	0x200001e4

08008f80 <_kill_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	2300      	movs	r3, #0
 8008f84:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_kill_r+0x20>)
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7f8 fe03 	bl	8001b98 <_kill>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d102      	bne.n	8008f9c <_kill_r+0x1c>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	b103      	cbz	r3, 8008f9c <_kill_r+0x1c>
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001b94 	.word	0x20001b94

08008fa4 <_getpid_r>:
 8008fa4:	f7f8 bdf6 	b.w	8001b94 <_getpid>

08008fa8 <__swhatbuf_r>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	4615      	mov	r5, r2
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	461e      	mov	r6, r3
 8008fb6:	b096      	sub	sp, #88	; 0x58
 8008fb8:	da0c      	bge.n	8008fd4 <__swhatbuf_r+0x2c>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fc2:	bf0c      	ite	eq
 8008fc4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fc8:	2340      	movne	r3, #64	; 0x40
 8008fca:	2000      	movs	r0, #0
 8008fcc:	6031      	str	r1, [r6, #0]
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	b016      	add	sp, #88	; 0x58
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	466a      	mov	r2, sp
 8008fd6:	f000 f849 	bl	800906c <_fstat_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	dbed      	blt.n	8008fba <__swhatbuf_r+0x12>
 8008fde:	9901      	ldr	r1, [sp, #4]
 8008fe0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fe4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fe8:	4259      	negs	r1, r3
 8008fea:	4159      	adcs	r1, r3
 8008fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff0:	e7eb      	b.n	8008fca <__swhatbuf_r+0x22>

08008ff2 <__smakebuf_r>:
 8008ff2:	898b      	ldrh	r3, [r1, #12]
 8008ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff6:	079d      	lsls	r5, r3, #30
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	d507      	bpl.n	800900e <__smakebuf_r+0x1c>
 8008ffe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	2301      	movs	r3, #1
 8009008:	6163      	str	r3, [r4, #20]
 800900a:	b002      	add	sp, #8
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	466a      	mov	r2, sp
 8009010:	ab01      	add	r3, sp, #4
 8009012:	f7ff ffc9 	bl	8008fa8 <__swhatbuf_r>
 8009016:	9900      	ldr	r1, [sp, #0]
 8009018:	4605      	mov	r5, r0
 800901a:	4630      	mov	r0, r6
 800901c:	f7fe fed8 	bl	8007dd0 <_malloc_r>
 8009020:	b948      	cbnz	r0, 8009036 <__smakebuf_r+0x44>
 8009022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009026:	059a      	lsls	r2, r3, #22
 8009028:	d4ef      	bmi.n	800900a <__smakebuf_r+0x18>
 800902a:	f023 0303 	bic.w	r3, r3, #3
 800902e:	f043 0302 	orr.w	r3, r3, #2
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	e7e3      	b.n	8008ffe <__smakebuf_r+0xc>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	6020      	str	r0, [r4, #0]
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	6120      	str	r0, [r4, #16]
 8009044:	6163      	str	r3, [r4, #20]
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	b15b      	cbz	r3, 8009062 <__smakebuf_r+0x70>
 800904a:	4630      	mov	r0, r6
 800904c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009050:	f000 f81e 	bl	8009090 <_isatty_r>
 8009054:	b128      	cbz	r0, 8009062 <__smakebuf_r+0x70>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	431d      	orrs	r5, r3
 8009066:	81a5      	strh	r5, [r4, #12]
 8009068:	e7cf      	b.n	800900a <__smakebuf_r+0x18>
	...

0800906c <_fstat_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	2300      	movs	r3, #0
 8009070:	4d06      	ldr	r5, [pc, #24]	; (800908c <_fstat_r+0x20>)
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	4611      	mov	r1, r2
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	f7f8 fdbd 	bl	8001bf8 <_fstat>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d102      	bne.n	8009088 <_fstat_r+0x1c>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b103      	cbz	r3, 8009088 <_fstat_r+0x1c>
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	20001b94 	.word	0x20001b94

08009090 <_isatty_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	2300      	movs	r3, #0
 8009094:	4d05      	ldr	r5, [pc, #20]	; (80090ac <_isatty_r+0x1c>)
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7f8 fdb2 	bl	8001c04 <_isatty>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_isatty_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_isatty_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	20001b94 	.word	0x20001b94

080090b0 <_init>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	bf00      	nop
 80090b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b6:	bc08      	pop	{r3}
 80090b8:	469e      	mov	lr, r3
 80090ba:	4770      	bx	lr

080090bc <_fini>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr
